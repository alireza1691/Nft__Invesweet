{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "CollectionCreator__InsufficientAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "CollectionCreator__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "mintBy",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collection",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "requestCollectionFrom",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "NewCollection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_uri",
          "type": "string"
        }
      ],
      "name": "createCollection",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createSingleNft",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "byteCode",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_salt",
          "type": "uint256"
        }
      ],
      "name": "getAddressOfDeployedContract",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "collectionAddress",
          "type": "address"
        }
      ],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        }
      ],
      "name": "returnCode",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7b4f6da5d038c9ccf26ad0c8f8e599ce9ef350d31b251bc30b24fa9a3a3327c5",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4225328",
    "logsBloom": "0x
    "blockHash": "0xbe570126b699a920b75a188c4e69d1eed68291ea167baeb2341c8e29e1518704",
    "transactionHash": "0x7b4f6da5d038c9ccf26ad0c8f8e599ce9ef350d31b251bc30b24fa9a3a3327c5",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "4225328",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "0dc93e24c8b11fa20ea55095633b6ba7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"CollectionCreator__InsufficientAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"CollectionCreator__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"mintBy\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collection\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"requestCollectionFrom\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"NewCollection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_uri\",\"type\":\"string\"}],\"name\":\"createCollection\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createSingleNft\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"byteCode\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_salt\",\"type\":\"uint256\"}],\"name\":\"getAddressOfDeployedContract\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"collectionAddress\",\"type\":\"address\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"}],\"name\":\"returnCode\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721Creator.sol\":\"ERC721Creator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5c3501c1b70fcfc64417e9da5cc6a3597191baa354781e508e1e14cc0e50a038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/CollectionV2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\n\\nerror Collection__NotEnoughValue();\\nerror Collection__MaximumSupply();\\nerror Collection__NotAuthorized();\\n\\ncontract CollectionV2 is  ERC721URIStorage{\\n\\naddress immutable private i_creator;\\naddress immutable private i_owner;\\nuint256 private s_counter = 0;\\nuint256 immutable private i_mintFee;\\nuint256 immutable private i_maxSupply;\\nstring private uri;\\n\\nmapping(uint256 => address) private _owners;\\n\\nconstructor(string memory _name, string memory _symbol, uint256 _mintFee ,uint256 _maxSupply, address _owner, string memory _uri) ERC721(_name,_symbol)  {\\n    i_creator = msg.sender;\\n    i_mintFee = _mintFee;\\n    i_maxSupply = _maxSupply;\\n    i_owner = _owner;\\n    uri = _uri;\\n}\\n\\n\\nmodifier onlyCreator() {\\n    if(msg.sender == i_creator) {\\n        _;\\n    }\\n    else {\\n        revert Collection__NotAuthorized(); \\n    }\\n    \\n}\\nmodifier onlyOwner() {\\n    if(msg.sender == i_owner) {\\n        _;\\n    }\\n    else {\\n        revert Collection__NotAuthorized(); \\n    }\\n    \\n}\\n\\nfunction _mintWithEther (address requestFrom , uint256 amount) external onlyCreator returns(uint256) {\\n    if (amount <= i_mintFee) {\\n        revert Collection__NotEnoughValue();\\n    }\\n    if (i_maxSupply > 0 && s_counter >= i_maxSupply) {\\n        revert Collection__MaximumSupply();\\n    }\\n    _safeMint(requestFrom, s_counter);\\n    _setTokenURI(s_counter,uri);\\n    s_counter ++;\\n    return (s_counter-1);\\n}\\n// function _mintWithUsd () external {\\n// }\\n\\nfunction getTokenURI(uint256 tokenId) public view returns (string memory) {\\n    require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n    // return tokenURI(tokenId);\\n    return uri;\\n}\\n\\nfunction changeUri (string memory newUri) external onlyOwner{\\n    uri = newUri;\\n}\\n\\nfunction price () external view returns(uint256){\\n    return i_mintFee;\\n}\\n\\nfunction maxSupply() external view returns(uint256){\\n    return i_maxSupply;\\n}\\nfunction collectionOwner() external view returns(address){\\n    return i_owner;\\n}\\nfunction count() external view returns(uint256){\\n    return s_counter;\\n}\\nfunction getOwner (uint256 tokenId) external view returns(address){\\n    return _owners[tokenId];\\n}\\n\\n\\n}\",\"keccak256\":\"0xcf1d77d724a8276e4db6bf8c9cc99d6479600b8d07a32bbbf9df7ba605349897\",\"license\":\"MIT\"},\"contracts/ERC721Creator.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"./CollectionV2.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\n// import \\\"./Collection.sol\\\";\\n// import \\\"./CollectionV2.sol\\\";\\n\\nerror CollectionCreator__NotFound();\\nerror CollectionCreator__TransactionFailed();\\nerror CollectionCreator__InsufficientAmount();\\n\\ncontract ERC721Creator{\\n\\n    event Withdraw();\\n    event NewCollection(address requestCollectionFrom, address contractAddress);\\n    event Mint(address indexed mintBy , address indexed collection ,uint256 tokenId);\\n\\naddress immutable private i_owner;\\nuint256 private s_createFee; \\n// AggregatorV3Interface internal immutable aggregator;\\n\\nconstructor(/*address aggregatorAddress*/){\\n    i_owner = msg.sender;\\n    // aggregator = AggregatorV3Interface(aggregatorAddress);\\n}\\n\\nmapping (address => address[]) private ownerToCollection;\\nmapping (address => uint256) private balances;\\n\\nfunction createSingleNft () external {}\\n\\nfunction createCollection(\\n     string memory _name, string memory _symbol,uint256 _price, uint256 _maxSupply,string memory _uri/*, bytes32 salt*/\\n    ) external payable returns(address)  {\\n        if (msg.value < s_createFee) {\\n            revert CollectionCreator__InsufficientAmount();\\n        }\\n        // currently we just want to deploy with by function caller\\n        CollectionV2 newNft = new CollectionV2(_name,_symbol,_price,_maxSupply,msg.sender, _uri);\\n        // CollectionV2 newNft = (new CollectionV2){salt: salt}(_name,_symbol,_price,_maxSupply,_requsetFrom, _uri);\\n        address _contractAddress = address(newNft);\\n        ownerToCollection[msg.sender].push(_contractAddress);\\n    emit NewCollection(msg.sender, _contractAddress);\\n    return(_contractAddress);\\n}\\n\\nfunction mint(address collectionAddress) payable external {\\n    uint256 tokenId = CollectionV2(collectionAddress)._mintWithEther(msg.sender, msg.value);\\n    // (bool success,/* bytes memory data*/) = collectionAddress.delegatecall(\\n    //         abi.encodeWithSignature(\\\"_mintWithEther(address, uint256)\\\", msg.sender,msg.value)\\n    //     );\\n    // if (success == false) {\\n    //     revert CollectionCreator__TransactionFailed();\\n    // }\\n    balances[CollectionV2(collectionAddress).collectionOwner()] += msg.value;\\n    emit Mint(msg.sender, collectionAddress, tokenId);\\n}\\n\\nfunction withdraw() external payable {\\n    if (balances[msg.sender] == 0) {\\n        revert CollectionCreator__InsufficientAmount();\\n    }\\n    (bool ok,) = msg.sender.call{value: (balances[msg.sender] * 995 / 1000)}(\\\"\\\");\\n    if (ok == false) {\\n        revert CollectionCreator__TransactionFailed();\\n    }\\n    balances[msg.sender] = 0;\\n}\\n\\nfunction getBalance (address userAddress) public view returns(uint256) {\\n    return balances[userAddress];\\n}\\n\\nfunction getAddressOfDeployedContract(bytes memory byteCode, uint _salt) public view returns(address){\\n    bytes32 hash = keccak256(\\n    abi.encodePacked(bytes1(0xff),address(this),_salt,keccak256(byteCode))\\n    );\\n    return address(uint160(uint(hash)));\\n}\\n\\nfunction returnCode(address contractAddress) public view returns(bytes memory){\\n    return contractAddress.code;\\n}\\n\\n\\n\\n}\",\"keccak256\":\"0x3ce0aa1c4b5bf2177c42530e9e9eac505e6af877363412dea1578e1147571032\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050608051614be861005d60003960005050614be86000f3fe6080604052600436106200007a5760003560e01c806341855c3e116200005557806341855c3e14620000db5780636a627842146200011f5780636d6a63f9146200013f578063f8b2cb4f1462000183576200007a565b8063074acc73146200007f578063286be4fa14620000995780633ccfd60b14620000cf575b600080fd5b3480156200008c57600080fd5b5062000097620001c7565b005b620000b76004803603810190620000b1919062000955565b620001c9565b604051620000c6919062000a7f565b60405180910390f35b620000d96200033c565b005b348015620000e857600080fd5b5062000107600480360381019062000101919062000b50565b6200050a565b60405162000116919062000a7f565b60405180910390f35b6200013d600480360381019062000137919062000be7565b62000556565b005b3480156200014c57600080fd5b506200016b600480360381019062000165919062000be7565b62000711565b6040516200017a919062000ca2565b60405180910390f35b3480156200019057600080fd5b50620001af6004803603810190620001a9919062000be7565b6200074d565b604051620001be919062000cd7565b60405180910390f35b565b6000805434101562000207576040517f06455ef600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008686868633876040516200021d9062000796565b6200022e9695949392919062000d51565b604051809103906000f0801580156200024b573d6000803e3d6000fd5b5090506000819050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c33826040516200032692919062000dd3565b60405180910390a1809250505095945050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403620003b6576040517f06455ef600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166103e86103e3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000421919062000e2f565b6200042d919062000ea9565b6040516200043b9062000f16565b60006040518083038185875af1925050503d80600081146200047a576040519150601f19603f3d011682016040523d82523d6000602084013e6200047f565b606091505b505090506000151581151503620004c2576040517fb1fb6a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008060ff60f81b3084868051906020012060405160200162000531949392919062001022565b6040516020818303038152906040528051906020012090508060001c91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff1663c27df5c833346040518363ffffffff1660e01b81526004016200059592919062001078565b6020604051808303816000875af1158015620005b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005db9190620010bc565b905034600260008473ffffffffffffffffffffffffffffffffffffffff1663df727d3b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200062e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000654919062001105565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200069f919062001137565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f88360405162000705919062000cd7565b60405180910390a35050565b60608173ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c9050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b613a40806200117383390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200080d82620007c2565b810181811067ffffffffffffffff821117156200082f576200082e620007d3565b5b80604052505050565b600062000844620007a4565b905062000852828262000802565b919050565b600067ffffffffffffffff821115620008755762000874620007d3565b5b6200088082620007c2565b9050602081019050919050565b82818337600083830152505050565b6000620008b3620008ad8462000857565b62000838565b905082815260208101848484011115620008d257620008d1620007bd565b5b620008df8482856200088d565b509392505050565b600082601f830112620008ff57620008fe620007b8565b5b8135620009118482602086016200089c565b91505092915050565b6000819050919050565b6200092f816200091a565b81146200093b57600080fd5b50565b6000813590506200094f8162000924565b92915050565b600080600080600060a08688031215620009745762000973620007ae565b5b600086013567ffffffffffffffff811115620009955762000994620007b3565b5b620009a388828901620008e7565b955050602086013567ffffffffffffffff811115620009c757620009c6620007b3565b5b620009d588828901620008e7565b9450506040620009e8888289016200093e565b9350506060620009fb888289016200093e565b925050608086013567ffffffffffffffff81111562000a1f5762000a1e620007b3565b5b62000a2d88828901620008e7565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000a678262000a3a565b9050919050565b62000a798162000a5a565b82525050565b600060208201905062000a96600083018462000a6e565b92915050565b600067ffffffffffffffff82111562000aba5762000ab9620007d3565b5b62000ac582620007c2565b9050602081019050919050565b600062000ae962000ae38462000a9c565b62000838565b90508281526020810184848401111562000b085762000b07620007bd565b5b62000b158482856200088d565b509392505050565b600082601f83011262000b355762000b34620007b8565b5b813562000b4784826020860162000ad2565b91505092915050565b6000806040838503121562000b6a5762000b69620007ae565b5b600083013567ffffffffffffffff81111562000b8b5762000b8a620007b3565b5b62000b998582860162000b1d565b925050602062000bac858286016200093e565b9150509250929050565b62000bc18162000a5a565b811462000bcd57600080fd5b50565b60008135905062000be18162000bb6565b92915050565b60006020828403121562000c005762000bff620007ae565b5b600062000c108482850162000bd0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000c5557808201518184015260208101905062000c38565b60008484015250505050565b600062000c6e8262000c19565b62000c7a818562000c24565b935062000c8c81856020860162000c35565b62000c9781620007c2565b840191505092915050565b6000602082019050818103600083015262000cbe818462000c61565b905092915050565b62000cd1816200091a565b82525050565b600060208201905062000cee600083018462000cc6565b92915050565b600081519050919050565b600082825260208201905092915050565b600062000d1d8262000cf4565b62000d29818562000cff565b935062000d3b81856020860162000c35565b62000d4681620007c2565b840191505092915050565b600060c082019050818103600083015262000d6d818962000d10565b9050818103602083015262000d83818862000d10565b905062000d94604083018762000cc6565b62000da3606083018662000cc6565b62000db2608083018562000a6e565b81810360a083015262000dc6818462000d10565b9050979650505050505050565b600060408201905062000dea600083018562000a6e565b62000df9602083018462000a6e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000e3c826200091a565b915062000e49836200091a565b925082820262000e59816200091a565b9150828204841483151762000e735762000e7262000e00565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000eb6826200091a565b915062000ec3836200091a565b92508262000ed65762000ed562000e7a565b5b828204905092915050565b600081905092915050565b50565b600062000efe60008362000ee1565b915062000f0b8262000eec565b600082019050919050565b600062000f238262000eef565b9150819050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000f7862000f728262000f2d565b62000f59565b82525050565b60008160601b9050919050565b600062000f988262000f7e565b9050919050565b600062000fac8262000f8b565b9050919050565b62000fc862000fc28262000a5a565b62000f9f565b82525050565b6000819050919050565b62000fed62000fe7826200091a565b62000fce565b82525050565b6000819050919050565b6000819050919050565b6200101c620010168262000ff3565b62000ffd565b82525050565b600062001030828762000f63565b60018201915062001042828662000fb3565b60148201915062001054828562000fd8565b60208201915062001066828462001007565b60208201915081905095945050505050565b60006040820190506200108f600083018562000a6e565b6200109e602083018462000cc6565b9392505050565b600081519050620010b68162000924565b92915050565b600060208284031215620010d557620010d4620007ae565b5b6000620010e584828501620010a5565b91505092915050565b600081519050620010ff8162000bb6565b92915050565b6000602082840312156200111e576200111d620007ae565b5b60006200112e84828501620010ee565b91505092915050565b600062001144826200091a565b915062001151836200091a565b92508282019050808211156200116c576200116b62000e00565b5b9291505056fe61010060405260006007553480156200001757600080fd5b5060405162003a4038038062003a4083398181016040528101906200003d91906200032e565b8585816000908162000050919062000668565b50806001908162000062919062000668565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508260e081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060089081620000ee919062000668565b505050505050506200074f565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001648262000119565b810181811067ffffffffffffffff821117156200018657620001856200012a565b5b80604052505050565b60006200019b620000fb565b9050620001a9828262000159565b919050565b600067ffffffffffffffff821115620001cc57620001cb6200012a565b5b620001d78262000119565b9050602081019050919050565b60005b8381101562000204578082015181840152602081019050620001e7565b60008484015250505050565b6000620002276200022184620001ae565b6200018f565b90508281526020810184848401111562000246576200024562000114565b5b62000253848285620001e4565b509392505050565b600082601f8301126200027357620002726200010f565b5b81516200028584826020860162000210565b91505092915050565b6000819050919050565b620002a3816200028e565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f682620002c9565b9050919050565b6200030881620002e9565b81146200031457600080fd5b50565b6000815190506200032881620002fd565b92915050565b60008060008060008060c087890312156200034e576200034d62000105565b5b600087015167ffffffffffffffff8111156200036f576200036e6200010a565b5b6200037d89828a016200025b565b965050602087015167ffffffffffffffff811115620003a157620003a06200010a565b5b620003af89828a016200025b565b9550506040620003c289828a01620002b2565b9450506060620003d589828a01620002b2565b9350506080620003e889828a0162000317565b92505060a087015167ffffffffffffffff8111156200040c576200040b6200010a565b5b6200041a89828a016200025b565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047a57607f821691505b60208210810362000490576200048f62000432565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004bb565b620005068683620004bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000549620005436200053d846200028e565b6200051e565b6200028e565b9050919050565b6000819050919050565b620005658362000528565b6200057d620005748262000550565b848454620004c8565b825550505050565b600090565b6200059462000585565b620005a18184846200055a565b505050565b5b81811015620005c957620005bd6000826200058a565b600181019050620005a7565b5050565b601f8211156200061857620005e28162000496565b620005ed84620004ab565b81016020851015620005fd578190505b620006156200060c85620004ab565b830182620005a6565b50505b505050565b600082821c905092915050565b60006200063d600019846008026200061d565b1980831691505092915050565b60006200065883836200062a565b9150826002028217905092915050565b620006738262000427565b67ffffffffffffffff8111156200068f576200068e6200012a565b5b6200069b825462000461565b620006a8828285620005cd565b600060209050601f831160018114620006e05760008415620006cb578287015190505b620006d785826200064a565b86555062000747565b601f198416620006f08662000496565b60005b828110156200071a57848901518255600182019150602085019450602081019050620006f3565b868310156200073a578489015162000736601f8916826200062a565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160e05161329b620007a560003960008181610ba001528181610bc90152610e80015260008181610a520152610b45015260008181610ea80152610f6201526000610af2015261329b6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806395d89b41116100b8578063c41a360a1161007c578063c41a360a14610360578063c87b56dd14610390578063d5abeb01146103c0578063df727d3b146103de578063e985e9c5146103fc578063eb1f9f6e1461042c57610137565b806395d89b41146102bc578063a035b1fe146102da578063a22cb465146102f8578063b88d4fde14610314578063c27df5c81461033057610137565b806323b872dd116100ff57806323b872dd146101f45780633bb3a24d1461021057806342842e0e146102405780636352211e1461025c57806370a082311461028c57610137565b806301ffc9a71461013c57806306661abd1461016c57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d8575b600080fd5b6101566004803603810190610151919061202c565b610448565b6040516101639190612074565b60405180910390f35b61017461052a565b60405161018191906120a8565b60405180910390f35b610192610534565b60405161019f9190612153565b60405180910390f35b6101c260048036038101906101bd91906121a1565b6105c6565b6040516101cf919061220f565b60405180910390f35b6101f260048036038101906101ed9190612256565b61060c565b005b61020e60048036038101906102099190612296565b610723565b005b61022a600480360381019061022591906121a1565b610783565b6040516102379190612153565b60405180910390f35b61025a60048036038101906102559190612296565b61085f565b005b610276600480360381019061027191906121a1565b61087f565b604051610283919061220f565b60405180910390f35b6102a660048036038101906102a191906122e9565b610905565b6040516102b391906120a8565b60405180910390f35b6102c46109bc565b6040516102d19190612153565b60405180910390f35b6102e2610a4e565b6040516102ef91906120a8565b60405180910390f35b610312600480360381019061030d9190612342565b610a76565b005b61032e600480360381019061032991906124b7565b610a8c565b005b61034a60048036038101906103459190612256565b610aee565b60405161035791906120a8565b60405180910390f35b61037a600480360381019061037591906121a1565b610d2d565b604051610387919061220f565b60405180910390f35b6103aa60048036038101906103a591906121a1565b610d6a565b6040516103b79190612153565b60405180910390f35b6103c8610e7c565b6040516103d591906120a8565b60405180910390f35b6103e6610ea4565b6040516103f3919061220f565b60405180910390f35b6104166004803603810190610411919061253a565b610ecc565b6040516104239190612074565b60405180910390f35b6104466004803603810190610441919061261b565b610f60565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610523575061052282610ffd565b5b9050919050565b6000600754905090565b60606000805461054390612693565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90612693565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050905090565b60006105d182611067565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106178261087f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90612736565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106a66110b2565b73ffffffffffffffffffffffffffffffffffffffff1614806106d557506106d4816106cf6110b2565b610ecc565b5b610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b906127c8565b60405180910390fd5b61071e83836110ba565b505050565b61073461072e6110b2565b82611173565b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a9061285a565b60405180910390fd5b61077e838383611208565b505050565b606061078e82611501565b6107cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c4906128ec565b60405180910390fd5b600880546107da90612693565b80601f016020809104026020016040519081016040528092919081815260200182805461080690612693565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b50505050509050919050565b61087a83838360405180602001604052806000815250610a8c565b505050565b60008061088b83611542565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f390612958565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c906129ea565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109cb90612693565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790612693565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610a88610a816110b2565b838361157f565b5050565b610a9d610a976110b2565b83611173565b610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad39061285a565b60405180910390fd5b610ae8848484846116eb565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610cf5577f00000000000000000000000000000000000000000000000000000000000000008211610b9c576040517fe748f71800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000118015610bee57507f000000000000000000000000000000000000000000000000000000000000000060075410155b15610c25576040517f1014e77600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3183600754611747565b610cc760075460088054610c4490612693565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7090612693565b8015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b5050505050611765565b60076000815480929190610cda90612a39565b91905055506001600754610cee9190612a81565b9050610d27565b6040517f1b42611800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060610d7582611067565b6000600660008481526020019081526020016000208054610d9590612693565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc190612693565b8015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505090506000610e1f6117d2565b90506000815103610e34578192505050610e77565b600082511115610e69578082604051602001610e51929190612af1565b60405160208183030381529060405292505050610e77565b610e72846117e9565b925050505b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610fc8578060089081610fc29190612cc1565b50610ffa565b6040517f1b42611800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61107081611501565b6110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612958565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661112d8361087f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061117f8361087f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111c157506111c08185610ecc565b5b806111ff57508373ffffffffffffffffffffffffffffffffffffffff166111e7846105c6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112288261087f565b73ffffffffffffffffffffffffffffffffffffffff161461127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127590612e05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e490612e97565b60405180910390fd5b6112fa8383836001611851565b8273ffffffffffffffffffffffffffffffffffffffff1661131a8261087f565b73ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790612e05565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114fc8383836001611977565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661152383611542565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e490612f03565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116de9190612074565b60405180910390a3505050565b6116f6848484611208565b6117028484848461197d565b611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890612f95565b60405180910390fd5b50505050565b611761828260405180602001604052806000815250611b04565b5050565b61176e82611501565b6117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490613027565b60405180910390fd5b806006600084815260200190815260200160002090816117cd9190612cc1565b505050565b606060405180602001604052806000815250905090565b60606117f482611067565b60006117fe6117d2565b9050600081511161181e5760405180602001604052806000815250611849565b8061182884611b5f565b604051602001611839929190612af1565b6040516020818303038152906040525b915050919050565b600181111561197157600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146118e55780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118dd9190612a81565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146119705780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119689190613047565b925050819055505b5b50505050565b50505050565b600061199e8473ffffffffffffffffffffffffffffffffffffffff16611c2d565b15611af7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026119c76110b2565b8786866040518563ffffffff1660e01b81526004016119e994939291906130d0565b6020604051808303816000875af1925050508015611a2557506040513d601f19601f82011682018060405250810190611a229190613131565b60015b611aa7573d8060008114611a55576040519150601f19603f3d011682016040523d82523d6000602084013e611a5a565b606091505b506000815103611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9690612f95565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611afc565b600190505b949350505050565b611b0e8383611c50565b611b1b600084848461197d565b611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5190612f95565b60405180910390fd5b505050565b606060006001611b6e84611e6d565b01905060008167ffffffffffffffff811115611b8d57611b8c61238c565b5b6040519080825280601f01601f191660200182016040528015611bbf5781602001600182028036833780820191505090505b509050600082602001820190505b600115611c22578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c1657611c1561315e565b5b04945060008503611bcd575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb6906131d9565b60405180910390fd5b611cc881611501565b15611d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cff90613245565b60405180910390fd5b611d16600083836001611851565b611d1f81611501565b15611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5690613245565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e69600083836001611977565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec157611ec061315e565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f08576d04ee2d6d415b85acef81000000008381611efe57611efd61315e565b5b0492506020810190505b662386f26fc100008310611f3757662386f26fc100008381611f2d57611f2c61315e565b5b0492506010810190505b6305f5e1008310611f60576305f5e1008381611f5657611f5561315e565b5b0492506008810190505b6127108310611f85576127108381611f7b57611f7a61315e565b5b0492506004810190505b60648310611fa85760648381611f9e57611f9d61315e565b5b0492506002810190505b600a8310611fb7576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61200981611fd4565b811461201457600080fd5b50565b60008135905061202681612000565b92915050565b60006020828403121561204257612041611fca565b5b600061205084828501612017565b91505092915050565b60008115159050919050565b61206e81612059565b82525050565b60006020820190506120896000830184612065565b92915050565b6000819050919050565b6120a28161208f565b82525050565b60006020820190506120bd6000830184612099565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120fd5780820151818401526020810190506120e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612125826120c3565b61212f81856120ce565b935061213f8185602086016120df565b61214881612109565b840191505092915050565b6000602082019050818103600083015261216d818461211a565b905092915050565b61217e8161208f565b811461218957600080fd5b50565b60008135905061219b81612175565b92915050565b6000602082840312156121b7576121b6611fca565b5b60006121c58482850161218c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121f9826121ce565b9050919050565b612209816121ee565b82525050565b60006020820190506122246000830184612200565b92915050565b612233816121ee565b811461223e57600080fd5b50565b6000813590506122508161222a565b92915050565b6000806040838503121561226d5761226c611fca565b5b600061227b85828601612241565b925050602061228c8582860161218c565b9150509250929050565b6000806000606084860312156122af576122ae611fca565b5b60006122bd86828701612241565b93505060206122ce86828701612241565b92505060406122df8682870161218c565b9150509250925092565b6000602082840312156122ff576122fe611fca565b5b600061230d84828501612241565b91505092915050565b61231f81612059565b811461232a57600080fd5b50565b60008135905061233c81612316565b92915050565b6000806040838503121561235957612358611fca565b5b600061236785828601612241565b92505060206123788582860161232d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123c482612109565b810181811067ffffffffffffffff821117156123e3576123e261238c565b5b80604052505050565b60006123f6611fc0565b905061240282826123bb565b919050565b600067ffffffffffffffff8211156124225761242161238c565b5b61242b82612109565b9050602081019050919050565b82818337600083830152505050565b600061245a61245584612407565b6123ec565b90508281526020810184848401111561247657612475612387565b5b612481848285612438565b509392505050565b600082601f83011261249e5761249d612382565b5b81356124ae848260208601612447565b91505092915050565b600080600080608085870312156124d1576124d0611fca565b5b60006124df87828801612241565b94505060206124f087828801612241565b93505060406125018782880161218c565b925050606085013567ffffffffffffffff81111561252257612521611fcf565b5b61252e87828801612489565b91505092959194509250565b6000806040838503121561255157612550611fca565b5b600061255f85828601612241565b925050602061257085828601612241565b9150509250929050565b600067ffffffffffffffff8211156125955761259461238c565b5b61259e82612109565b9050602081019050919050565b60006125be6125b98461257a565b6123ec565b9050828152602081018484840111156125da576125d9612387565b5b6125e5848285612438565b509392505050565b600082601f83011261260257612601612382565b5b81356126128482602086016125ab565b91505092915050565b60006020828403121561263157612630611fca565b5b600082013567ffffffffffffffff81111561264f5761264e611fcf565b5b61265b848285016125ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126ab57607f821691505b6020821081036126be576126bd612664565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006127206021836120ce565b915061272b826126c4565b604082019050919050565b6000602082019050818103600083015261274f81612713565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006127b2603d836120ce565b91506127bd82612756565b604082019050919050565b600060208201905081810360008301526127e1816127a5565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612844602d836120ce565b915061284f826127e8565b604082019050919050565b6000602082019050818103600083015261287381612837565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006128d6602f836120ce565b91506128e18261287a565b604082019050919050565b60006020820190508181036000830152612905816128c9565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129426018836120ce565b915061294d8261290c565b602082019050919050565b6000602082019050818103600083015261297181612935565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129d46029836120ce565b91506129df82612978565b604082019050919050565b60006020820190508181036000830152612a03816129c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a448261208f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a7657612a75612a0a565b5b600182019050919050565b6000612a8c8261208f565b9150612a978361208f565b9250828203905081811115612aaf57612aae612a0a565b5b92915050565b600081905092915050565b6000612acb826120c3565b612ad58185612ab5565b9350612ae58185602086016120df565b80840191505092915050565b6000612afd8285612ac0565b9150612b098284612ac0565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b777fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b3a565b612b818683612b3a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612bbe612bb9612bb48461208f565b612b99565b61208f565b9050919050565b6000819050919050565b612bd883612ba3565b612bec612be482612bc5565b848454612b47565b825550505050565b600090565b612c01612bf4565b612c0c818484612bcf565b505050565b5b81811015612c3057612c25600082612bf9565b600181019050612c12565b5050565b601f821115612c7557612c4681612b15565b612c4f84612b2a565b81016020851015612c5e578190505b612c72612c6a85612b2a565b830182612c11565b50505b505050565b600082821c905092915050565b6000612c9860001984600802612c7a565b1980831691505092915050565b6000612cb18383612c87565b9150826002028217905092915050565b612cca826120c3565b67ffffffffffffffff811115612ce357612ce261238c565b5b612ced8254612693565b612cf8828285612c34565b600060209050601f831160018114612d2b5760008415612d19578287015190505b612d238582612ca5565b865550612d8b565b601f198416612d3986612b15565b60005b82811015612d6157848901518255600182019150602085019450602081019050612d3c565b86831015612d7e5784890151612d7a601f891682612c87565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612def6025836120ce565b9150612dfa82612d93565b604082019050919050565b60006020820190508181036000830152612e1e81612de2565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612e816024836120ce565b9150612e8c82612e25565b604082019050919050565b60006020820190508181036000830152612eb081612e74565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612eed6019836120ce565b9150612ef882612eb7565b602082019050919050565b60006020820190508181036000830152612f1c81612ee0565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612f7f6032836120ce565b9150612f8a82612f23565b604082019050919050565b60006020820190508181036000830152612fae81612f72565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613011602e836120ce565b915061301c82612fb5565b604082019050919050565b6000602082019050818103600083015261304081613004565b9050919050565b60006130528261208f565b915061305d8361208f565b925082820190508082111561307557613074612a0a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006130a28261307b565b6130ac8185613086565b93506130bc8185602086016120df565b6130c581612109565b840191505092915050565b60006080820190506130e56000830187612200565b6130f26020830186612200565b6130ff6040830185612099565b81810360608301526131118184613097565b905095945050505050565b60008151905061312b81612000565b92915050565b60006020828403121561314757613146611fca565b5b60006131558482850161311c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006131c36020836120ce565b91506131ce8261318d565b602082019050919050565b600060208201905081810360008301526131f2816131b6565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061322f601c836120ce565b915061323a826131f9565b602082019050919050565b6000602082019050818103600083015261325e81613222565b905091905056fea26469706673582212206507e366a0cba24df9b2429f9292dfecec24d7957c39cbcd4f7a43a212b7683e64736f6c63430008110033a2646970667358221220a341006d64e1d4e4522d5f9e1487175c94570ba53994148a4fce71405808695e64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106200007a5760003560e01c806341855c3e116200005557806341855c3e14620000db5780636a627842146200011f5780636d6a63f9146200013f578063f8b2cb4f1462000183576200007a565b8063074acc73146200007f578063286be4fa14620000995780633ccfd60b14620000cf575b600080fd5b3480156200008c57600080fd5b5062000097620001c7565b005b620000b76004803603810190620000b1919062000955565b620001c9565b604051620000c6919062000a7f565b60405180910390f35b620000d96200033c565b005b348015620000e857600080fd5b5062000107600480360381019062000101919062000b50565b6200050a565b60405162000116919062000a7f565b60405180910390f35b6200013d600480360381019062000137919062000be7565b62000556565b005b3480156200014c57600080fd5b506200016b600480360381019062000165919062000be7565b62000711565b6040516200017a919062000ca2565b60405180910390f35b3480156200019057600080fd5b50620001af6004803603810190620001a9919062000be7565b6200074d565b604051620001be919062000cd7565b60405180910390f35b565b6000805434101562000207576040517f06455ef600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008686868633876040516200021d9062000796565b6200022e9695949392919062000d51565b604051809103906000f0801580156200024b573d6000803e3d6000fd5b5090506000819050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f5b84d9550adb7000df7bee717735ecd3af48ea3f66c6886d52e8227548fb228c33826040516200032692919062000dd3565b60405180910390a1809250505095945050505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205403620003b6576040517f06455ef600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60003373ffffffffffffffffffffffffffffffffffffffff166103e86103e3600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205462000421919062000e2f565b6200042d919062000ea9565b6040516200043b9062000f16565b60006040518083038185875af1925050503d80600081146200047a576040519150601f19603f3d011682016040523d82523d6000602084013e6200047f565b606091505b505090506000151581151503620004c2576040517fb1fb6a8800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050565b60008060ff60f81b3084868051906020012060405160200162000531949392919062001022565b6040516020818303038152906040528051906020012090508060001c91505092915050565b60008173ffffffffffffffffffffffffffffffffffffffff1663c27df5c833346040518363ffffffff1660e01b81526004016200059592919062001078565b6020604051808303816000875af1158015620005b5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620005db9190620010bc565b905034600260008473ffffffffffffffffffffffffffffffffffffffff1663df727d3b6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200062e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000654919062001105565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546200069f919062001137565b925050819055508173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fab8530f87dc9b59234c4623bf917212bb2536d647574c8e7e5da92c2ede0c9f88360405162000705919062000cd7565b60405180910390a35050565b60608173ffffffffffffffffffffffffffffffffffffffff16803b806020016040519081016040528181526000908060200190933c9050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b613a40806200117383390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200080d82620007c2565b810181811067ffffffffffffffff821117156200082f576200082e620007d3565b5b80604052505050565b600062000844620007a4565b905062000852828262000802565b919050565b600067ffffffffffffffff821115620008755762000874620007d3565b5b6200088082620007c2565b9050602081019050919050565b82818337600083830152505050565b6000620008b3620008ad8462000857565b62000838565b905082815260208101848484011115620008d257620008d1620007bd565b5b620008df8482856200088d565b509392505050565b600082601f830112620008ff57620008fe620007b8565b5b8135620009118482602086016200089c565b91505092915050565b6000819050919050565b6200092f816200091a565b81146200093b57600080fd5b50565b6000813590506200094f8162000924565b92915050565b600080600080600060a08688031215620009745762000973620007ae565b5b600086013567ffffffffffffffff811115620009955762000994620007b3565b5b620009a388828901620008e7565b955050602086013567ffffffffffffffff811115620009c757620009c6620007b3565b5b620009d588828901620008e7565b9450506040620009e8888289016200093e565b9350506060620009fb888289016200093e565b925050608086013567ffffffffffffffff81111562000a1f5762000a1e620007b3565b5b62000a2d88828901620008e7565b9150509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000a678262000a3a565b9050919050565b62000a798162000a5a565b82525050565b600060208201905062000a96600083018462000a6e565b92915050565b600067ffffffffffffffff82111562000aba5762000ab9620007d3565b5b62000ac582620007c2565b9050602081019050919050565b600062000ae962000ae38462000a9c565b62000838565b90508281526020810184848401111562000b085762000b07620007bd565b5b62000b158482856200088d565b509392505050565b600082601f83011262000b355762000b34620007b8565b5b813562000b4784826020860162000ad2565b91505092915050565b6000806040838503121562000b6a5762000b69620007ae565b5b600083013567ffffffffffffffff81111562000b8b5762000b8a620007b3565b5b62000b998582860162000b1d565b925050602062000bac858286016200093e565b9150509250929050565b62000bc18162000a5a565b811462000bcd57600080fd5b50565b60008135905062000be18162000bb6565b92915050565b60006020828403121562000c005762000bff620007ae565b5b600062000c108482850162000bd0565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000c5557808201518184015260208101905062000c38565b60008484015250505050565b600062000c6e8262000c19565b62000c7a818562000c24565b935062000c8c81856020860162000c35565b62000c9781620007c2565b840191505092915050565b6000602082019050818103600083015262000cbe818462000c61565b905092915050565b62000cd1816200091a565b82525050565b600060208201905062000cee600083018462000cc6565b92915050565b600081519050919050565b600082825260208201905092915050565b600062000d1d8262000cf4565b62000d29818562000cff565b935062000d3b81856020860162000c35565b62000d4681620007c2565b840191505092915050565b600060c082019050818103600083015262000d6d818962000d10565b9050818103602083015262000d83818862000d10565b905062000d94604083018762000cc6565b62000da3606083018662000cc6565b62000db2608083018562000a6e565b81810360a083015262000dc6818462000d10565b9050979650505050505050565b600060408201905062000dea600083018562000a6e565b62000df9602083018462000a6e565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600062000e3c826200091a565b915062000e49836200091a565b925082820262000e59816200091a565b9150828204841483151762000e735762000e7262000e00565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600062000eb6826200091a565b915062000ec3836200091a565b92508262000ed65762000ed562000e7a565b5b828204905092915050565b600081905092915050565b50565b600062000efe60008362000ee1565b915062000f0b8262000eec565b600082019050919050565b600062000f238262000eef565b9150819050919050565b60007fff0000000000000000000000000000000000000000000000000000000000000082169050919050565b6000819050919050565b62000f7862000f728262000f2d565b62000f59565b82525050565b60008160601b9050919050565b600062000f988262000f7e565b9050919050565b600062000fac8262000f8b565b9050919050565b62000fc862000fc28262000a5a565b62000f9f565b82525050565b6000819050919050565b62000fed62000fe7826200091a565b62000fce565b82525050565b6000819050919050565b6000819050919050565b6200101c620010168262000ff3565b62000ffd565b82525050565b600062001030828762000f63565b60018201915062001042828662000fb3565b60148201915062001054828562000fd8565b60208201915062001066828462001007565b60208201915081905095945050505050565b60006040820190506200108f600083018562000a6e565b6200109e602083018462000cc6565b9392505050565b600081519050620010b68162000924565b92915050565b600060208284031215620010d557620010d4620007ae565b5b6000620010e584828501620010a5565b91505092915050565b600081519050620010ff8162000bb6565b92915050565b6000602082840312156200111e576200111d620007ae565b5b60006200112e84828501620010ee565b91505092915050565b600062001144826200091a565b915062001151836200091a565b92508282019050808211156200116c576200116b62000e00565b5b9291505056fe61010060405260006007553480156200001757600080fd5b5060405162003a4038038062003a4083398181016040528101906200003d91906200032e565b8585816000908162000050919062000668565b50806001908162000062919062000668565b5050503373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508360c081815250508260e081815250508173ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff16815250508060089081620000ee919062000668565b505050505050506200074f565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001648262000119565b810181811067ffffffffffffffff821117156200018657620001856200012a565b5b80604052505050565b60006200019b620000fb565b9050620001a9828262000159565b919050565b600067ffffffffffffffff821115620001cc57620001cb6200012a565b5b620001d78262000119565b9050602081019050919050565b60005b8381101562000204578082015181840152602081019050620001e7565b60008484015250505050565b6000620002276200022184620001ae565b6200018f565b90508281526020810184848401111562000246576200024562000114565b5b62000253848285620001e4565b509392505050565b600082601f8301126200027357620002726200010f565b5b81516200028584826020860162000210565b91505092915050565b6000819050919050565b620002a3816200028e565b8114620002af57600080fd5b50565b600081519050620002c38162000298565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002f682620002c9565b9050919050565b6200030881620002e9565b81146200031457600080fd5b50565b6000815190506200032881620002fd565b92915050565b60008060008060008060c087890312156200034e576200034d62000105565b5b600087015167ffffffffffffffff8111156200036f576200036e6200010a565b5b6200037d89828a016200025b565b965050602087015167ffffffffffffffff811115620003a157620003a06200010a565b5b620003af89828a016200025b565b9550506040620003c289828a01620002b2565b9450506060620003d589828a01620002b2565b9350506080620003e889828a0162000317565b92505060a087015167ffffffffffffffff8111156200040c576200040b6200010a565b5b6200041a89828a016200025b565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047a57607f821691505b60208210810362000490576200048f62000432565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004fa7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004bb565b620005068683620004bb565b95508019841693508086168417925050509392505050565b6000819050919050565b600062000549620005436200053d846200028e565b6200051e565b6200028e565b9050919050565b6000819050919050565b620005658362000528565b6200057d620005748262000550565b848454620004c8565b825550505050565b600090565b6200059462000585565b620005a18184846200055a565b505050565b5b81811015620005c957620005bd6000826200058a565b600181019050620005a7565b5050565b601f8211156200061857620005e28162000496565b620005ed84620004ab565b81016020851015620005fd578190505b620006156200060c85620004ab565b830182620005a6565b50505b505050565b600082821c905092915050565b60006200063d600019846008026200061d565b1980831691505092915050565b60006200065883836200062a565b9150826002028217905092915050565b620006738262000427565b67ffffffffffffffff8111156200068f576200068e6200012a565b5b6200069b825462000461565b620006a8828285620005cd565b600060209050601f831160018114620006e05760008415620006cb578287015190505b620006d785826200064a565b86555062000747565b601f198416620006f08662000496565b60005b828110156200071a57848901518255600182019150602085019450602081019050620006f3565b868310156200073a578489015162000736601f8916826200062a565b8355505b6001600288020188555050505b505050505050565b60805160a05160c05160e05161329b620007a560003960008181610ba001528181610bc90152610e80015260008181610a520152610b45015260008181610ea80152610f6201526000610af2015261329b6000f3fe608060405234801561001057600080fd5b50600436106101375760003560e01c806395d89b41116100b8578063c41a360a1161007c578063c41a360a14610360578063c87b56dd14610390578063d5abeb01146103c0578063df727d3b146103de578063e985e9c5146103fc578063eb1f9f6e1461042c57610137565b806395d89b41146102bc578063a035b1fe146102da578063a22cb465146102f8578063b88d4fde14610314578063c27df5c81461033057610137565b806323b872dd116100ff57806323b872dd146101f45780633bb3a24d1461021057806342842e0e146102405780636352211e1461025c57806370a082311461028c57610137565b806301ffc9a71461013c57806306661abd1461016c57806306fdde031461018a578063081812fc146101a8578063095ea7b3146101d8575b600080fd5b6101566004803603810190610151919061202c565b610448565b6040516101639190612074565b60405180910390f35b61017461052a565b60405161018191906120a8565b60405180910390f35b610192610534565b60405161019f9190612153565b60405180910390f35b6101c260048036038101906101bd91906121a1565b6105c6565b6040516101cf919061220f565b60405180910390f35b6101f260048036038101906101ed9190612256565b61060c565b005b61020e60048036038101906102099190612296565b610723565b005b61022a600480360381019061022591906121a1565b610783565b6040516102379190612153565b60405180910390f35b61025a60048036038101906102559190612296565b61085f565b005b610276600480360381019061027191906121a1565b61087f565b604051610283919061220f565b60405180910390f35b6102a660048036038101906102a191906122e9565b610905565b6040516102b391906120a8565b60405180910390f35b6102c46109bc565b6040516102d19190612153565b60405180910390f35b6102e2610a4e565b6040516102ef91906120a8565b60405180910390f35b610312600480360381019061030d9190612342565b610a76565b005b61032e600480360381019061032991906124b7565b610a8c565b005b61034a60048036038101906103459190612256565b610aee565b60405161035791906120a8565b60405180910390f35b61037a600480360381019061037591906121a1565b610d2d565b604051610387919061220f565b60405180910390f35b6103aa60048036038101906103a591906121a1565b610d6a565b6040516103b79190612153565b60405180910390f35b6103c8610e7c565b6040516103d591906120a8565b60405180910390f35b6103e6610ea4565b6040516103f3919061220f565b60405180910390f35b6104166004803603810190610411919061253a565b610ecc565b6040516104239190612074565b60405180910390f35b6104466004803603810190610441919061261b565b610f60565b005b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061051357507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80610523575061052282610ffd565b5b9050919050565b6000600754905090565b60606000805461054390612693565b80601f016020809104026020016040519081016040528092919081815260200182805461056f90612693565b80156105bc5780601f10610591576101008083540402835291602001916105bc565b820191906000526020600020905b81548152906001019060200180831161059f57829003601f168201915b5050505050905090565b60006105d182611067565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106178261087f565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610687576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067e90612736565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106a66110b2565b73ffffffffffffffffffffffffffffffffffffffff1614806106d557506106d4816106cf6110b2565b610ecc565b5b610714576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070b906127c8565b60405180910390fd5b61071e83836110ba565b505050565b61073461072e6110b2565b82611173565b610773576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076a9061285a565b60405180910390fd5b61077e838383611208565b505050565b606061078e82611501565b6107cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107c4906128ec565b60405180910390fd5b600880546107da90612693565b80601f016020809104026020016040519081016040528092919081815260200182805461080690612693565b80156108535780601f1061082857610100808354040283529160200191610853565b820191906000526020600020905b81548152906001019060200180831161083657829003601f168201915b50505050509050919050565b61087a83838360405180602001604052806000815250610a8c565b505050565b60008061088b83611542565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108f390612958565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610975576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096c906129ea565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109cb90612693565b80601f01602080910402602001604051908101604052809291908181526020018280546109f790612693565b8015610a445780601f10610a1957610100808354040283529160200191610a44565b820191906000526020600020905b815481529060010190602001808311610a2757829003601f168201915b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b610a88610a816110b2565b838361157f565b5050565b610a9d610a976110b2565b83611173565b610adc576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ad39061285a565b60405180910390fd5b610ae8848484846116eb565b50505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610cf5577f00000000000000000000000000000000000000000000000000000000000000008211610b9c576040517fe748f71800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f0000000000000000000000000000000000000000000000000000000000000000118015610bee57507f000000000000000000000000000000000000000000000000000000000000000060075410155b15610c25576040517f1014e77600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610c3183600754611747565b610cc760075460088054610c4490612693565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7090612693565b8015610cbd5780601f10610c9257610100808354040283529160200191610cbd565b820191906000526020600020905b815481529060010190602001808311610ca057829003601f168201915b5050505050611765565b60076000815480929190610cda90612a39565b91905055506001600754610cee9190612a81565b9050610d27565b6040517f1b42611800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b92915050565b60006009600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6060610d7582611067565b6000600660008481526020019081526020016000208054610d9590612693565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc190612693565b8015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b505050505090506000610e1f6117d2565b90506000815103610e34578192505050610e77565b600082511115610e69578082604051602001610e51929190612af1565b60405160208183030381529060405292505050610e77565b610e72846117e9565b925050505b919050565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603610fc8578060089081610fc29190612cc1565b50610ffa565b6040517f1b42611800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b61107081611501565b6110af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110a690612958565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661112d8361087f565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b60008061117f8361087f565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806111c157506111c08185610ecc565b5b806111ff57508373ffffffffffffffffffffffffffffffffffffffff166111e7846105c6565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112288261087f565b73ffffffffffffffffffffffffffffffffffffffff161461127e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161127590612e05565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036112ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112e490612e97565b60405180910390fd5b6112fa8383836001611851565b8273ffffffffffffffffffffffffffffffffffffffff1661131a8261087f565b73ffffffffffffffffffffffffffffffffffffffff1614611370576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136790612e05565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46114fc8383836001611977565b505050565b60008073ffffffffffffffffffffffffffffffffffffffff1661152383611542565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036115ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115e490612f03565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31836040516116de9190612074565b60405180910390a3505050565b6116f6848484611208565b6117028484848461197d565b611741576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173890612f95565b60405180910390fd5b50505050565b611761828260405180602001604052806000815250611b04565b5050565b61176e82611501565b6117ad576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117a490613027565b60405180910390fd5b806006600084815260200190815260200160002090816117cd9190612cc1565b505050565b606060405180602001604052806000815250905090565b60606117f482611067565b60006117fe6117d2565b9050600081511161181e5760405180602001604052806000815250611849565b8061182884611b5f565b604051602001611839929190612af1565b6040516020818303038152906040525b915050919050565b600181111561197157600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16146118e55780600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546118dd9190612a81565b925050819055505b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16146119705780600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119689190613047565b925050819055505b5b50505050565b50505050565b600061199e8473ffffffffffffffffffffffffffffffffffffffff16611c2d565b15611af7578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026119c76110b2565b8786866040518563ffffffff1660e01b81526004016119e994939291906130d0565b6020604051808303816000875af1925050508015611a2557506040513d601f19601f82011682018060405250810190611a229190613131565b60015b611aa7573d8060008114611a55576040519150601f19603f3d011682016040523d82523d6000602084013e611a5a565b606091505b506000815103611a9f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a9690612f95565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611afc565b600190505b949350505050565b611b0e8383611c50565b611b1b600084848461197d565b611b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b5190612f95565b60405180910390fd5b505050565b606060006001611b6e84611e6d565b01905060008167ffffffffffffffff811115611b8d57611b8c61238c565b5b6040519080825280601f01601f191660200182016040528015611bbf5781602001600182028036833780820191505090505b509050600082602001820190505b600115611c22578080600190039150507f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8581611c1657611c1561315e565b5b04945060008503611bcd575b819350505050919050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611cbf576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb6906131d9565b60405180910390fd5b611cc881611501565b15611d08576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cff90613245565b60405180910390fd5b611d16600083836001611851565b611d1f81611501565b15611d5f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d5690613245565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611e69600083836001611977565b5050565b600080600090507a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611ecb577a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008381611ec157611ec061315e565b5b0492506040810190505b6d04ee2d6d415b85acef81000000008310611f08576d04ee2d6d415b85acef81000000008381611efe57611efd61315e565b5b0492506020810190505b662386f26fc100008310611f3757662386f26fc100008381611f2d57611f2c61315e565b5b0492506010810190505b6305f5e1008310611f60576305f5e1008381611f5657611f5561315e565b5b0492506008810190505b6127108310611f85576127108381611f7b57611f7a61315e565b5b0492506004810190505b60648310611fa85760648381611f9e57611f9d61315e565b5b0492506002810190505b600a8310611fb7576001810190505b80915050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61200981611fd4565b811461201457600080fd5b50565b60008135905061202681612000565b92915050565b60006020828403121561204257612041611fca565b5b600061205084828501612017565b91505092915050565b60008115159050919050565b61206e81612059565b82525050565b60006020820190506120896000830184612065565b92915050565b6000819050919050565b6120a28161208f565b82525050565b60006020820190506120bd6000830184612099565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156120fd5780820151818401526020810190506120e2565b60008484015250505050565b6000601f19601f8301169050919050565b6000612125826120c3565b61212f81856120ce565b935061213f8185602086016120df565b61214881612109565b840191505092915050565b6000602082019050818103600083015261216d818461211a565b905092915050565b61217e8161208f565b811461218957600080fd5b50565b60008135905061219b81612175565b92915050565b6000602082840312156121b7576121b6611fca565b5b60006121c58482850161218c565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121f9826121ce565b9050919050565b612209816121ee565b82525050565b60006020820190506122246000830184612200565b92915050565b612233816121ee565b811461223e57600080fd5b50565b6000813590506122508161222a565b92915050565b6000806040838503121561226d5761226c611fca565b5b600061227b85828601612241565b925050602061228c8582860161218c565b9150509250929050565b6000806000606084860312156122af576122ae611fca565b5b60006122bd86828701612241565b93505060206122ce86828701612241565b92505060406122df8682870161218c565b9150509250925092565b6000602082840312156122ff576122fe611fca565b5b600061230d84828501612241565b91505092915050565b61231f81612059565b811461232a57600080fd5b50565b60008135905061233c81612316565b92915050565b6000806040838503121561235957612358611fca565b5b600061236785828601612241565b92505060206123788582860161232d565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6123c482612109565b810181811067ffffffffffffffff821117156123e3576123e261238c565b5b80604052505050565b60006123f6611fc0565b905061240282826123bb565b919050565b600067ffffffffffffffff8211156124225761242161238c565b5b61242b82612109565b9050602081019050919050565b82818337600083830152505050565b600061245a61245584612407565b6123ec565b90508281526020810184848401111561247657612475612387565b5b612481848285612438565b509392505050565b600082601f83011261249e5761249d612382565b5b81356124ae848260208601612447565b91505092915050565b600080600080608085870312156124d1576124d0611fca565b5b60006124df87828801612241565b94505060206124f087828801612241565b93505060406125018782880161218c565b925050606085013567ffffffffffffffff81111561252257612521611fcf565b5b61252e87828801612489565b91505092959194509250565b6000806040838503121561255157612550611fca565b5b600061255f85828601612241565b925050602061257085828601612241565b9150509250929050565b600067ffffffffffffffff8211156125955761259461238c565b5b61259e82612109565b9050602081019050919050565b60006125be6125b98461257a565b6123ec565b9050828152602081018484840111156125da576125d9612387565b5b6125e5848285612438565b509392505050565b600082601f83011261260257612601612382565b5b81356126128482602086016125ab565b91505092915050565b60006020828403121561263157612630611fca565b5b600082013567ffffffffffffffff81111561264f5761264e611fcf565b5b61265b848285016125ed565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806126ab57607f821691505b6020821081036126be576126bd612664565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006127206021836120ce565b915061272b826126c4565b604082019050919050565b6000602082019050818103600083015261274f81612713565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b60006127b2603d836120ce565b91506127bd82612756565b604082019050919050565b600060208201905081810360008301526127e1816127a5565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612844602d836120ce565b915061284f826127e8565b604082019050919050565b6000602082019050818103600083015261287381612837565b9050919050565b7f4552433732314d657461646174613a2055524920717565727920666f72206e6f60008201527f6e6578697374656e7420746f6b656e0000000000000000000000000000000000602082015250565b60006128d6602f836120ce565b91506128e18261287a565b604082019050919050565b60006020820190508181036000830152612905816128c9565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b60006129426018836120ce565b915061294d8261290c565b602082019050919050565b6000602082019050818103600083015261297181612935565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b60006129d46029836120ce565b91506129df82612978565b604082019050919050565b60006020820190508181036000830152612a03816129c7565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612a448261208f565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612a7657612a75612a0a565b5b600182019050919050565b6000612a8c8261208f565b9150612a978361208f565b9250828203905081811115612aaf57612aae612a0a565b5b92915050565b600081905092915050565b6000612acb826120c3565b612ad58185612ab5565b9350612ae58185602086016120df565b80840191505092915050565b6000612afd8285612ac0565b9150612b098284612ac0565b91508190509392505050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612b777fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612b3a565b612b818683612b3a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612bbe612bb9612bb48461208f565b612b99565b61208f565b9050919050565b6000819050919050565b612bd883612ba3565b612bec612be482612bc5565b848454612b47565b825550505050565b600090565b612c01612bf4565b612c0c818484612bcf565b505050565b5b81811015612c3057612c25600082612bf9565b600181019050612c12565b5050565b601f821115612c7557612c4681612b15565b612c4f84612b2a565b81016020851015612c5e578190505b612c72612c6a85612b2a565b830182612c11565b50505b505050565b600082821c905092915050565b6000612c9860001984600802612c7a565b1980831691505092915050565b6000612cb18383612c87565b9150826002028217905092915050565b612cca826120c3565b67ffffffffffffffff811115612ce357612ce261238c565b5b612ced8254612693565b612cf8828285612c34565b600060209050601f831160018114612d2b5760008415612d19578287015190505b612d238582612ca5565b865550612d8b565b601f198416612d3986612b15565b60005b82811015612d6157848901518255600182019150602085019450602081019050612d3c565b86831015612d7e5784890151612d7a601f891682612c87565b8355505b6001600288020188555050505b505050505050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612def6025836120ce565b9150612dfa82612d93565b604082019050919050565b60006020820190508181036000830152612e1e81612de2565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612e816024836120ce565b9150612e8c82612e25565b604082019050919050565b60006020820190508181036000830152612eb081612e74565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612eed6019836120ce565b9150612ef882612eb7565b602082019050919050565b60006020820190508181036000830152612f1c81612ee0565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b6000612f7f6032836120ce565b9150612f8a82612f23565b604082019050919050565b60006020820190508181036000830152612fae81612f72565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b6000613011602e836120ce565b915061301c82612fb5565b604082019050919050565b6000602082019050818103600083015261304081613004565b9050919050565b60006130528261208f565b915061305d8361208f565b925082820190508082111561307557613074612a0a565b5b92915050565b600081519050919050565b600082825260208201905092915050565b60006130a28261307b565b6130ac8185613086565b93506130bc8185602086016120df565b6130c581612109565b840191505092915050565b60006080820190506130e56000830187612200565b6130f26020830186612200565b6130ff6040830185612099565b81810360608301526131118184613097565b905095945050505050565b60008151905061312b81612000565b92915050565b60006020828403121561314757613146611fca565b5b60006131558482850161311c565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b60006131c36020836120ce565b91506131ce8261318d565b602082019050919050565b600060208201905081810360008301526131f2816131b6565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b600061322f601c836120ce565b915061323a826131f9565b602082019050919050565b6000602082019050818103600083015261325e81613222565b905091905056fea26469706673582212206507e366a0cba24df9b2429f9292dfecec24d7957c39cbcd4f7a43a212b7683e64736f6c63430008110033a2646970667358221220a341006d64e1d4e4522d5f9e1487175c94570ba53994148a4fce71405808695e64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4273,
        "contract": "contracts/ERC721Creator.sol:ERC721Creator",
        "label": "s_createFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 4287,
        "contract": "contracts/ERC721Creator.sol:ERC721Creator",
        "label": "ownerToCollection",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      },
      {
        "astId": 4291,
        "contract": "contracts/ERC721Creator.sol:ERC721Creator",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}