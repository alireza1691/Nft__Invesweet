{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC20Creator__CreateExceedsFee",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Creator__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ERC20Creator__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": true,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "NewERC20",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newFee",
          "type": "uint256"
        }
      ],
      "name": "changeFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "maxCap",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "firstSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "burnPercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "decimals",
          "type": "uint256"
        }
      ],
      "name": "create",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getContractBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "getTokenAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd83220e6e79f45e1314e9678540f33bcb6ce347e383a17faf91d0530d5fd2823",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "2932521",
    "logsBloom": "0x
    "blockHash": "0xfe44f3eeafaacce1c2c69b287473ef44a1e5a9a5307cdab894e297948699b273",
    "transactionHash": "0xd83220e6e79f45e1314e9678540f33bcb6ce347e383a17faf91d0530d5fd2823",
    "logs": [],
    "blockNumber": 1,
    "cumulativeGasUsed": "2932521",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "10000000000000000"
  ],
  "numDeployments": 1,
  "solcInputHash": "0dc93e24c8b11fa20ea55095633b6ba7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC20Creator__CreateExceedsFee\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Creator__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC20Creator__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":true,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"NewERC20\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newFee\",\"type\":\"uint256\"}],\"name\":\"changeFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"maxCap\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"firstSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"burnPercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"decimals\",\"type\":\"uint256\"}],\"name\":\"create\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getContractBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"getTokenAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC20Creator.sol\":\"ERC20Creator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC20.sol\\\";\\nimport \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys `amount` tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 amount) public virtual {\\n        _burn(_msgSender(), amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\\n     * allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `amount`.\\n     */\\n    function burnFrom(address account, uint256 amount) public virtual {\\n        _spendAllowance(account, _msgSender(), amount);\\n        _burn(account, amount);\\n    }\\n}\\n\",\"keccak256\":\"0x0d19410453cda55960a818e02bd7c18952a5c8fe7a3036e81f0d599f34487a7b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/ERC20Creator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"./ERC20v2.sol\\\";\\n\\n    error ERC20Creator__NotOwner();\\n    error ERC20Creator__TransactionFailed();\\n    error ERC20Creator__CreateExceedsFee();\\n\\ncontract ERC20Creator {\\n\\n    event NewERC20(address indexed owner, address indexed tokenAddress,string name, string indexed symbol);\\n\\n    address payable private immutable owner;\\n    uint256 private createFee;\\n\\n    constructor(uint256 fee) {\\n        owner = payable(msg.sender);\\n        createFee = fee;\\n    }\\n    modifier onlyOwner {\\n        if (msg.sender == owner) {\\n            _;\\n        } else {\\n            revert ERC20Creator__NotOwner();\\n        }\\n    }\\n\\n    mapping (address => address[]) private userTokens;\\n\\n    function create( string memory name, string memory symbol, uint256 maxCap, uint256 firstSupply,uint256 burnPercent ,uint256 decimals) payable external {\\n        if (msg.value < createFee) {\\n            revert ERC20Creator__CreateExceedsFee();\\n        }\\n        ERC20v2 newToken = new ERC20v2(name,symbol,maxCap,firstSupply,burnPercent,decimals,msg.sender);\\n        address newTokenAddress = address(newToken);\\n        userTokens[msg.sender].push(newTokenAddress);\\n        emit NewERC20(msg.sender, newTokenAddress, name, symbol);\\n    }\\n\\n    function changeFee( uint256 newFee) external onlyOwner {\\n        createFee = newFee;\\n    }\\n\\n    function withdraw() external onlyOwner{\\n        uint256 balance = address(this).balance;\\n        (bool ok,) = msg.sender.call{value: balance}(\\\"\\\");\\n        if (ok == false) {\\n            revert ERC20Creator__TransactionFailed();\\n        }\\n    }\\n\\n    // View funcs:\\n\\n    function getTokenAddresses(address userAddress) external view returns(address[] memory){\\n        return userTokens[userAddress];\\n    }\\n    function getContractBalance() external view returns(uint256){\\n        return address(this).balance;\\n    }\\n}\\n\",\"keccak256\":\"0x141f434b9873bac4b7018204e0ab5fa6eacb66f097160b688ed39e5f8eb7754b\",\"license\":\"MIT\"},\"contracts/ERC20v2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\\\";\\n\\n\\n\\ncontract ERC20v2 is ERC20 ,ERC20Burnable{\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 immutable private i_decimals;\\n    uint256 private _totalSupply;\\n    string private _name;\\n    string private _symbol;\\n    address private immutable i_owner;\\n    uint256 private s_burnPercent;\\n    uint256 private  _maxSupply;\\n\\n    constructor(string memory name, string memory symbol, uint256 maxSupply, uint256 firstSupply, uint256 burnPercent, uint256 decimals ,address owner) ERC20(name,symbol)  {\\n        _name = name;\\n        _symbol = symbol;\\n        _mint(msg.sender, firstSupply);\\n        i_decimals = decimals;\\n        i_owner = owner;\\n        s_burnPercent = burnPercent;\\n        _maxSupply = maxSupply;\\n    }\\n\\n    modifier onlyOwner {\\n        require(msg.sender == i_owner);\\n        _;\\n    }\\n\\n    modifier supplyLimit (uint256 amount){\\n        if (_maxSupply > 0 ) {\\n            require (_maxSupply >= _totalSupply + amount,\\\"Max Supply\\\");\\n        }\\n        _;\\n       \\n    }\\n\\n    function mint(address userAddress, uint256 amount) external onlyOwner{\\n        _mint(userAddress, amount);\\n    }\\n\\n\\n   function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual override {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n\\n        uint256 finalAmount = amount;\\n        if (s_burnPercent > 0) {\\n            uint256 burnedAmount = (s_burnPercent * amount);\\n            finalAmount -= burnedAmount;\\n            unchecked {\\n                _balances[address(0)] -= burnedAmount;\\n                _totalSupply -= burnedAmount;\\n            }\\n        }\\n\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += finalAmount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    function _mint(address account, uint256 amount) internal virtual override supplyLimit(amount) {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        super._beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    function _beforeTokenTransfer(address from,address to,uint256 amount) internal virtual override{\\n        if (s_burnPercent > 0) {\\n            uint256 fromBalance = _balances[from];\\n            uint256 burnedAmount = (s_burnPercent * amount);\\n            unchecked {\\n                _balances[from] = fromBalance - burnedAmount;\\n                _balances[address(0)] -= burnedAmount;\\n                _totalSupply -= burnedAmount;\\n            }\\n        }\\n    }\\n\\n    function setBurnPercent(uint256 amount) external onlyOwner{\\n        s_burnPercent = amount;\\n    }\\n\\n    function burnByOwner( uint256 amount) external onlyOwner{\\n        _burn(msg.sender, amount);\\n    }\\n\\n    function destroy () external onlyOwner {\\n        selfdestruct(payable(i_owner));\\n    }\\n\\n \\n}\",\"keccak256\":\"0x58ae05270967e63ca3c76aa1e416afe6994462d874c4249d2bf0c16247793c10\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405260043610620000505760003560e01c806330a5e2a114620000555780633ccfd60b14620000995780636a1db1bf14620000b35780636f9fb98a14620000e15780639478f9e71462000111575b600080fd5b3480156200006257600080fd5b506200008160048036038101906200007b91906200061d565b62000131565b6040516200009091906200071d565b60405180910390f35b348015620000a657600080fd5b50620000b162000200565b005b348015620000c057600080fd5b50620000df6004803603810190620000d991906200077c565b62000344565b005b348015620000ee57600080fd5b50620000f9620003da565b604051620001089190620007bf565b60405180910390f35b6200012f60048036038101906200012991906200093e565b620003e2565b005b6060600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620001f457602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620001a9575b50505050509050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16036200031057600047905060003373ffffffffffffffffffffffffffffffffffffffff1682604051620002819062000a4d565b60006040518083038185875af1925050503d8060008114620002c0576040519150601f19603f3d011682016040523d82523d6000602084013e620002c5565b606091505b50509050600015158115150362000308576040517fa2bb07ad00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505062000342565b6040517fa99ef2f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1603620003a55780600081905550620003d7565b6040517fa99ef2f100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50565b600047905090565b6000543410156200041f576040517f6c6b793d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600086868686868633604051620004369062000596565b62000448979695949392919062000afe565b604051809103906000f08015801562000465573d6000803e3d6000fd5b5090506000819050600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550866040516200051d919062000bcb565b60405180910390208173ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f7cd2c69fdfba429bfc247105a6c417f2e3886b91a5d3d023c6f3e453bbde60008b60405162000584919062000be4565b60405180910390a45050505050505050565b6127b78062000c0983390190565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620005e582620005b8565b9050919050565b620005f781620005d8565b81146200060357600080fd5b50565b6000813590506200061781620005ec565b92915050565b600060208284031215620006365762000635620005ae565b5b6000620006468482850162000606565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200068681620005d8565b82525050565b60006200069a83836200067b565b60208301905092915050565b6000602082019050919050565b6000620006c0826200064f565b620006cc81856200065a565b9350620006d9836200066b565b8060005b8381101562000710578151620006f488826200068c565b97506200070183620006a6565b925050600181019050620006dd565b5085935050505092915050565b60006020820190508181036000830152620007398184620006b3565b905092915050565b6000819050919050565b620007568162000741565b81146200076257600080fd5b50565b60008135905062000776816200074b565b92915050565b600060208284031215620007955762000794620005ae565b5b6000620007a58482850162000765565b91505092915050565b620007b98162000741565b82525050565b6000602082019050620007d66000830184620007ae565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200083182620007e6565b810181811067ffffffffffffffff82111715620008535762000852620007f7565b5b80604052505050565b600062000868620005a4565b905062000876828262000826565b919050565b600067ffffffffffffffff821115620008995762000898620007f7565b5b620008a482620007e6565b9050602081019050919050565b82818337600083830152505050565b6000620008d7620008d1846200087b565b6200085c565b905082815260208101848484011115620008f657620008f5620007e1565b5b62000903848285620008b1565b509392505050565b600082601f830112620009235762000922620007dc565b5b813562000935848260208601620008c0565b91505092915050565b60008060008060008060c087890312156200095e576200095d620005ae565b5b600087013567ffffffffffffffff8111156200097f576200097e620005b3565b5b6200098d89828a016200090b565b965050602087013567ffffffffffffffff811115620009b157620009b0620005b3565b5b620009bf89828a016200090b565b9550506040620009d289828a0162000765565b9450506060620009e589828a0162000765565b9350506080620009f889828a0162000765565b92505060a062000a0b89828a0162000765565b9150509295509295509295565b600081905092915050565b50565b600062000a3560008362000a18565b915062000a428262000a23565b600082019050919050565b600062000a5a8262000a26565b9150819050919050565b600081519050919050565b600082825260208201905092915050565b60005b8381101562000aa057808201518184015260208101905062000a83565b60008484015250505050565b600062000ab98262000a64565b62000ac5818562000a6f565b935062000ad781856020860162000a80565b62000ae281620007e6565b840191505092915050565b62000af881620005d8565b82525050565b600060e082019050818103600083015262000b1a818a62000aac565b9050818103602083015262000b30818962000aac565b905062000b416040830188620007ae565b62000b506060830187620007ae565b62000b5f6080830186620007ae565b62000b6e60a0830185620007ae565b62000b7d60c083018462000aed565b98975050505050505050565b600081905092915050565b600062000ba18262000a64565b62000bad818562000b89565b935062000bbf81856020860162000a80565b80840191505092915050565b600062000bd9828462000b94565b915081905092915050565b6000602082019050818103600083015262000c00818462000aac565b90509291505056fe60c06040523480156200001157600080fd5b50604051620027b7380380620027b7833981810160405281019062000037919062000502565b868681600390816200004a919062000834565b5080600490816200005c919062000834565b505050866008908162000070919062000834565b50856009908162000082919062000834565b50620000953385620000ec60201b60201c565b81608081815250508073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff168152505082600a8190555084600b819055505050505050505062000aa8565b806000600b5411156200015157806007546200010991906200094a565b600b54101562000150576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200014790620009e6565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603620001c3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001ba9062000a58565b60405180910390fd5b620001dc60008484620002c560201b620008891760201c565b8160076000828254620001f091906200094a565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051620002a4919062000a8b565b60405180910390a3620002c060008484620002ca60201b60201c565b505050565b505050565b505050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200033882620002ed565b810181811067ffffffffffffffff821117156200035a5762000359620002fe565b5b80604052505050565b60006200036f620002cf565b90506200037d82826200032d565b919050565b600067ffffffffffffffff821115620003a0576200039f620002fe565b5b620003ab82620002ed565b9050602081019050919050565b60005b83811015620003d8578082015181840152602081019050620003bb565b60008484015250505050565b6000620003fb620003f58462000382565b62000363565b9050828152602081018484840111156200041a5762000419620002e8565b5b62000427848285620003b8565b509392505050565b600082601f830112620004475762000446620002e3565b5b815162000459848260208601620003e4565b91505092915050565b6000819050919050565b620004778162000462565b81146200048357600080fd5b50565b60008151905062000497816200046c565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620004ca826200049d565b9050919050565b620004dc81620004bd565b8114620004e857600080fd5b50565b600081519050620004fc81620004d1565b92915050565b600080600080600080600060e0888a031215620005245762000523620002d9565b5b600088015167ffffffffffffffff811115620005455762000544620002de565b5b620005538a828b016200042f565b975050602088015167ffffffffffffffff811115620005775762000576620002de565b5b620005858a828b016200042f565b9650506040620005988a828b0162000486565b9550506060620005ab8a828b0162000486565b9450506080620005be8a828b0162000486565b93505060a0620005d18a828b0162000486565b92505060c0620005e48a828b01620004eb565b91505092959891949750929550565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200064657607f821691505b6020821081036200065c576200065b620005fe565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620006c67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000687565b620006d2868362000687565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620007156200070f620007098462000462565b620006ea565b62000462565b9050919050565b6000819050919050565b6200073183620006f4565b6200074962000740826200071c565b84845462000694565b825550505050565b600090565b6200076062000751565b6200076d81848462000726565b505050565b5b8181101562000795576200078960008262000756565b60018101905062000773565b5050565b601f821115620007e457620007ae8162000662565b620007b98462000677565b81016020851015620007c9578190505b620007e1620007d88562000677565b83018262000772565b50505b505050565b600082821c905092915050565b60006200080960001984600802620007e9565b1980831691505092915050565b6000620008248383620007f6565b9150826002028217905092915050565b6200083f82620005f3565b67ffffffffffffffff8111156200085b576200085a620002fe565b5b6200086782546200062d565b6200087482828562000799565b600060209050601f831160018114620008ac576000841562000897578287015190505b620008a3858262000816565b86555062000913565b601f198416620008bc8662000662565b60005b82811015620008e657848901518255600182019150602085019450602081019050620008bf565b8683101562000906578489015162000902601f891682620007f6565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000620009578262000462565b9150620009648362000462565b92508282019050808211156200097f576200097e6200091b565b5b92915050565b600082825260208201905092915050565b7f4d617820537570706c7900000000000000000000000000000000000000000000600082015250565b6000620009ce600a8362000985565b9150620009db8262000996565b602082019050919050565b6000602082019050818103600083015262000a0181620009bf565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b600062000a40601f8362000985565b915062000a4d8262000a08565b602082019050919050565b6000602082019050818103600083015262000a738162000a31565b9050919050565b62000a858162000462565b82525050565b600060208201905062000aa2600083018462000a7a565b92915050565b60805160a051611cd062000ae76000396000818161049e01528181610580015281816105e50152818161063d01526107a2015260005050611cd06000f3fe608060405234801561001057600080fd5b506004361061010b5760003560e01c806370a08231116100a257806395d89b411161007157806395d89b41146102a4578063a457c2d7146102c2578063a9059cbb146102f2578063bb1570da14610322578063dd62ed3e1461033e5761010b565b806370a082311461023257806379cc67901461026257806380d9c3131461027e57806383197ef01461029a5761010b565b8063313ce567116100de578063313ce567146101ac57806339509351146101ca57806340c10f19146101fa57806342966c68146102165761010b565b806306fdde0314610110578063095ea7b31461012e57806318160ddd1461015e57806323b872dd1461017c575b600080fd5b61011861036e565b604051610125919061130e565b60405180910390f35b610148600480360381019061014391906113c9565b610400565b6040516101559190611424565b60405180910390f35b610166610423565b604051610173919061144e565b60405180910390f35b61019660048036038101906101919190611469565b61042d565b6040516101a39190611424565b60405180910390f35b6101b461045c565b6040516101c191906114d8565b60405180910390f35b6101e460048036038101906101df91906113c9565b610465565b6040516101f19190611424565b60405180910390f35b610214600480360381019061020f91906113c9565b61049c565b005b610230600480360381019061022b91906114f3565b610502565b005b61024c60048036038101906102479190611520565b610516565b604051610259919061144e565b60405180910390f35b61027c600480360381019061027791906113c9565b61055e565b005b610298600480360381019061029391906114f3565b61057e565b005b6102a26105e3565b005b6102ac610674565b6040516102b9919061130e565b60405180910390f35b6102dc60048036038101906102d791906113c9565b610706565b6040516102e99190611424565b60405180910390f35b61030c600480360381019061030791906113c9565b61077d565b6040516103199190611424565b60405180910390f35b61033c600480360381019061033791906114f3565b6107a0565b005b6103586004803603810190610353919061154d565b610802565b604051610365919061144e565b60405180910390f35b60606003805461037d906115bc565b80601f01602080910402602001604051908101604052809291908181526020018280546103a9906115bc565b80156103f65780601f106103cb576101008083540402835291602001916103f6565b820191906000526020600020905b8154815290600101906020018083116103d957829003601f168201915b5050505050905090565b60008061040b61088e565b9050610418818585610896565b600191505092915050565b6000600254905090565b60008061043861088e565b9050610445858285610a5f565b610450858585610aeb565b60019150509392505050565b60006012905090565b60008061047061088e565b90506104918185856104828589610802565b61048c919061161c565b610896565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146104f457600080fd5b6104fe8282610de9565b5050565b61051361050d61088e565b82610fa0565b50565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6105708261056a61088e565b83610a5f565b61057a8282610fa0565b5050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146105d657600080fd5b6105e03382610fa0565b50565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461063b57600080fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16ff5b606060048054610683906115bc565b80601f01602080910402602001604051908101604052809291908181526020018280546106af906115bc565b80156106fc5780601f106106d1576101008083540402835291602001916106fc565b820191906000526020600020905b8154815290600101906020018083116106df57829003601f168201915b5050505050905090565b60008061071161088e565b9050600061071f8286610802565b905083811015610764576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161075b906116c2565b60405180910390fd5b6107718286868403610896565b60019250505092915050565b60008061078861088e565b9050610795818585610aeb565b600191505092915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107f857600080fd5b80600a8190555050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b505050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610905576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108fc90611754565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610974576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161096b906117e6565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92583604051610a52919061144e565b60405180910390a3505050565b6000610a6b8484610802565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8114610ae55781811015610ad7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ace90611852565b60405180910390fd5b610ae48484848403610896565b5b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610b5a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b51906118e4565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610bc9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bc090611976565b60405180910390fd5b6000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610c50576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4790611a08565b60405180910390fd5b60008290506000600a541115610cdf57600083600a54610c709190611a28565b90508082610c7e9190611a6a565b915080600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254039250508190555080600760008282540392505081905550505b828203600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600560008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef85604051610dcf919061144e565b60405180910390a3610de285858561116d565b5050505050565b806000600b541115610e485780600754610e03919061161c565b600b541015610e47576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e3e90611aea565b60405180910390fd5b5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610eb7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eae90611b56565b60405180910390fd5b610ec360008484610889565b8160076000828254610ed5919061161c565b9250508190555081600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610f87919061144e565b60405180910390a3610f9b6000848461116d565b505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361100f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161100690611be8565b60405180910390fd5b61101b82600083611172565b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050818110156110a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161109890611c7a565b60405180910390fd5b8181036000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555081600260008282540392505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051611154919061144e565b60405180910390a36111688360008461116d565b505050565b505050565b6000600a541115611279576000600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600082600a546111d19190611a28565b9050808203600560008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555080600560008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055508060076000828254039250508190555050505b505050565b600081519050919050565b600082825260208201905092915050565b60005b838110156112b857808201518184015260208101905061129d565b60008484015250505050565b6000601f19601f8301169050919050565b60006112e08261127e565b6112ea8185611289565b93506112fa81856020860161129a565b611303816112c4565b840191505092915050565b6000602082019050818103600083015261132881846112d5565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061136082611335565b9050919050565b61137081611355565b811461137b57600080fd5b50565b60008135905061138d81611367565b92915050565b6000819050919050565b6113a681611393565b81146113b157600080fd5b50565b6000813590506113c38161139d565b92915050565b600080604083850312156113e0576113df611330565b5b60006113ee8582860161137e565b92505060206113ff858286016113b4565b9150509250929050565b60008115159050919050565b61141e81611409565b82525050565b60006020820190506114396000830184611415565b92915050565b61144881611393565b82525050565b6000602082019050611463600083018461143f565b92915050565b60008060006060848603121561148257611481611330565b5b60006114908682870161137e565b93505060206114a18682870161137e565b92505060406114b2868287016113b4565b9150509250925092565b600060ff82169050919050565b6114d2816114bc565b82525050565b60006020820190506114ed60008301846114c9565b92915050565b60006020828403121561150957611508611330565b5b6000611517848285016113b4565b91505092915050565b60006020828403121561153657611535611330565b5b60006115448482850161137e565b91505092915050565b6000806040838503121561156457611563611330565b5b60006115728582860161137e565b92505060206115838582860161137e565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806115d457607f821691505b6020821081036115e7576115e661158d565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061162782611393565b915061163283611393565b925082820190508082111561164a576116496115ed565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b60006116ac602583611289565b91506116b782611650565b604082019050919050565b600060208201905081810360008301526116db8161169f565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061173e602483611289565b9150611749826116e2565b604082019050919050565b6000602082019050818103600083015261176d81611731565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b60006117d0602283611289565b91506117db82611774565b604082019050919050565b600060208201905081810360008301526117ff816117c3565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e6365000000600082015250565b600061183c601d83611289565b915061184782611806565b602082019050919050565b6000602082019050818103600083015261186b8161182f565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006118ce602583611289565b91506118d982611872565b604082019050919050565b600060208201905081810360008301526118fd816118c1565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611960602383611289565b915061196b82611904565b604082019050919050565b6000602082019050818103600083015261198f81611953565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b60006119f2602683611289565b91506119fd82611996565b604082019050919050565b60006020820190508181036000830152611a21816119e5565b9050919050565b6000611a3382611393565b9150611a3e83611393565b9250828202611a4c81611393565b91508282048414831517611a6357611a626115ed565b5b5092915050565b6000611a7582611393565b9150611a8083611393565b9250828203905081811115611a9857611a976115ed565b5b92915050565b7f4d617820537570706c7900000000000000000000000000000000000000000000600082015250565b6000611ad4600a83611289565b9150611adf82611a9e565b602082019050919050565b60006020820190508181036000830152611b0381611ac7565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000611b40601f83611289565b9150611b4b82611b0a565b602082019050919050565b60006020820190508181036000830152611b6f81611b33565b9050919050565b7f45524332303a206275726e2066726f6d20746865207a65726f2061646472657360008201527f7300000000000000000000000000000000000000000000000000000000000000602082015250565b6000611bd2602183611289565b9150611bdd82611b76565b604082019050919050565b60006020820190508181036000830152611c0181611bc5565b9050919050565b7f45524332303a206275726e20616d6f756e7420657863656564732062616c616e60008201527f6365000000000000000000000000000000000000000000000000000000000000602082015250565b6000611c64602283611289565b9150611c6f82611c08565b604082019050919050565b60006020820190508181036000830152611c9381611c57565b905091905056fea26469706673582212203e3824ede3593b03deee5739e339e75c33ce2c6e84cc80be901444193eaede8264736f6c63430008110033a2646970667358221220bfa730df83e482333a3283b610e8aa9f621209a0001edfd20a4927c9f6be1fda64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3683,
        "contract": "contracts/ERC20Creator.sol:ERC20Creator",
        "label": "createFee",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 3720,
        "contract": "contracts/ERC20Creator.sol:ERC20Creator",
        "label": "userTokens",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}