{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [],
      "name": "SafeTreasury__AddressNotFound",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTreasury__InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTreasury__NotAuthorized",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SafeTreasury__TransactionFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositNT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "externalTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getAuthorized",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "internallTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "removeAuthorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawByAA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNTByAA",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x832e24c1768743a7b76bc50369ad2776d1a86fa3e4b6b16aeb555fb930dad1ff",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1696720",
    "logsBloom": "0x
    "blockHash": "0xd3bd8b26fe76a0d26a90ef5ee7fca4aa59adeeb3d90984069d79a4de7fb8ce22",
    "transactionHash": "0x832e24c1768743a7b76bc50369ad2776d1a86fa3e4b6b16aeb555fb930dad1ff",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 4,
        "transactionHash": "0x832e24c1768743a7b76bc50369ad2776d1a86fa3e4b6b16aeb555fb930dad1ff",
        "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xd3bd8b26fe76a0d26a90ef5ee7fca4aa59adeeb3d90984069d79a4de7fb8ce22"
      }
    ],
    "blockNumber": 4,
    "cumulativeGasUsed": "1696720",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "77633b6341382ea277d08f42cd4f487e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"SafeTreasury__AddressNotFound\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTreasury__InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTreasury__NotAuthorized\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SafeTreasury__TransactionFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"externalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getAuthorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"internallTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"removeAuthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawByAA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNTByAA\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alireza Haghshenas Github: alireza1691\",\"kind\":\"dev\",\"methods\":{\"deposit(address,uint256)\":{\"details\":\"Before calling this function, to transfer ERC20 token in smart contract we need to approve the amount that smart contract can spend token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"title\":\"A smart contract that works as a treasury to keep user assets safe.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeTreasury.sol\":\"SafeTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SafeTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\n/// @title A smart contract that works as a treasury to keep user assets safe.\\n/// @author Alireza Haghshenas Github: alireza1691\\n/// @notice This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.\\n\\n\\ncontract SafeTreasury is Ownable , ReentrancyGuard{\\n\\n    error SafeTreasury__NotAuthorized();\\n    error SafeTreasury__InsufficientBalance();\\n    error SafeTreasury__TransactionFailed();\\n    error SafeTreasury__AddressNotFound();\\n\\n\\n    // Mappings:\\n\\n    // Mapping to get the address who authorized another address. We need this when an authorzied address wants to withdraw or transfer funcds of another address.\\nmapping (address => address) private authorizedAddressesToMainAddress;\\n    // Mapping to get token balance of each address (token address => user address => balance)\\nmapping (address => mapping(address => uint256)) private tokenAddressToOwnerToBalance;\\n\\n\\n    // External functions:\\n\\n    // Depist token to contract and increase balance of the address.\\n    /// @dev Before calling this function, to transfer ERC20 token in smart contract we need to approve the amount that smart contract can spend token.\\nfunction deposit(address tokenAddress, uint256 amount) external {\\n    (bool ok) = IERC20(tokenAddress).transferFrom(msg.sender, address(this), amount);\\n    if (!ok) {\\n        revert SafeTreasury__TransactionFailed();\\n    }\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] += amount;\\n}\\n\\n    // Deposit native toke of the chain and the amount is msg.value.\\n    // NT stands for: native token\\n    // Note that here we assume address of native token as address(0)\\nfunction depositNT() external payable {\\n    tokenAddressToOwnerToBalance[address(0)][msg.sender] += msg.value;\\n}\\n\\n\\n    // Withdrawal of assets if amount less than balance or equal.\\nfunction withdraw (address tokenAddress, uint256 amount) external{\\n    if (tokenAddressToOwnerToBalance[tokenAddress][msg.sender] < amount) {\\n        revert SafeTreasury__InsufficientBalance();\\n    }\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n    (bool ok) = IERC20(tokenAddress).transfer(msg.sender, amount);\\n    if (!ok) {\\n        revert SafeTreasury__TransactionFailed();\\n    }\\n}\\n\\n    // Withdrawal of native token of the current chain.\\n    // This withdrawal is the same as the previous one but to withdraw native token we should call this function instead of the previous one.\\nfunction withdrawNT(uint256 amount) external payable nonReentrant{\\n    if (tokenAddressToOwnerToBalance[address(0)][msg.sender] < amount) {\\n        revert SafeTreasury__InsufficientBalance();\\n    }\\n    tokenAddressToOwnerToBalance[address(0)][msg.sender] -= amount;\\n    (bool ok,) = msg.sender.call{value: amount}(\\\"\\\");\\n    if (!ok) {\\n            revert SafeTreasury__TransactionFailed();\\n        }\\n}\\n\\n    // Withdrawal just for addresses who authorized by another address and they have access to another address assets.\\n    // AA stands for: authorized address\\nfunction withdrawByAA(address tokenAddress,uint256 amount) external nonReentrant {\\n        address mainAddress = getAuthorized(msg.sender);\\n        if (mainAddress == address(0)) {\\n            revert SafeTreasury__NotAuthorized(); \\n        }\\n        uint256 mainAddressBalance = tokenAddressToOwnerToBalance[tokenAddress][mainAddress];\\n        if (mainAddressBalance < amount) {\\n            revert SafeTreasury__InsufficientBalance();\\n        }\\n        tokenAddressToOwnerToBalance[tokenAddress][mainAddress] -= amount;\\n        (bool ok) = IERC20(tokenAddress).transfer(msg.sender, amount);\\n        if (!ok) {\\n            revert SafeTreasury__TransactionFailed();\\n        }\\n}\\n\\n    // Same as previous one this function will withdraw user balance but this one uses for withdraw native token of chain.\\nfunction withdrawNTByAA(uint256 amount) external nonReentrant {\\n        address mainAddress = getAuthorized(msg.sender);\\n        if (mainAddress == address(0)) {\\n            revert SafeTreasury__NotAuthorized(); \\n        }\\n        uint256 mainAddressBalance = tokenAddressToOwnerToBalance[address(0)][mainAddress];\\n        if (mainAddressBalance < amount) {\\n            revert SafeTreasury__InsufficientBalance();\\n        }\\n        tokenAddressToOwnerToBalance[address(0)][mainAddress] -= amount;\\n        (bool ok, ) = msg.sender.call{value: (amount*995)/1000 }(\\\"\\\");\\n        if (!ok) {\\n            revert SafeTreasury__TransactionFailed();\\n        }\\n}\\n\\n    // Transfer asset from this smart contract to another address\\nfunction externalTransfer(address tokenAddress, address to, uint256 amount) external nonReentrant{\\n    if (tokenAddressToOwnerToBalance[tokenAddress][msg.sender] < amount) {\\n        revert SafeTreasury__InsufficientBalance();\\n    }\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n    bool ok = IERC20(tokenAddress).transfer(to, (amount * 995)/1000);\\n    if (!ok) {\\n        revert SafeTreasury__TransactionFailed();\\n    }\\n}\\n\\n    // Transfer asset inside contract without withdrawing fund from this smart contract.\\n    // It decreases the balance of sender address and increases balance of receiver address.\\nfunction internallTransfer(address tokenAddress, address to, uint256 amount) external{\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n    tokenAddressToOwnerToBalance[tokenAddress][to] += (amount * 995)/1000;\\n}\\n\\n    // With this function an address can authorize another address to have access its assets.\\nfunction authorize(address authorizedAddress) external {\\n    authorizedAddressesToMainAddress[authorizedAddress]= msg.sender;\\n}\\n\\n    // This function will remove authorized address. \\nfunction removeAuthorize(address authorizedAddress) external {\\n    if (authorizedAddressesToMainAddress[authorizedAddress] != msg.sender) {\\n        revert SafeTreasury__AddressNotFound();\\n    }\\n        authorizedAddressesToMainAddress[authorizedAddress] = address(0);\\n}\\n\\n    // What else we need?\\n    // A function to withdraw fees by owner\\n\\n    // View funcs:\\n\\n    // Show token balance of an address using token address and user address.\\nfunction balance(address tokenAddress, address userAddress) public view returns (uint256) {\\n    return tokenAddressToOwnerToBalance[tokenAddress][userAddress];\\n}\\n\\n    // To get an address that authorized another address.\\n    // If returns address(0),'from' address not authorized by any address.\\nfunction getAuthorized(address from) view public returns (address) {\\n    return authorizedAddressesToMainAddress[from];\\n}\\n\\n}\",\"keccak256\":\"0xd3676e62602b4bf4edbe6500901f2b657e3835253c9e0f2129f961804fdb5287\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261003960201b60201c565b61004160201b60201c565b60018081905550610105565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b611cf3806101146000396000f3fe6080604052600436106100e85760003560e01c8063b6a5d7de1161008a578063e6996de211610059578063e6996de21461029c578063f2fde38b146102c5578063f3fef3a3146102ee578063f71c559c14610317576100e8565b8063b6a5d7de14610203578063bee69a5f1461022c578063c731fc7b14610255578063cb57e3f614610292576100e8565b8063715018a6116100c6578063715018a61461015b5780637c989f17146101725780638da5cb5b1461019b578063b203bb99146101c6576100e8565b806347e7ef24146100ed57806362ab5816146101165780636a6ed3a114610132575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f919061177d565b610340565b005b610130600480360381019061012b91906117bd565b610493565b005b34801561013e57600080fd5b50610159600480360381019061015491906117bd565b610693565b005b34801561016757600080fd5b50610170610927565b005b34801561017e57600080fd5b506101996004803603810190610194919061177d565b61093b565b005b3480156101a757600080fd5b506101b0610bcc565b6040516101bd91906117f9565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611814565b610bf5565b6040516101fa9190611863565b60405180910390f35b34801561020f57600080fd5b5061022a6004803603810190610225919061187e565b610c7c565b005b34801561023857600080fd5b50610253600480360381019061024e919061187e565b610cfd565b005b34801561026157600080fd5b5061027c6004803603810190610277919061187e565b610e43565b60405161028991906117f9565b60405180910390f35b61029a610eac565b005b3480156102a857600080fd5b506102c360048036038101906102be91906118ab565b610f41565b005b3480156102d157600080fd5b506102ec60048036038101906102e7919061187e565b611086565b005b3480156102fa57600080fd5b506103156004803603810190610310919061177d565b611109565b005b34801561032357600080fd5b5061033e600480360381019061033991906118ab565b611310565b005b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161037f939291906118fe565b6020604051808303816000875af115801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c2919061196d565b9050806103fb576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461048791906119c9565b92505081905550505050565b61049b611542565b80600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610551576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105dd91906119fd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161060a90611a62565b60006040518083038185875af1925050503d8060008114610647576040519150601f19603f3d011682016040523d82523d6000602084013e61064c565b606091505b5050905080610687576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610690611591565b50565b61069b611542565b60006106a633610e43565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361070e576040517f3eeac52b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156107c9576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461085591906119fd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff166103e86103e3866108869190611a77565b6108909190611ae8565b60405161089c90611a62565b60006040518083038185875af1925050503d80600081146108d9576040519150601f19603f3d011682016040523d82523d6000602084013e6108de565b606091505b5050905080610919576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050610924611591565b50565b61092f61159a565b6109396000611618565b565b610943611542565b600061094e33610e43565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b6576040517f3eeac52b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a71576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610afd91906119fd565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610b41929190611b19565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b84919061196d565b905080610bbd576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050610bc8611591565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dc1576040517fa946b20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b34600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f3891906119c9565b92505081905550565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fcd91906119fd565b925050819055506103e86103e382610fe59190611a77565b610fef9190611ae8565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461107a91906119c9565b92505081905550505050565b61108e61159a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490611bc5565b60405180910390fd5b61110681611618565b50565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111bf576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461124b91906119fd565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161128f929190611b19565b6020604051808303816000875af11580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d2919061196d565b90508061130b576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611318611542565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156113ce576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461145a91906119fd565b9250508190555060008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb846103e86103e3866114919190611a77565b61149b9190611ae8565b6040518363ffffffff1660e01b81526004016114b8929190611b19565b6020604051808303816000875af11580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061196d565b905080611534576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061153d611591565b505050565b600260015403611587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157e90611c31565b60405180910390fd5b6002600181905550565b60018081905550565b6115a26116dc565b73ffffffffffffffffffffffffffffffffffffffff166115c0610bcc565b73ffffffffffffffffffffffffffffffffffffffff1614611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d90611c9d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611714826116e9565b9050919050565b61172481611709565b811461172f57600080fd5b50565b6000813590506117418161171b565b92915050565b6000819050919050565b61175a81611747565b811461176557600080fd5b50565b60008135905061177781611751565b92915050565b60008060408385031215611794576117936116e4565b5b60006117a285828601611732565b92505060206117b385828601611768565b9150509250929050565b6000602082840312156117d3576117d26116e4565b5b60006117e184828501611768565b91505092915050565b6117f381611709565b82525050565b600060208201905061180e60008301846117ea565b92915050565b6000806040838503121561182b5761182a6116e4565b5b600061183985828601611732565b925050602061184a85828601611732565b9150509250929050565b61185d81611747565b82525050565b60006020820190506118786000830184611854565b92915050565b600060208284031215611894576118936116e4565b5b60006118a284828501611732565b91505092915050565b6000806000606084860312156118c4576118c36116e4565b5b60006118d286828701611732565b93505060206118e386828701611732565b92505060406118f486828701611768565b9150509250925092565b600060608201905061191360008301866117ea565b61192060208301856117ea565b61192d6040830184611854565b949350505050565b60008115159050919050565b61194a81611935565b811461195557600080fd5b50565b60008151905061196781611941565b92915050565b600060208284031215611983576119826116e4565b5b600061199184828501611958565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119d482611747565b91506119df83611747565b92508282019050808211156119f7576119f661199a565b5b92915050565b6000611a0882611747565b9150611a1383611747565b9250828203905081811115611a2b57611a2a61199a565b5b92915050565b600081905092915050565b50565b6000611a4c600083611a31565b9150611a5782611a3c565b600082019050919050565b6000611a6d82611a3f565b9150819050919050565b6000611a8282611747565b9150611a8d83611747565b9250828202611a9b81611747565b91508282048414831517611ab257611ab161199a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611af382611747565b9150611afe83611747565b925082611b0e57611b0d611ab9565b5b828204905092915050565b6000604082019050611b2e60008301856117ea565b611b3b6020830184611854565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611baf602683611b42565b9150611bba82611b53565b604082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c1b601f83611b42565b9150611c2682611be5565b602082019050919050565b60006020820190508181036000830152611c4a81611c0e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c87602083611b42565b9150611c9282611c51565b602082019050919050565b60006020820190508181036000830152611cb681611c7a565b905091905056fea2646970667358221220a24c26f7da4b79caaace1ea4beada324adaa94274f05d18eeccbbf86c5faa5c064736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063b6a5d7de1161008a578063e6996de211610059578063e6996de21461029c578063f2fde38b146102c5578063f3fef3a3146102ee578063f71c559c14610317576100e8565b8063b6a5d7de14610203578063bee69a5f1461022c578063c731fc7b14610255578063cb57e3f614610292576100e8565b8063715018a6116100c6578063715018a61461015b5780637c989f17146101725780638da5cb5b1461019b578063b203bb99146101c6576100e8565b806347e7ef24146100ed57806362ab5816146101165780636a6ed3a114610132575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f919061177d565b610340565b005b610130600480360381019061012b91906117bd565b610493565b005b34801561013e57600080fd5b50610159600480360381019061015491906117bd565b610693565b005b34801561016757600080fd5b50610170610927565b005b34801561017e57600080fd5b506101996004803603810190610194919061177d565b61093b565b005b3480156101a757600080fd5b506101b0610bcc565b6040516101bd91906117f9565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190611814565b610bf5565b6040516101fa9190611863565b60405180910390f35b34801561020f57600080fd5b5061022a6004803603810190610225919061187e565b610c7c565b005b34801561023857600080fd5b50610253600480360381019061024e919061187e565b610cfd565b005b34801561026157600080fd5b5061027c6004803603810190610277919061187e565b610e43565b60405161028991906117f9565b60405180910390f35b61029a610eac565b005b3480156102a857600080fd5b506102c360048036038101906102be91906118ab565b610f41565b005b3480156102d157600080fd5b506102ec60048036038101906102e7919061187e565b611086565b005b3480156102fa57600080fd5b506103156004803603810190610310919061177d565b611109565b005b34801561032357600080fd5b5061033e600480360381019061033991906118ab565b611310565b005b60008273ffffffffffffffffffffffffffffffffffffffff166323b872dd3330856040518463ffffffff1660e01b815260040161037f939291906118fe565b6020604051808303816000875af115801561039e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103c2919061196d565b9050806103fb576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461048791906119c9565b92505081905550505050565b61049b611542565b80600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610551576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105dd91906119fd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff168260405161060a90611a62565b60006040518083038185875af1925050503d8060008114610647576040519150601f19603f3d011682016040523d82523d6000602084013e61064c565b606091505b5050905080610687576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50610690611591565b50565b61069b611542565b60006106a633610e43565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361070e576040517f3eeac52b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156107c9576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461085591906119fd565b9250508190555060003373ffffffffffffffffffffffffffffffffffffffff166103e86103e3866108869190611a77565b6108909190611ae8565b60405161089c90611a62565b60006040518083038185875af1925050503d80600081146108d9576040519150601f19603f3d011682016040523d82523d6000602084013e6108de565b606091505b5050905080610919576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050610924611591565b50565b61092f61159a565b6109396000611618565b565b610943611542565b600061094e33610e43565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036109b6576040517f3eeac52b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610a71576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610afd91906119fd565b9250508190555060008473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33866040518363ffffffff1660e01b8152600401610b41929190611b19565b6020604051808303816000875af1158015610b60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b84919061196d565b905080610bbd576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050610bc8611591565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b3373ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610dc1576040517fa946b20a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b34600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610f3891906119c9565b92505081905550565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610fcd91906119fd565b925050819055506103e86103e382610fe59190611a77565b610fef9190611ae8565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461107a91906119c9565b92505081905550505050565b61108e61159a565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036110fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f490611bc5565b60405180910390fd5b61110681611618565b50565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156111bf576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461124b91906119fd565b9250508190555060008273ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33846040518363ffffffff1660e01b815260040161128f929190611b19565b6020604051808303816000875af11580156112ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112d2919061196d565b90508061130b576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b611318611542565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156113ce576040517fc95a75f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461145a91906119fd565b9250508190555060008373ffffffffffffffffffffffffffffffffffffffff1663a9059cbb846103e86103e3866114919190611a77565b61149b9190611ae8565b6040518363ffffffff1660e01b81526004016114b8929190611b19565b6020604051808303816000875af11580156114d7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114fb919061196d565b905080611534576040517fdd06abf200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5061153d611591565b505050565b600260015403611587576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161157e90611c31565b60405180910390fd5b6002600181905550565b60018081905550565b6115a26116dc565b73ffffffffffffffffffffffffffffffffffffffff166115c0610bcc565b73ffffffffffffffffffffffffffffffffffffffff1614611616576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161160d90611c9d565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611714826116e9565b9050919050565b61172481611709565b811461172f57600080fd5b50565b6000813590506117418161171b565b92915050565b6000819050919050565b61175a81611747565b811461176557600080fd5b50565b60008135905061177781611751565b92915050565b60008060408385031215611794576117936116e4565b5b60006117a285828601611732565b92505060206117b385828601611768565b9150509250929050565b6000602082840312156117d3576117d26116e4565b5b60006117e184828501611768565b91505092915050565b6117f381611709565b82525050565b600060208201905061180e60008301846117ea565b92915050565b6000806040838503121561182b5761182a6116e4565b5b600061183985828601611732565b925050602061184a85828601611732565b9150509250929050565b61185d81611747565b82525050565b60006020820190506118786000830184611854565b92915050565b600060208284031215611894576118936116e4565b5b60006118a284828501611732565b91505092915050565b6000806000606084860312156118c4576118c36116e4565b5b60006118d286828701611732565b93505060206118e386828701611732565b92505060406118f486828701611768565b9150509250925092565b600060608201905061191360008301866117ea565b61192060208301856117ea565b61192d6040830184611854565b949350505050565b60008115159050919050565b61194a81611935565b811461195557600080fd5b50565b60008151905061196781611941565b92915050565b600060208284031215611983576119826116e4565b5b600061199184828501611958565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006119d482611747565b91506119df83611747565b92508282019050808211156119f7576119f661199a565b5b92915050565b6000611a0882611747565b9150611a1383611747565b9250828203905081811115611a2b57611a2a61199a565b5b92915050565b600081905092915050565b50565b6000611a4c600083611a31565b9150611a5782611a3c565b600082019050919050565b6000611a6d82611a3f565b9150819050919050565b6000611a8282611747565b9150611a8d83611747565b9250828202611a9b81611747565b91508282048414831517611ab257611ab161199a565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000611af382611747565b9150611afe83611747565b925082611b0e57611b0d611ab9565b5b828204905092915050565b6000604082019050611b2e60008301856117ea565b611b3b6020830184611854565b9392505050565b600082825260208201905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000611baf602683611b42565b9150611bba82611b53565b604082019050919050565b60006020820190508181036000830152611bde81611ba2565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000611c1b601f83611b42565b9150611c2682611be5565b602082019050919050565b60006020820190508181036000830152611c4a81611c0e565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000611c87602083611b42565b9150611c9282611c51565b602082019050919050565b60006020820190508181036000830152611cb681611c7a565b905091905056fea2646970667358221220a24c26f7da4b79caaace1ea4beada324adaa94274f05d18eeccbbf86c5faa5c064736f6c63430008110033",
  "devdoc": {
    "author": "Alireza Haghshenas Github: alireza1691",
    "kind": "dev",
    "methods": {
      "deposit(address,uint256)": {
        "details": "Before calling this function, to transfer ERC20 token in smart contract we need to approve the amount that smart contract can spend token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "title": "A smart contract that works as a treasury to keep user assets safe.",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 126,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 468,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "authorizedAddressesToMainAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 474,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "tokenAddressToOwnerToBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}