{
  "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "_fee",
          "type": "uint8"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "Authorize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ExternallTransfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "RemoveAuthorize",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "authorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "userAddress",
          "type": "address"
        }
      ],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "claimFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositNT",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "externalTransfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        }
      ],
      "name": "getAuthorized",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "authorizedAddress",
          "type": "address"
        }
      ],
      "name": "removeAuthorize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawNT",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x81a41d78e94e7437becbedd9ef524d4fff74c800a4d7cf04b729d4f574abc1b7",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
    "transactionIndex": 0,
    "gasUsed": "2218840",
    "logsBloom": "0x
    "blockHash": "0x74a87a9617b541c9f7f888ba728f617ddc09c1b7b7294f23002a1b3aecc26aa3",
    "transactionHash": "0x81a41d78e94e7437becbedd9ef524d4fff74c800a4d7cf04b729d4f574abc1b7",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 5,
        "transactionHash": "0x81a41d78e94e7437becbedd9ef524d4fff74c800a4d7cf04b729d4f574abc1b7",
        "address": "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x74a87a9617b541c9f7f888ba728f617ddc09c1b7b7294f23002a1b3aecc26aa3"
      }
    ],
    "blockNumber": 5,
    "cumulativeGasUsed": "2218840",
    "status": 1,
    "byzantium": true
  },
  "args": [
    5
  ],
  "numDeployments": 1,
  "solcInputHash": "aebcd8aa1dc15f2af2c21ac7c34a7420",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"_fee\",\"type\":\"uint8\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"Authorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ExternallTransfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"RemoveAuthorize\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"authorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"userAddress\",\"type\":\"address\"}],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"claimFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositNT\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"externalTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"}],\"name\":\"getAuthorized\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"authorizedAddress\",\"type\":\"address\"}],\"name\":\"removeAuthorize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawNT\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Alireza Haghshenas Github: alireza1691\",\"events\":{\"Authorize(address,address)\":{\"params\":{\"authorizedAddress\":\"is the address that authorized an address.\"}},\"Deposit(address,address,uint256)\":{\"details\":\"Explain to a developer any extra details\",\"params\":{\"amount\":\"is amount of deposited token.\",\"token\":\"is address of ERC20 smart contract of the token.\",\"user\":\"is address of user who deposited.\"}}},\"kind\":\"dev\",\"methods\":{\"authorize(address)\":{\"details\":\"Authorized address can removed using 'removeAuthorize' function\"},\"balance(address,address)\":{\"details\":\"Same as before address(0) will return balance of native token\"},\"deposit(address,uint256)\":{\"details\":\"Before calling this function, to transfer ERC20 token from user to address(this) we need to approve the amount in ERC20 smart contract as requirement of transferFrom function.\",\"params\":{\"amount\":\"is amount of ERC20 token.\",\"tokenAddress\":\"is address of ERC20 token contract.\"}},\"depositNT()\":{\"details\":\"Note that here we assume address of native token as address(0) adn since we enter amount of native token as msg.value, there isn't any input in this function\"},\"externalTransfer(address,address,uint256)\":{\"details\":\"Since we assume that native token address = 0, iff the token address as input was 0, we should send native token using 'call'.\"},\"getAuthorized(address)\":{\"details\":\"If it returns address(0),'from' address is not authorized by any address.If this function returns address 'A', address 'from' will have access to 'A' assets.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeAuthorize(address)\":{\"details\":\"To access authorized addresses by an address, we can use relevant emited events 'event Authorize(address owner, address authorizedAddress);').\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transfer(address,address,uint256)\":{\"details\":\"This function changes the balance of the sender address and 'to' address by the amount.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"withdraw(address,uint256)\":{\"details\":\"Explain to a developer any extra details\"},\"withdrawNT(uint256)\":{\"details\":\"This withdrawal is the same as the previous one but to withdraw native token we should call this function instead of the previous one.\"}},\"title\":\"A smart contract that works as a treasury to keep user assets safe.\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,uint256)\":{\"notice\":\"Explain to an end user what this does\"}},\"kind\":\"user\",\"methods\":{\"authorize(address)\":{\"notice\":\"Authorizing an address that can access to your assets.\"},\"balance(address,address)\":{\"notice\":\"Getting balance of an address for a token using both token address and user address\"},\"deposit(address,uint256)\":{\"notice\":\"Depist ERC20 token into contract, thereby increasing balance of the address who deposited.\"},\"depositNT()\":{\"notice\":\"Deposit native toke of the chain and the amount is msg.value (NT stands for: native token).\"},\"externalTransfer(address,address,uint256)\":{\"notice\":\"Transfer asset from this smart contract to another address.\"},\"getAuthorized(address)\":{\"notice\":\"Getting an address that authorized another address.\"},\"removeAuthorize(address)\":{\"notice\":\"Remove the authorized address with the address that already authorized it.\"},\"transfer(address,address,uint256)\":{\"notice\":\"Transfer to another address account inside contract.\"},\"withdraw(address,uint256)\":{\"notice\":\"Withdrawal of assets if amount less than balance or equal.\"},\"withdrawNT(uint256)\":{\"notice\":\"Withdrawal of native token of the current chain.\"}},\"notice\":\"This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SafeTreasury.sol\":\"SafeTreasury\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        return _status == _ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xa535a5df777d44e945dd24aa43a11e44b024140fc340ad0dfe42acf4002aade1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/SafeTreasury.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// ****************************************************\\n// ********************** Imports **********************\\n// ****************************************************\\n\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\\n\\n/// @title A smart contract that works as a treasury to keep user assets safe.\\n/// @author Alireza Haghshenas Github: alireza1691\\n/// @notice This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.\\n\\n\\ncontract SafeTreasury is Ownable , ReentrancyGuard{\\n\\n    \\n// ****************************************************\\n// ********************** Events **********************\\n// ****************************************************\\n\\n\\n    /// @notice Explain to an end user what this does\\n    /// @dev Explain to a developer any extra details\\n    /// @param user is address of user who deposited.\\n    /// @param token is address of ERC20 smart contract of the token.\\n    /// @param amount is amount of deposited token.\\n    event Deposit(address user, address token, uint256 amount);\\n    event Withdraw(address user, address token, uint256 amount);\\n    /// @param authorizedAddress is the address that authorized by another address. Authorized address has access to authorizer address assets.\\n    /// @param authorizedAddress is the address that authorized an address.\\n    event Authorize(address authorizer, address authorizedAddress);\\n    event RemoveAuthorize(address authorizer, address authorizedAddress);\\n    event Transfer(address from, address to, address token, uint256 amount);\\n    event ExternallTransfer(address from, address to, address token, uint256 amount);\\n\\n // ****************************************************\\n// ******************** Variables *********************\\n// ****************************************************\\n\\n\\nuint8 private immutable fee;\\n\\n\\n// ****************************************************\\n// ******************* Constructor ********************\\n// ****************************************************\\n\\n\\n    constructor( uint8 _fee) {\\n        fee = _fee;\\n    }\\n\\n\\n// ****************************************************\\n// ********************** Mappings **********************\\n// ****************************************************\\n\\n    // Mapping to get the address who authorized another address. We need this when an authorzied address wants to withdraw or transfer funcds of another address.\\nmapping (address => address) private authorizedAddressesToMainAddress;\\n    // Mapping to get token balance of each address (token address => user address => balance)\\nmapping (address => mapping(address => uint256)) private tokenAddressToOwnerToBalance;\\nmapping (address => uint256) private income;\\n\\n\\n// ****************************************************\\n// ********************  functions ********************\\n// ****************************************************\\n\\n\\n/// @notice Depist ERC20 token into contract, thereby increasing balance of the address who deposited.\\n/// @dev Before calling this function, to transfer ERC20 token from user to address(this) we need to approve the amount in ERC20 smart contract as requirement of transferFrom function.\\n/// @param tokenAddress is address of ERC20 token contract.\\n/// @param amount is amount of ERC20 token.\\nfunction deposit(address tokenAddress, uint256 amount) external {\\n    TransferHelper.safeTransferFrom(tokenAddress, msg.sender, address(this), amount);\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] += amount;\\n    emit Deposit(msg.sender, tokenAddress, amount);\\n}\\n\\n/// @notice Deposit native toke of the chain and the amount is msg.value (NT stands for: native token).\\n/// @dev Note that here we assume address of native token as address(0) adn since we enter amount of native token as msg.value, there isn't any input in this function\\nfunction depositNT() external payable {\\n    tokenAddressToOwnerToBalance[address(0)][msg.sender] += msg.value;\\n    emit Deposit(msg.sender, address(0), msg.value);\\n}\\n\\n/// @notice Withdrawal of assets if amount less than balance or equal.\\n/// @dev Explain to a developer any extra details\\nfunction withdraw (address tokenAddress, uint256 amount) external nonReentrant returns(address){\\n    address from;\\n    if (tokenAddressToOwnerToBalance[tokenAddress][msg.sender] < amount) {\\n        address mainAddress = getAuthorized(msg.sender);\\n        uint256 mainAddressBalance = tokenAddressToOwnerToBalance[tokenAddress][mainAddress];\\n        require(mainAddress != address(0) &&\\n        mainAddressBalance >= amount\\n        ,\\\"Insufficient balance\\\");\\n        tokenAddressToOwnerToBalance[tokenAddress][mainAddress] -= amount;\\n        TransferHelper.safeTransfer( tokenAddress, msg.sender, _amount(amount,fee) );\\n        income[tokenAddress] += amount - _amount(amount,fee);\\n        from = mainAddress;\\n    } else {\\n        tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n        TransferHelper.safeTransfer( tokenAddress, msg.sender, _amount(amount,fee));\\n        income[tokenAddress] += amount - _amount(amount,fee);\\n        from = msg.sender;\\n    }\\n    emit Withdraw(from, tokenAddress, amount);\\n    return from;\\n}\\n\\n\\n/// @notice Withdrawal of native token of the current chain.\\n/// @dev This withdrawal is the same as the previous one but to withdraw native token we should call this function instead of the previous one.\\nfunction withdrawNT(uint256 amount) external payable nonReentrant returns(address){\\n    address from;\\n    if (tokenAddressToOwnerToBalance[address(0)][msg.sender] < amount) {\\n        address mainAddress = getAuthorized(msg.sender);\\n        uint256 mainAddressBalance = tokenAddressToOwnerToBalance[address(0)][mainAddress];\\n        require(mainAddress != address(0) &&\\n        mainAddressBalance >= amount\\n        ,\\\"Insufficient balance\\\");\\n        tokenAddressToOwnerToBalance[address(0)][mainAddress] -= amount;\\n        TransferHelper.safeTransferETH(msg.sender, _amount(amount,fee));\\n        income[address(0)] += amount - _amount(amount,fee);\\n        from = mainAddress;\\n    }\\n    else {\\n        tokenAddressToOwnerToBalance[address(0)][msg.sender] -= amount;\\n        TransferHelper.safeTransferETH(msg.sender, amount);\\n        income[address(0)] += amount - _amount(amount,fee);\\n        from = msg.sender;\\n    }\\n    emit Withdraw(from, address(0), amount);\\n    return (from);\\n}\\n\\n\\n/// @notice Transfer asset from this smart contract to another address.\\n/// @dev Since we assume that native token address = 0, iff the token address as input was 0, we should send native token using 'call'.\\nfunction externalTransfer(address tokenAddress, address to, uint256 amount) external nonReentrant{\\n    require(tokenAddressToOwnerToBalance[tokenAddress][msg.sender] >= amount, \\\"Insufficient balance\\\");\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n    if (tokenAddress == address(0)) {\\n        TransferHelper.safeTransferETH(to, _amount(amount,fee));\\n        income[address(0)] += amount - _amount(amount,fee);\\n    } else {\\n        TransferHelper.safeTransfer(tokenAddress, to, _amount(amount,fee));\\n        income[tokenAddress] += amount - _amount(amount,fee);\\n    }\\n    emit ExternallTransfer(msg.sender, to, tokenAddress, amount);\\n}\\n\\n\\n/// @notice Transfer to another address account inside contract.\\n/// @dev This function changes the balance of the sender address and 'to' address by the amount.\\nfunction transfer(address tokenAddress, address to, uint256 amount) external{\\n    tokenAddressToOwnerToBalance[tokenAddress][msg.sender] -= amount;\\n    tokenAddressToOwnerToBalance[tokenAddress][to] += (amount * 995)/1000;\\n    emit Transfer(msg.sender, to, tokenAddress, amount);\\n}\\n\\n\\n/// @notice Authorizing an address that can access to your assets.\\n/// @dev Authorized address can removed using 'removeAuthorize' function\\nfunction authorize(address authorizedAddress) external {\\n    authorizedAddressesToMainAddress[authorizedAddress]= msg.sender;\\n    emit Authorize(msg.sender, authorizedAddress);\\n}\\n\\n\\n/// @notice Remove the authorized address with the address that already authorized it.\\n/// @dev To access authorized addresses by an address, we can use relevant emited events 'event Authorize(address owner, address authorizedAddress);').\\nfunction removeAuthorize(address authorizedAddress) external {\\n    require(authorizedAddressesToMainAddress[authorizedAddress] == msg.sender,\\\"Couldn't find address\\\");\\n    authorizedAddressesToMainAddress[authorizedAddress] = address(0);\\n    emit RemoveAuthorize(msg.sender, authorizedAddress);\\n}\\n\\nfunction claimFee (address tokenAddress, uint256 amount) external onlyOwner{\\n    require(income[tokenAddress] >= amount, \\\"Bigger than income\\\");\\n    TransferHelper.safeTransfer(tokenAddress, msg.sender, amount);\\n}\\n\\n\\n// ****************************************************\\n// ****************** view functions ******************\\n// ****************************************************\\n\\n\\n\\n/// @notice Getting balance of an address for a token using both token address and user address\\n/// @dev Same as before address(0) will return balance of native token\\nfunction balance(address tokenAddress, address userAddress) public view returns (uint256) {\\n    return tokenAddressToOwnerToBalance[tokenAddress][userAddress];\\n}\\n\\n/// @notice Getting an address that authorized another address.\\n/// @dev If it returns address(0),'from' address is not authorized by any address.\\n/// @dev If this function returns address 'A', address 'from' will have access to 'A' assets.\\nfunction getAuthorized(address from) view public returns (address) {\\n    return authorizedAddressesToMainAddress[from];\\n}\\n\\n// ****************************************************\\n// ****************** pure functions ******************\\n// ****************************************************\\n\\n\\n/// @notice Explain to an end user what this does\\n/// @dev Explain to a developer any extra details\\n/// @param initalAmount amount before calculating fee\\n/// @param txFee the fee that should be deducated(this amount is amount in thousandth)\\nfunction _amount(uint256 initalAmount ,uint txFee) internal pure returns(uint256) {\\n    return (initalAmount * (1000 - txFee)) / 1000;\\n}\\n\\n\\n}\",\"keccak256\":\"0xf9b7eee6c762e9454f8b04ffcc01d5201055174b677d05161b70017ce34f1af0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200287838038062002878833981810160405281019062000037919062000182565b620000576200004b6200007360201b60201c565b6200007b60201b60201c565b600180819055508060ff1660808160ff168152505050620001b4565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600060ff82169050919050565b6200015c8162000144565b81146200016857600080fd5b50565b6000815190506200017c8162000151565b92915050565b6000602082840312156200019b576200019a6200013f565b5b6000620001ab848285016200016b565b91505092915050565b60805161266262000216600039600081816106490152818161067b015281816107af0152818161119d015281816111cf015281816112fe01528181611330015281816115a0015281816115d201528181611669015261169b01526126626000f3fe6080604052600436106100dd5760003560e01c8063bee69a5f1161007f578063dda4079711610059578063dda407971461027c578063f2fde38b146102a5578063f3fef3a3146102ce578063f71c559c1461030b576100dd565b8063bee69a5f1461020c578063c731fc7b14610235578063cb57e3f614610272576100dd565b80638da5cb5b116100bb5780638da5cb5b14610152578063b203bb991461017d578063b6a5d7de146101ba578063beabacc8146101e3576100dd565b806347e7ef24146100e257806362ab58161461010b578063715018a61461013b575b600080fd5b3480156100ee57600080fd5b5061010960048036038101906101049190611d85565b610334565b005b61012560048036038101906101209190611dc5565b610412565b6040516101329190611e01565b60405180910390f35b34801561014757600080fd5b50610150610887565b005b34801561015e57600080fd5b5061016761089b565b6040516101749190611e01565b60405180910390f35b34801561018957600080fd5b506101a4600480360381019061019f9190611e1c565b6108c4565b6040516101b19190611e6b565b60405180910390f35b3480156101c657600080fd5b506101e160048036038101906101dc9190611e86565b61094b565b005b3480156101ef57600080fd5b5061020a60048036038101906102059190611eb3565b610a05565b005b34801561021857600080fd5b50610233600480360381019061022e9190611e86565b610b87565b005b34801561024157600080fd5b5061025c60048036038101906102579190611e86565b610d0f565b6040516102699190611e01565b60405180910390f35b61027a610d78565b005b34801561028857600080fd5b506102a3600480360381019061029e9190611d85565b610e49565b005b3480156102b157600080fd5b506102cc60048036038101906102c79190611e86565b610ee2565b005b3480156102da57600080fd5b506102f560048036038101906102f09190611d85565b610f65565b6040516103029190611e01565b60405180910390f35b34801561031757600080fd5b50610332600480360381019061032d9190611eb3565b611408565b005b6103408233308461176d565b80600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546103cc9190611f35565b925050819055507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6233838360405161040693929190611f69565b60405180910390a15050565b600061041c6118c5565b600082600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561070c5760006104ad33610d0f565b90506000600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415801561056d5750848110155b6105ac576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105a390611ffd565b60405180910390fd5b84600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610638919061201d565b9250508190555061067533610670877f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b611944565b6106a2857f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b856106ad919061201d565b600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106fb9190611f35565b92505081905550819250505061083a565b82600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610798919061201d565b925050819055506107a93384611944565b6107d6837f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b836107e1919061201d565b600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461082f9190611f35565b925050819055503390505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8160008560405161086e93929190611f69565b60405180910390a180915050610882611a44565b919050565b61088f611a4d565b6108996000611acb565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b33600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f30468de898bda644e26bab66e5a2241a3aa6aaf527257f5ca54e0f65204ba14a33826040516109fa929190612051565b60405180910390a150565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a91919061201d565b925050819055506103e86103e382610aa9919061207a565b610ab391906120eb565b600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b3e9190611f35565b925050819055507fd1398bee19313d6bf672ccb116e51f4a1a947e91c757907f51fbb5b5e56c698f33838584604051610b7a949392919061211c565b60405180910390a1505050565b3373ffffffffffffffffffffffffffffffffffffffff16600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610c54576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c4b906121ad565b60405180910390fd5b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507fdb2988532ebc9f32182a8c850fcecf694c6b0f536f5366ea38129372b37a16253382604051610d04929190612051565b60405180910390a150565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b34600360008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610e049190611f35565b925050819055507f5548c837ab068cf56a2c2479df0882a4922fd203edb7517321831d95078c5f6233600034604051610e3f93929190611f69565b60405180910390a1565b610e51611a4d565b80600460008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610ed3576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610eca90612219565b60405180910390fd5b610ede823383611b8f565b5050565b610eea611a4d565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610f59576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f50906122ab565b60405180910390fd5b610f6281611acb565b50565b6000610f6f6118c5565b600082600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561126057600061100033610d0f565b90506000600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141580156110c05750848110155b6110ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016110f690611ffd565b60405180910390fd5b84600360008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461118b919061201d565b925050819055506111c986336111c4887f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b611b8f565b6111f6857f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b85611201919061201d565b600460008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461124f9190611f35565b9250508190555081925050506113bb565b82600360008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546112ec919061201d565b9250508190555061132a8433611325867f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b611b8f565b611357837f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b83611362919061201d565b600460008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546113b09190611f35565b925050819055503390505b7f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8185856040516113ee93929190611f69565b60405180910390a180915050611402611a44565b92915050565b6114106118c5565b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156114cf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114c690611ffd565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461155b919061201d565b92505081905550600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361165e576115cc826115c7837f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b611944565b6115f9817f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b81611604919061201d565b600460008073ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546116529190611f35565b92505081905550611723565b6116958383611690847f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b611b8f565b6116c2817f000000000000000000000000000000000000000000000000000000000000000060ff16611914565b816116cd919061201d565b600460008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461171b9190611f35565b925050819055505b7f761be41d823dcb0e71938ae12866b0f1960ba544204a70fa8c165569c0ea078333838584604051611758949392919061211c565b60405180910390a1611768611a44565b505050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016117a493929190611f69565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505060405161180e919061233c565b6000604051808303816000865af19150503d806000811461184b576040519150601f19603f3d011682016040523d82523d6000602084013e611850565b606091505b509150915081801561187e575060008151148061187d57508080602001905181019061187c919061238b565b5b5b6118bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118b490612404565b60405180910390fd5b505050505050565b60026001540361190a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161190190612470565b60405180910390fd5b6002600181905550565b60006103e8826103e8611927919061201d565b84611932919061207a565b61193c91906120eb565b905092915050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff81111561197957611978612490565b5b6040519080825280601f01601f1916602001820160405280156119ab5781602001600182028036833780820191505090505b506040516119b9919061233c565b60006040518083038185875af1925050503d80600081146119f6576040519150601f19603f3d011682016040523d82523d6000602084013e6119fb565b606091505b5050905080611a3f576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a369061250b565b60405180910390fd5b505050565b60018081905550565b611a55611ce4565b73ffffffffffffffffffffffffffffffffffffffff16611a7361089b565b73ffffffffffffffffffffffffffffffffffffffff1614611ac9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ac090612577565b60405180910390fd5b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401611bc4929190612597565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611c2e919061233c565b6000604051808303816000865af19150503d8060008114611c6b576040519150601f19603f3d011682016040523d82523d6000602084013e611c70565b606091505b5091509150818015611c9e5750600081511480611c9d575080806020019051810190611c9c919061238b565b5b5b611cdd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cd49061260c565b60405180910390fd5b5050505050565b600033905090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000611d1c82611cf1565b9050919050565b611d2c81611d11565b8114611d3757600080fd5b50565b600081359050611d4981611d23565b92915050565b6000819050919050565b611d6281611d4f565b8114611d6d57600080fd5b50565b600081359050611d7f81611d59565b92915050565b60008060408385031215611d9c57611d9b611cec565b5b6000611daa85828601611d3a565b9250506020611dbb85828601611d70565b9150509250929050565b600060208284031215611ddb57611dda611cec565b5b6000611de984828501611d70565b91505092915050565b611dfb81611d11565b82525050565b6000602082019050611e166000830184611df2565b92915050565b60008060408385031215611e3357611e32611cec565b5b6000611e4185828601611d3a565b9250506020611e5285828601611d3a565b9150509250929050565b611e6581611d4f565b82525050565b6000602082019050611e806000830184611e5c565b92915050565b600060208284031215611e9c57611e9b611cec565b5b6000611eaa84828501611d3a565b91505092915050565b600080600060608486031215611ecc57611ecb611cec565b5b6000611eda86828701611d3a565b9350506020611eeb86828701611d3a565b9250506040611efc86828701611d70565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000611f4082611d4f565b9150611f4b83611d4f565b9250828201905080821115611f6357611f62611f06565b5b92915050565b6000606082019050611f7e6000830186611df2565b611f8b6020830185611df2565b611f986040830184611e5c565b949350505050565b600082825260208201905092915050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000611fe7601483611fa0565b9150611ff282611fb1565b602082019050919050565b6000602082019050818103600083015261201681611fda565b9050919050565b600061202882611d4f565b915061203383611d4f565b925082820390508181111561204b5761204a611f06565b5b92915050565b60006040820190506120666000830185611df2565b6120736020830184611df2565b9392505050565b600061208582611d4f565b915061209083611d4f565b925082820261209e81611d4f565b915082820484148315176120b5576120b4611f06565b5b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006120f682611d4f565b915061210183611d4f565b925082612111576121106120bc565b5b828204905092915050565b60006080820190506121316000830187611df2565b61213e6020830186611df2565b61214b6040830185611df2565b6121586060830184611e5c565b95945050505050565b7f436f756c646e27742066696e6420616464726573730000000000000000000000600082015250565b6000612197601583611fa0565b91506121a282612161565b602082019050919050565b600060208201905081810360008301526121c68161218a565b9050919050565b7f426967676572207468616e20696e636f6d650000000000000000000000000000600082015250565b6000612203601283611fa0565b915061220e826121cd565b602082019050919050565b60006020820190508181036000830152612232816121f6565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b6000612295602683611fa0565b91506122a082612239565b604082019050919050565b600060208201905081810360008301526122c481612288565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156122ff5780820151818401526020810190506122e4565b60008484015250505050565b6000612316826122cb565b61232081856122d6565b93506123308185602086016122e1565b80840191505092915050565b6000612348828461230b565b915081905092915050565b60008115159050919050565b61236881612353565b811461237357600080fd5b50565b6000815190506123858161235f565b92915050565b6000602082840312156123a1576123a0611cec565b5b60006123af84828501612376565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b60006123ee600383611fa0565b91506123f9826123b8565b602082019050919050565b6000602082019050818103600083015261241d816123e1565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061245a601f83611fa0565b915061246582612424565b602082019050919050565b600060208201905081810360008301526124898161244d565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f5354450000000000000000000000000000000000000000000000000000000000600082015250565b60006124f5600383611fa0565b9150612500826124bf565b602082019050919050565b60006020820190508181036000830152612524816124e8565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000612561602083611fa0565b915061256c8261252b565b602082019050919050565b6000602082019050818103600083015261259081612554565b9050919050565b60006040820190506125ac6000830185611df2565b6125b96020830184611e5c565b9392505050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b60006125f6600283611fa0565b9150612601826125c0565b602082019050919050565b60006020820190508181036000830152612625816125e9565b905091905056fea26469706673582212201ba87a0b767add8801828058ca4db94d247f97d63f9bebd2c38754acc0d0787664736f6c63430008110033",
  "deployedBytecode": "",
  "devdoc": {
    "author": "Alireza Haghshenas Github: alireza1691",
    "events": {
      "Authorize(address,address)": {
        "params": {
          "authorizedAddress": "is the address that authorized an address."
        }
      },
      "Deposit(address,address,uint256)": {
        "details": "Explain to a developer any extra details",
        "params": {
          "amount": "is amount of deposited token.",
          "token": "is address of ERC20 smart contract of the token.",
          "user": "is address of user who deposited."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "authorize(address)": {
        "details": "Authorized address can removed using 'removeAuthorize' function"
      },
      "balance(address,address)": {
        "details": "Same as before address(0) will return balance of native token"
      },
      "deposit(address,uint256)": {
        "details": "Before calling this function, to transfer ERC20 token from user to address(this) we need to approve the amount in ERC20 smart contract as requirement of transferFrom function.",
        "params": {
          "amount": "is amount of ERC20 token.",
          "tokenAddress": "is address of ERC20 token contract."
        }
      },
      "depositNT()": {
        "details": "Note that here we assume address of native token as address(0) adn since we enter amount of native token as msg.value, there isn't any input in this function"
      },
      "externalTransfer(address,address,uint256)": {
        "details": "Since we assume that native token address = 0, iff the token address as input was 0, we should send native token using 'call'."
      },
      "getAuthorized(address)": {
        "details": "If it returns address(0),'from' address is not authorized by any address.If this function returns address 'A', address 'from' will have access to 'A' assets."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "removeAuthorize(address)": {
        "details": "To access authorized addresses by an address, we can use relevant emited events 'event Authorize(address owner, address authorizedAddress);')."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transfer(address,address,uint256)": {
        "details": "This function changes the balance of the sender address and 'to' address by the amount."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "withdraw(address,uint256)": {
        "details": "Explain to a developer any extra details"
      },
      "withdrawNT(uint256)": {
        "details": "This withdrawal is the same as the previous one but to withdraw native token we should call this function instead of the previous one."
      }
    },
    "title": "A smart contract that works as a treasury to keep user assets safe.",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,address,uint256)": {
        "notice": "Explain to an end user what this does"
      }
    },
    "kind": "user",
    "methods": {
      "authorize(address)": {
        "notice": "Authorizing an address that can access to your assets."
      },
      "balance(address,address)": {
        "notice": "Getting balance of an address for a token using both token address and user address"
      },
      "deposit(address,uint256)": {
        "notice": "Depist ERC20 token into contract, thereby increasing balance of the address who deposited."
      },
      "depositNT()": {
        "notice": "Deposit native toke of the chain and the amount is msg.value (NT stands for: native token)."
      },
      "externalTransfer(address,address,uint256)": {
        "notice": "Transfer asset from this smart contract to another address."
      },
      "getAuthorized(address)": {
        "notice": "Getting an address that authorized another address."
      },
      "removeAuthorize(address)": {
        "notice": "Remove the authorized address with the address that already authorized it."
      },
      "transfer(address,address,uint256)": {
        "notice": "Transfer to another address account inside contract."
      },
      "withdraw(address,uint256)": {
        "notice": "Withdrawal of assets if amount less than balance or equal."
      },
      "withdrawNT(uint256)": {
        "notice": "Withdrawal of native token of the current chain."
      }
    },
    "notice": "This smart contract was written as a first version to test and develop and its not recommended to deploy on mainnet chains.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 200,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 6450,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "authorizedAddressesToMainAddress",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 6456,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "tokenAddressToOwnerToBalance",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 6460,
        "contract": "contracts/SafeTreasury.sol:SafeTreasury",
        "label": "income",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}