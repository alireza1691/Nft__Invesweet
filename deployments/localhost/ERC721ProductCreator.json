{
  "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "ERC721Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "createERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x4b08de520c45ebe7d4ef0bed9b81e274b0d97202947fbeb5f7dd8a9d7725eeab",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
    "transactionIndex": 0,
    "gasUsed": "4169633",
    "logsBloom": "0x
    "blockHash": "0x8df509f52f88a738d81ac20a37c079871c07b6e3b5ffc8a1be47e0ac618cddb7",
    "transactionHash": "0x4b08de520c45ebe7d4ef0bed9b81e274b0d97202947fbeb5f7dd8a9d7725eeab",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 3,
        "transactionHash": "0x4b08de520c45ebe7d4ef0bed9b81e274b0d97202947fbeb5f7dd8a9d7725eeab",
        "address": "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8df509f52f88a738d81ac20a37c079871c07b6e3b5ffc8a1be47e0ac618cddb7"
      }
    ],
    "blockNumber": 3,
    "cumulativeGasUsed": "4169633",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aebcd8aa1dc15f2af2c21ac7c34a7420",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"ERC721Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721ProductCreator.sol\":\"ERC721ProductCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC721Product.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\n/// @title This contract is ERC721 based contract which mints NFTs instead of user assets. when NFT burns, assets will be withdrawable for the user who burns.\\n/// @author Alireza Haghshenas\\n/// @notice This contract deploys by invesweet creator contract.\\n/// @dev Mint function should call by creator contract, not directly in this contract\\n\\n// import {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n\\n// ******************************************************************\\n// ******************************************************************\\n// **************This contract not developed yet*********************\\n// ******************************************************************\\n// ******************************************************************\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\nerror ERC721Metadata__URI_QueryFor_NonExistentToken();\\n\\ncontract ERC721Product is ERC721URIStorage{\\n\\n    // Events\\n    event Tokenize(address from,address token, uint256 amount, uint256 tokenId);\\n    event Withdraw(address user, address contractAddress, uint256 value);\\n\\n    // Variables\\n    address private owner;\\n    uint256 private counterTokenID = 1;\\n    uint256 private productCounter = 1;\\n    address payable private creatorContract;\\n    uint256 private sumMintFees;\\n\\n\\n    constructor (string memory name,string memory symbol, address contractOwner) ERC721(name, symbol){\\n        owner = contractOwner;\\n        creatorContract = payable(msg.sender);\\n    }\\n\\n    struct Product {\\n        string name;\\n        uint256 price;\\n        string imgUrl;\\n        uint256 maxSupp;\\n    }\\n    // Product[] products;\\n    mapping (uint256 => Product) private indexToProduct;\\n    mapping (uint256 => Product) private tokenIdToProduct;\\n\\n    // modifiers\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator {\\n        require(msg.sender == creatorContract, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function addProduct(string memory pName, string memory pImgUrl, uint256 pPrice, uint256 pMaxSupply) public onlyOwner onlyCreator{\\n        indexToProduct[productCounter] = Product(pName, pPrice, pImgUrl, pMaxSupply);\\n        productCounter ++;\\n    }\\n\\n    function purchase(uint256 productCounterIndex)  external payable{\\n        Product memory pdt = indexToProduct[productCounterIndex];\\n        require(pdt.price <= msg.value, \\\"Insufficient value\\\");\\n        _safeMint(msg.sender, counterTokenID);\\n        tokenIdToProduct[counterTokenID] = pdt;\\n        counterTokenID ++;\\n    }\\n\\n    function claimFee() external onlyOwner{\\n        \\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override virtual returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert ERC721Metadata__URI_QueryFor_NonExistentToken();\\n        }\\n        Product memory pdt = indexToProduct[tokenId];\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseURI(),\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"token name\\\":\\\"',\\n                                pdt.name,\\n                                '\\\", \\\"image URL\\\":\\\"',\\n                                pdt.imgUrl,\\n                                '\\\", \\\"max supply\\\":\\\"',\\n                                pdt.maxSupp,\\n                                '\\\", \\\"price\\\":\\\"',\\n                                pdt.price,\\n                                '\\\",\\\"description\\\": something\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n\\n \\n}\",\"keccak256\":\"0x7d7a46d4c6f545dee60e9a3b4324ae48a2410166e3199cafe7f6dcfe4c25c4f5\",\"license\":\"MIT\"},\"contracts/ERC721ProductCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// import \\\"./ERC721Upgreadable.sol\\\";\\nimport \\\"./ERC721Product.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"./Storage.sol\\\";\\n\\n\\n\\n/*  WHAT REMAINED:\\n\\n    add eth price\\n    use specific price if value less than 1$\\n    move variables into library\\n    add proxy\\n\\n\\n*/\\n\\n\\n\\n\\ncontract ERC721ProductCreator is Ownable {\\n    \\n    event ERC721Create(address indexed contractAddress, address indexed owner, string symbol);\\n\\n    address private s_owner;\\n    uint256 private deployCost;\\n    uint256 private mintFee;\\n    uint256 private withdrawalFee;\\n\\n    mapping (address => uint256) private balances;\\n    mapping (address => address[]) private addressToContracts;\\n    // mapping (address => address) private contractToOwner;\\n    constructor() {\\n        s_owner = msg.sender;\\n    }\\n\\n    // this func will remove after moving variables into library\\n    function setFee (uint256 index, uint256 feeAmount) external onlyOwner {\\n        if (index == 0 ) {\\n            deployCost = feeAmount;\\n        }\\n        if (index == 1) {\\n            mintFee = feeAmount;\\n        }\\n        if (index == 2) {\\n            withdrawalFee = feeAmount;\\n        } \\n         \\n    }\\n\\n    function createERC721(string memory name, string memory symbol) payable external returns(address) {\\n        require(msg.value >= deployCost, \\\"create requires fee\\\");\\n        ERC721Product newNft = new ERC721Product(name, symbol , msg.sender);\\n        emit ERC721Create(address(newNft), msg.sender, symbol);\\n        // contractToOwner[address(newNft)] = msg.sender;\\n        return address(newNft);\\n    }\\n\\n    function withdraw(uint256 amount) external payable onlyOwner{\\n        if (amount <= address(this).balance) {\\n            (bool ok,) = _msgSender().call{value: amount }(\\\"\\\");\\n            require(ok,\\\"Call failed\\\");\\n        }\\n            \\n    }\\n    \\n        // Getter funcs:\\n    function getUserContracts(address user) external view returns(address[] memory){\\n        return addressToContracts[user];\\n    }\\n\\n    function balance() external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getUserBalance (address who) external view returns(uint256) {\\n        return balances[who];\\n    }\\n\\n \\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x979b4c1bfdf10dec843b181eea72aed8bf096e364e4c1ee2665f33896c908231\",\"license\":\"MIT\"},\"contracts/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// ****************************************************\\n// ********************** Imports **********************\\n// ****************************************************\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0xd45e9e643d1a457e087d86bf275276a094fa2e9828b1da8a27d221ab6433065b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261007360201b60201c565b61007b60201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6149ea8061014e6000396000f3fe608060405260043610620000975760003560e01c8063586fd0c51162000061578063586fd0c5146200017a578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632e1a7d4d14620000a457806334c925f014620000c457806347734892146200010857806352f7c988146200014c576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc919062000801565b62000258565b005b348015620000d157600080fd5b50620000f06004803603810190620000ea919062000898565b6200032b565b604051620000ff919062000998565b60405180910390f35b3480156200011557600080fd5b506200013460048036038101906200012e919062000898565b620003fa565b604051620001439190620009cd565b60405180910390f35b3480156200015957600080fd5b50620001786004803603810190620001729190620009ea565b62000443565b005b62000198600480360381019062000192919062000b93565b62000484565b604051620001a7919062000c29565b60405180910390f35b348015620001bd57600080fd5b50620001c862000580565b005b348015620001d757600080fd5b50620001e262000598565b604051620001f1919062000c29565b60405180910390f35b3480156200020757600080fd5b5062000212620005c1565b604051620002219190620009cd565b60405180910390f35b3480156200023757600080fd5b5062000256600480360381019062000250919062000898565b620005c9565b005b6200026262000653565b4781116200032857600062000276620006d8565b73ffffffffffffffffffffffffffffffffffffffff16826040516200029b9062000c7b565b60006040518083038185875af1925050503d8060008114620002da576040519150601f19603f3d011682016040523d82523d6000602084013e620002df565b606091505b505090508062000326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031d9062000cf3565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620003ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003a3575b50505050509050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6200044d62000653565b600082036200045e57806002819055505b600182036200046f57806003819055505b600282036200048057806004819055505b5050565b6000600254341015620004ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004c59062000d65565b60405180910390fd5b6000838333604051620004e190620007a4565b620004ef9392919062000dff565b604051809103906000f0801580156200050c573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b40602856040516200056e919062000e4a565b60405180910390a38091505092915050565b6200058a62000653565b620005966000620006e0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005d362000653565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000645576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063c9062000ee4565b60405180910390fd5b6200065081620006e0565b50565b6200065d620006d8565b73ffffffffffffffffffffffffffffffffffffffff166200067d62000598565b73ffffffffffffffffffffffffffffffffffffffff1614620006d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006cd9062000f56565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613a3c8062000f7983390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620007db81620007c6565b8114620007e757600080fd5b50565b600081359050620007fb81620007d0565b92915050565b6000602082840312156200081a5762000819620007bc565b5b60006200082a84828501620007ea565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008608262000833565b9050919050565b620008728162000853565b81146200087e57600080fd5b50565b600081359050620008928162000867565b92915050565b600060208284031215620008b157620008b0620007bc565b5b6000620008c18482850162000881565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620009018162000853565b82525050565b6000620009158383620008f6565b60208301905092915050565b6000602082019050919050565b60006200093b82620008ca565b620009478185620008d5565b93506200095483620008e6565b8060005b838110156200098b5781516200096f888262000907565b97506200097c8362000921565b92505060018101905062000958565b5085935050505092915050565b60006020820190508181036000830152620009b481846200092e565b905092915050565b620009c781620007c6565b82525050565b6000602082019050620009e46000830184620009bc565b92915050565b6000806040838503121562000a045762000a03620007bc565b5b600062000a1485828601620007ea565b925050602062000a2785828601620007ea565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a868262000a3b565b810181811067ffffffffffffffff8211171562000aa85762000aa762000a4c565b5b80604052505050565b600062000abd620007b2565b905062000acb828262000a7b565b919050565b600067ffffffffffffffff82111562000aee5762000aed62000a4c565b5b62000af98262000a3b565b9050602081019050919050565b82818337600083830152505050565b600062000b2c62000b268462000ad0565b62000ab1565b90508281526020810184848401111562000b4b5762000b4a62000a36565b5b62000b5884828562000b06565b509392505050565b600082601f83011262000b785762000b7762000a31565b5b813562000b8a84826020860162000b15565b91505092915050565b6000806040838503121562000bad5762000bac620007bc565b5b600083013567ffffffffffffffff81111562000bce5762000bcd620007c1565b5b62000bdc8582860162000b60565b925050602083013567ffffffffffffffff81111562000c005762000bff620007c1565b5b62000c0e8582860162000b60565b9150509250929050565b62000c238162000853565b82525050565b600060208201905062000c40600083018462000c18565b92915050565b600081905092915050565b50565b600062000c6360008362000c46565b915062000c708262000c51565b600082019050919050565b600062000c888262000c54565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000cdb600b8362000c92565b915062000ce88262000ca3565b602082019050919050565b6000602082019050818103600083015262000d0e8162000ccc565b9050919050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000d4d60138362000c92565b915062000d5a8262000d15565b602082019050919050565b6000602082019050818103600083015262000d808162000d3e565b9050919050565b600081519050919050565b60005b8381101562000db257808201518184015260208101905062000d95565b60008484015250505050565b600062000dcb8262000d87565b62000dd7818562000c92565b935062000de981856020860162000d92565b62000df48162000a3b565b840191505092915050565b6000606082019050818103600083015262000e1b818662000dbe565b9050818103602083015262000e31818562000dbe565b905062000e42604083018462000c18565b949350505050565b6000602082019050818103600083015262000e66818462000dbe565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000ecc60268362000c92565b915062000ed98262000e6e565b604082019050919050565b6000602082019050818103600083015262000eff8162000ebd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000f3e60208362000c92565b915062000f4b8262000f06565b602082019050919050565b6000602082019050818103600083015262000f718162000f2f565b905091905056fe6080604052600160085560016009553480156200001b57600080fd5b5060405162003a3c38038062003a3c8339818101604052810190620000419190620002ec565b82828160009081620000549190620005d1565b508060019081620000669190620005d1565b50505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006b8565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200015d8262000112565b810181811067ffffffffffffffff821117156200017f576200017e62000123565b5b80604052505050565b600062000194620000f4565b9050620001a2828262000152565b919050565b600067ffffffffffffffff821115620001c557620001c462000123565b5b620001d08262000112565b9050602081019050919050565b60005b83811015620001fd578082015181840152602081019050620001e0565b60008484015250505050565b6000620002206200021a84620001a7565b62000188565b9050828152602081018484840111156200023f576200023e6200010d565b5b6200024c848285620001dd565b509392505050565b600082601f8301126200026c576200026b62000108565b5b81516200027e84826020860162000209565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b48262000287565b9050919050565b620002c681620002a7565b8114620002d257600080fd5b50565b600081519050620002e681620002bb565b92915050565b600080600060608486031215620003085762000307620000fe565b5b600084015167ffffffffffffffff81111562000329576200032862000103565b5b620003378682870162000254565b935050602084015167ffffffffffffffff8111156200035b576200035a62000103565b5b620003698682870162000254565b92505060406200037c86828701620002d5565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d957607f821691505b602082108103620003ef57620003ee62000391565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041a565b6200046586836200041a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b2620004ac620004a6846200047d565b62000487565b6200047d565b9050919050565b6000819050919050565b620004ce8362000491565b620004e6620004dd82620004b9565b84845462000427565b825550505050565b600090565b620004fd620004ee565b6200050a818484620004c3565b505050565b5b81811015620005325762000526600082620004f3565b60018101905062000510565b5050565b601f82111562000581576200054b81620003f5565b62000556846200040a565b8101602085101562000566578190505b6200057e62000575856200040a565b8301826200050f565b50505b505050565b600082821c905092915050565b6000620005a66000198460080262000586565b1980831691505092915050565b6000620005c1838362000593565b9150826002028217905092915050565b620005dc8262000386565b67ffffffffffffffff811115620005f857620005f762000123565b5b620006048254620003c0565b6200061182828562000536565b600060209050601f83116001811462000649576000841562000634578287015190505b620006408582620005b3565b865550620006b0565b601f1984166200065986620003f5565b60005b8281101562000683578489015182556001820191506020850194506020810190506200065c565b86831015620006a357848901516200069f601f89168262000593565b8355505b6001600288020188555050505b505050505050565b61337480620006c86000396000f3fe6080604052600436106100f35760003560e01c806370a082311161008a578063b88d4fde11610059578063b88d4fde14610326578063c87b56dd1461034f578063e985e9c51461038c578063efef39a1146103c9576100f3565b806370a082311461027e57806395d89b41146102bb57806399d32fc4146102e6578063a22cb465146102fd576100f3565b8063095ea7b3116100c6578063095ea7b3146101c657806323b872dd146101ef57806342842e0e146102185780636352211e14610241576100f3565b806301cecd14146100f857806301ffc9a71461012157806306fdde031461015e578063081812fc14610189575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611f86565b6103e5565b005b34801561012d57600080fd5b506101486004803603810190610143919061207d565b61059c565b60405161015591906120c5565b60405180910390f35b34801561016a57600080fd5b506101736105fd565b604051610180919061215f565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190612181565b61068f565b6040516101bd91906121ef565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190612236565b6106d5565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612276565b6107ec565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612276565b61084c565b005b34801561024d57600080fd5b5061026860048036038101906102639190612181565b61086c565b60405161027591906121ef565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a091906122c9565b6108f2565b6040516102b29190612305565b60405180910390f35b3480156102c757600080fd5b506102d06109a9565b6040516102dd919061215f565b60405180910390f35b3480156102f257600080fd5b506102fb610a3b565b005b34801561030957600080fd5b50610324600480360381019061031f919061234c565b610acd565b005b34801561033257600080fd5b5061034d6004803603810190610348919061242d565b610ae3565b005b34801561035b57600080fd5b5061037660048036038101906103719190612181565b610b45565b604051610383919061215f565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906124b0565b610d4e565b6040516103c091906120c5565b60405180910390f35b6103e360048036038101906103de9190612181565b610de2565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c9061253c565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc9061253c565b60405180910390fd5b604051806080016040528085815260200183815260200184815260200182815250600c6000600954815260200190815260200160002060008201518160000190816105509190612768565b506020820151816001015560408201518160020190816105709190612768565b50606082015181600301559050506009600081548092919061059190612869565b919050555050505050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f657506105f582611004565b5b9050919050565b60606000805461060c9061258b565b80601f01602080910402602001604051908101604052809291908181526020018280546106389061258b565b80156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b5050505050905090565b600061069a826110e6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106e08261086c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074790612923565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661076f611131565b73ffffffffffffffffffffffffffffffffffffffff16148061079e575061079d81610798611131565b610d4e565b5b6107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d4906129b5565b60405180910390fd5b6107e78383611139565b505050565b6107fd6107f7611131565b826111f2565b61083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390612a47565b60405180910390fd5b610847838383611287565b505050565b61086783838360405180602001604052806000815250610ae3565b505050565b60008061087883611580565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e090612ab3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990612b45565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109b89061258b565b80601f01602080910402602001604051908101604052809291908181526020018280546109e49061258b565b8015610a315780601f10610a0657610100808354040283529160200191610a31565b820191906000526020600020905b815481529060010190602001808311610a1457829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac29061253c565b60405180910390fd5b565b610adf610ad8611131565b83836115bd565b5050565b610af4610aee611131565b836111f2565b610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a90612a47565b60405180910390fd5b610b3f84848484611729565b50505050565b6060610b5082611785565b610b86576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c6000848152602001908152602001600020604051806080016040529081600082018054610bb69061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610be29061258b565b8015610c2f5780601f10610c0457610100808354040283529160200191610c2f565b820191906000526020600020905b815481529060010190602001808311610c1257829003601f168201915b5050505050815260200160018201548152602001600282018054610c529061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7e9061258b565b8015610ccb5780601f10610ca057610100808354040283529160200191610ccb565b820191906000526020600020905b815481529060010190602001808311610cae57829003601f168201915b505050505081526020016003820154815250509050610ce86117c6565b610d268260000151836040015184606001518560200151604051602001610d129493929190612d3e565b6040516020818303038152906040526117dd565b604051602001610d37929190612dbb565b604051602081830303815290604052915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600c6000838152602001908152602001600020604051806080016040529081600082018054610e129061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3e9061258b565b8015610e8b5780601f10610e6057610100808354040283529160200191610e8b565b820191906000526020600020905b815481529060010190602001808311610e6e57829003601f168201915b5050505050815260200160018201548152602001600282018054610eae9061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610eda9061258b565b8015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b5050505050815260200160038201548152505090503481602001511115610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612e2b565b60405180910390fd5b610f8f33600854611940565b80600d600060085481526020019081526020016000206000820151816000019081610fba9190612768565b50602082015181600101556040820151816002019081610fda9190612768565b506060820151816003015590505060086000815480929190610ffb90612869565b91905055505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110cf57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110df57506110de8261195e565b5b9050919050565b6110ef81611785565b61112e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112590612ab3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111ac8361086c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111fe8361086c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611240575061123f8185610d4e565b5b8061127e57508373ffffffffffffffffffffffffffffffffffffffff166112668461068f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112a78261086c565b73ffffffffffffffffffffffffffffffffffffffff16146112fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f490612ebd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390612f4f565b60405180910390fd5b61137983838360016119c8565b8273ffffffffffffffffffffffffffffffffffffffff166113998261086c565b73ffffffffffffffffffffffffffffffffffffffff16146113ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e690612ebd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461157b83838360016119ce565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162290612fbb565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171c91906120c5565b60405180910390a3505050565b611734848484611287565b611740848484846119d4565b61177f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117769061304d565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166117a783611580565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060405180602001604052806000815250905090565b606060008251036117ff5760405180602001604052806000815250905061193b565b60006040518060600160405280604081526020016132ff604091399050600060036002855161182e919061306d565b61183891906130d0565b60046118449190613101565b67ffffffffffffffff81111561185d5761185c611e25565b5b6040519080825280601f01601f19166020018201604052801561188f5781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156118fb576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506118a0565b5050600386510660018114611917576002811461192a57611932565b603d6001830353603d6002830353611932565b603d60018303535b50505080925050505b919050565b61195a828260405180602001604052806000815250611b5b565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b60006119f58473ffffffffffffffffffffffffffffffffffffffff16611bb6565b15611b4e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1e611131565b8786866040518563ffffffff1660e01b8152600401611a409493929190613198565b6020604051808303816000875af1925050508015611a7c57506040513d601f19601f82011682018060405250810190611a7991906131f9565b60015b611afe573d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b506000815103611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed9061304d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b53565b600190505b949350505050565b611b658383611bd9565b611b7260008484846119d4565b611bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba89061304d565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3f90613272565b60405180910390fd5b611c5181611785565b15611c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c88906132de565b60405180910390fd5b611c9f6000838360016119c8565b611ca881611785565b15611ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdf906132de565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611df26000838360016119ce565b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e5d82611e14565b810181811067ffffffffffffffff82111715611e7c57611e7b611e25565b5b80604052505050565b6000611e8f611df6565b9050611e9b8282611e54565b919050565b600067ffffffffffffffff821115611ebb57611eba611e25565b5b611ec482611e14565b9050602081019050919050565b82818337600083830152505050565b6000611ef3611eee84611ea0565b611e85565b905082815260208101848484011115611f0f57611f0e611e0f565b5b611f1a848285611ed1565b509392505050565b600082601f830112611f3757611f36611e0a565b5b8135611f47848260208601611ee0565b91505092915050565b6000819050919050565b611f6381611f50565b8114611f6e57600080fd5b50565b600081359050611f8081611f5a565b92915050565b60008060008060808587031215611fa057611f9f611e00565b5b600085013567ffffffffffffffff811115611fbe57611fbd611e05565b5b611fca87828801611f22565b945050602085013567ffffffffffffffff811115611feb57611fea611e05565b5b611ff787828801611f22565b935050604061200887828801611f71565b925050606061201987828801611f71565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61205a81612025565b811461206557600080fd5b50565b60008135905061207781612051565b92915050565b60006020828403121561209357612092611e00565b5b60006120a184828501612068565b91505092915050565b60008115159050919050565b6120bf816120aa565b82525050565b60006020820190506120da60008301846120b6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561211a5780820151818401526020810190506120ff565b60008484015250505050565b6000612131826120e0565b61213b81856120eb565b935061214b8185602086016120fc565b61215481611e14565b840191505092915050565b600060208201905081810360008301526121798184612126565b905092915050565b60006020828403121561219757612196611e00565b5b60006121a584828501611f71565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121d9826121ae565b9050919050565b6121e9816121ce565b82525050565b600060208201905061220460008301846121e0565b92915050565b612213816121ce565b811461221e57600080fd5b50565b6000813590506122308161220a565b92915050565b6000806040838503121561224d5761224c611e00565b5b600061225b85828601612221565b925050602061226c85828601611f71565b9150509250929050565b60008060006060848603121561228f5761228e611e00565b5b600061229d86828701612221565b93505060206122ae86828701612221565b92505060406122bf86828701611f71565b9150509250925092565b6000602082840312156122df576122de611e00565b5b60006122ed84828501612221565b91505092915050565b6122ff81611f50565b82525050565b600060208201905061231a60008301846122f6565b92915050565b612329816120aa565b811461233457600080fd5b50565b60008135905061234681612320565b92915050565b6000806040838503121561236357612362611e00565b5b600061237185828601612221565b925050602061238285828601612337565b9150509250929050565b600067ffffffffffffffff8211156123a7576123a6611e25565b5b6123b082611e14565b9050602081019050919050565b60006123d06123cb8461238c565b611e85565b9050828152602081018484840111156123ec576123eb611e0f565b5b6123f7848285611ed1565b509392505050565b600082601f83011261241457612413611e0a565b5b81356124248482602086016123bd565b91505092915050565b6000806000806080858703121561244757612446611e00565b5b600061245587828801612221565b945050602061246687828801612221565b935050604061247787828801611f71565b925050606085013567ffffffffffffffff81111561249857612497611e05565b5b6124a4878288016123ff565b91505092959194509250565b600080604083850312156124c7576124c6611e00565b5b60006124d585828601612221565b92505060206124e685828601612221565b9150509250929050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612526600a836120eb565b9150612531826124f0565b602082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125a357607f821691505b6020821081036125b6576125b561255c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261261e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826125e1565b61262886836125e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061266561266061265b84611f50565b612640565b611f50565b9050919050565b6000819050919050565b61267f8361264a565b61269361268b8261266c565b8484546125ee565b825550505050565b600090565b6126a861269b565b6126b3818484612676565b505050565b5b818110156126d7576126cc6000826126a0565b6001810190506126b9565b5050565b601f82111561271c576126ed816125bc565b6126f6846125d1565b81016020851015612705578190505b612719612711856125d1565b8301826126b8565b50505b505050565b600082821c905092915050565b600061273f60001984600802612721565b1980831691505092915050565b6000612758838361272e565b9150826002028217905092915050565b612771826120e0565b67ffffffffffffffff81111561278a57612789611e25565b5b612794825461258b565b61279f8282856126db565b600060209050601f8311600181146127d257600084156127c0578287015190505b6127ca858261274c565b865550612832565b601f1984166127e0866125bc565b60005b82811015612808578489015182556001820191506020850194506020810190506127e3565b868310156128255784890151612821601f89168261272e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061287482611f50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128a6576128a561283a565b5b600182019050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061290d6021836120eb565b9150612918826128b1565b604082019050919050565b6000602082019050818103600083015261293c81612900565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061299f603d836120eb565b91506129aa82612943565b604082019050919050565b600060208201905081810360008301526129ce81612992565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612a31602d836120eb565b9150612a3c826129d5565b604082019050919050565b60006020820190508181036000830152612a6081612a24565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612a9d6018836120eb565b9150612aa882612a67565b602082019050919050565b60006020820190508181036000830152612acc81612a90565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612b2f6029836120eb565b9150612b3a82612ad3565b604082019050919050565b60006020820190508181036000830152612b5e81612b22565b9050919050565b600081905092915050565b7f7b22746f6b656e206e616d65223a220000000000000000000000000000000000600082015250565b6000612ba6600f83612b65565b9150612bb182612b70565b600f82019050919050565b6000612bc7826120e0565b612bd18185612b65565b9350612be18185602086016120fc565b80840191505092915050565b7f222c2022696d6167652055524c223a2200000000000000000000000000000000600082015250565b6000612c23601083612b65565b9150612c2e82612bed565b601082019050919050565b7f222c20226d617820737570706c79223a22000000000000000000000000000000600082015250565b6000612c6f601183612b65565b9150612c7a82612c39565b601182019050919050565b6000819050919050565b612ca0612c9b82611f50565b612c85565b82525050565b7f222c20227072696365223a220000000000000000000000000000000000000000600082015250565b6000612cdc600c83612b65565b9150612ce782612ca6565b600c82019050919050565b7f222c226465736372697074696f6e223a20736f6d657468696e67227d00000000600082015250565b6000612d28601c83612b65565b9150612d3382612cf2565b601c82019050919050565b6000612d4982612b99565b9150612d558287612bbc565b9150612d6082612c16565b9150612d6c8286612bbc565b9150612d7782612c62565b9150612d838285612c8f565b602082019150612d9282612ccf565b9150612d9e8284612c8f565b602082019150612dad82612d1b565b915081905095945050505050565b6000612dc78285612bbc565b9150612dd38284612bbc565b91508190509392505050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000612e156012836120eb565b9150612e2082612ddf565b602082019050919050565b60006020820190508181036000830152612e4481612e08565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612ea76025836120eb565b9150612eb282612e4b565b604082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f396024836120eb565b9150612f4482612edd565b604082019050919050565b60006020820190508181036000830152612f6881612f2c565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612fa56019836120eb565b9150612fb082612f6f565b602082019050919050565b60006020820190508181036000830152612fd481612f98565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006130376032836120eb565b915061304282612fdb565b604082019050919050565b600060208201905081810360008301526130668161302a565b9050919050565b600061307882611f50565b915061308383611f50565b925082820190508082111561309b5761309a61283a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130db82611f50565b91506130e683611f50565b9250826130f6576130f56130a1565b5b828204905092915050565b600061310c82611f50565b915061311783611f50565b925082820261312581611f50565b9150828204841483151761313c5761313b61283a565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b600061316a82613143565b613174818561314e565b93506131848185602086016120fc565b61318d81611e14565b840191505092915050565b60006080820190506131ad60008301876121e0565b6131ba60208301866121e0565b6131c760408301856122f6565b81810360608301526131d9818461315f565b905095945050505050565b6000815190506131f381612051565b92915050565b60006020828403121561320f5761320e611e00565b5b600061321d848285016131e4565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061325c6020836120eb565b915061326782613226565b602082019050919050565b6000602082019050818103600083015261328b8161324f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006132c8601c836120eb565b91506132d382613292565b602082019050919050565b600060208201905081810360008301526132f7816132bb565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205f5d065df3019dcc1d113f3fc9a1b83390a98f5e302f847606b3da100bcd7c0664736f6c63430008110033a2646970667358221220c858022ba02f71186335539f768fb980ad9654e0e8674a7c1a1d0f831086cbf364736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000975760003560e01c8063586fd0c51162000061578063586fd0c5146200017a578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632e1a7d4d14620000a457806334c925f014620000c457806347734892146200010857806352f7c988146200014c576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc919062000801565b62000258565b005b348015620000d157600080fd5b50620000f06004803603810190620000ea919062000898565b6200032b565b604051620000ff919062000998565b60405180910390f35b3480156200011557600080fd5b506200013460048036038101906200012e919062000898565b620003fa565b604051620001439190620009cd565b60405180910390f35b3480156200015957600080fd5b50620001786004803603810190620001729190620009ea565b62000443565b005b62000198600480360381019062000192919062000b93565b62000484565b604051620001a7919062000c29565b60405180910390f35b348015620001bd57600080fd5b50620001c862000580565b005b348015620001d757600080fd5b50620001e262000598565b604051620001f1919062000c29565b60405180910390f35b3480156200020757600080fd5b5062000212620005c1565b604051620002219190620009cd565b60405180910390f35b3480156200023757600080fd5b5062000256600480360381019062000250919062000898565b620005c9565b005b6200026262000653565b4781116200032857600062000276620006d8565b73ffffffffffffffffffffffffffffffffffffffff16826040516200029b9062000c7b565b60006040518083038185875af1925050503d8060008114620002da576040519150601f19603f3d011682016040523d82523d6000602084013e620002df565b606091505b505090508062000326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031d9062000cf3565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620003ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003a3575b50505050509050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6200044d62000653565b600082036200045e57806002819055505b600182036200046f57806003819055505b600282036200048057806004819055505b5050565b6000600254341015620004ce576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004c59062000d65565b60405180910390fd5b6000838333604051620004e190620007a4565b620004ef9392919062000dff565b604051809103906000f0801580156200050c573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b40602856040516200056e919062000e4a565b60405180910390a38091505092915050565b6200058a62000653565b620005966000620006e0565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005d362000653565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000645576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200063c9062000ee4565b60405180910390fd5b6200065081620006e0565b50565b6200065d620006d8565b73ffffffffffffffffffffffffffffffffffffffff166200067d62000598565b73ffffffffffffffffffffffffffffffffffffffff1614620006d6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006cd9062000f56565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b613a3c8062000f7983390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620007db81620007c6565b8114620007e757600080fd5b50565b600081359050620007fb81620007d0565b92915050565b6000602082840312156200081a5762000819620007bc565b5b60006200082a84828501620007ea565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620008608262000833565b9050919050565b620008728162000853565b81146200087e57600080fd5b50565b600081359050620008928162000867565b92915050565b600060208284031215620008b157620008b0620007bc565b5b6000620008c18482850162000881565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b620009018162000853565b82525050565b6000620009158383620008f6565b60208301905092915050565b6000602082019050919050565b60006200093b82620008ca565b620009478185620008d5565b93506200095483620008e6565b8060005b838110156200098b5781516200096f888262000907565b97506200097c8362000921565b92505060018101905062000958565b5085935050505092915050565b60006020820190508181036000830152620009b481846200092e565b905092915050565b620009c781620007c6565b82525050565b6000602082019050620009e46000830184620009bc565b92915050565b6000806040838503121562000a045762000a03620007bc565b5b600062000a1485828601620007ea565b925050602062000a2785828601620007ea565b9150509250929050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a868262000a3b565b810181811067ffffffffffffffff8211171562000aa85762000aa762000a4c565b5b80604052505050565b600062000abd620007b2565b905062000acb828262000a7b565b919050565b600067ffffffffffffffff82111562000aee5762000aed62000a4c565b5b62000af98262000a3b565b9050602081019050919050565b82818337600083830152505050565b600062000b2c62000b268462000ad0565b62000ab1565b90508281526020810184848401111562000b4b5762000b4a62000a36565b5b62000b5884828562000b06565b509392505050565b600082601f83011262000b785762000b7762000a31565b5b813562000b8a84826020860162000b15565b91505092915050565b6000806040838503121562000bad5762000bac620007bc565b5b600083013567ffffffffffffffff81111562000bce5762000bcd620007c1565b5b62000bdc8582860162000b60565b925050602083013567ffffffffffffffff81111562000c005762000bff620007c1565b5b62000c0e8582860162000b60565b9150509250929050565b62000c238162000853565b82525050565b600060208201905062000c40600083018462000c18565b92915050565b600081905092915050565b50565b600062000c6360008362000c46565b915062000c708262000c51565b600082019050919050565b600062000c888262000c54565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000cdb600b8362000c92565b915062000ce88262000ca3565b602082019050919050565b6000602082019050818103600083015262000d0e8162000ccc565b9050919050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000d4d60138362000c92565b915062000d5a8262000d15565b602082019050919050565b6000602082019050818103600083015262000d808162000d3e565b9050919050565b600081519050919050565b60005b8381101562000db257808201518184015260208101905062000d95565b60008484015250505050565b600062000dcb8262000d87565b62000dd7818562000c92565b935062000de981856020860162000d92565b62000df48162000a3b565b840191505092915050565b6000606082019050818103600083015262000e1b818662000dbe565b9050818103602083015262000e31818562000dbe565b905062000e42604083018462000c18565b949350505050565b6000602082019050818103600083015262000e66818462000dbe565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000ecc60268362000c92565b915062000ed98262000e6e565b604082019050919050565b6000602082019050818103600083015262000eff8162000ebd565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b600062000f3e60208362000c92565b915062000f4b8262000f06565b602082019050919050565b6000602082019050818103600083015262000f718162000f2f565b905091905056fe6080604052600160085560016009553480156200001b57600080fd5b5060405162003a3c38038062003a3c8339818101604052810190620000419190620002ec565b82828160009081620000549190620005d1565b508060019081620000669190620005d1565b50505080600760006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555033600a60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006b8565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200015d8262000112565b810181811067ffffffffffffffff821117156200017f576200017e62000123565b5b80604052505050565b600062000194620000f4565b9050620001a2828262000152565b919050565b600067ffffffffffffffff821115620001c557620001c462000123565b5b620001d08262000112565b9050602081019050919050565b60005b83811015620001fd578082015181840152602081019050620001e0565b60008484015250505050565b6000620002206200021a84620001a7565b62000188565b9050828152602081018484840111156200023f576200023e6200010d565b5b6200024c848285620001dd565b509392505050565b600082601f8301126200026c576200026b62000108565b5b81516200027e84826020860162000209565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620002b48262000287565b9050919050565b620002c681620002a7565b8114620002d257600080fd5b50565b600081519050620002e681620002bb565b92915050565b600080600060608486031215620003085762000307620000fe565b5b600084015167ffffffffffffffff81111562000329576200032862000103565b5b620003378682870162000254565b935050602084015167ffffffffffffffff8111156200035b576200035a62000103565b5b620003698682870162000254565b92505060406200037c86828701620002d5565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003d957607f821691505b602082108103620003ef57620003ee62000391565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004597fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826200041a565b6200046586836200041a565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b6000620004b2620004ac620004a6846200047d565b62000487565b6200047d565b9050919050565b6000819050919050565b620004ce8362000491565b620004e6620004dd82620004b9565b84845462000427565b825550505050565b600090565b620004fd620004ee565b6200050a818484620004c3565b505050565b5b81811015620005325762000526600082620004f3565b60018101905062000510565b5050565b601f82111562000581576200054b81620003f5565b62000556846200040a565b8101602085101562000566578190505b6200057e62000575856200040a565b8301826200050f565b50505b505050565b600082821c905092915050565b6000620005a66000198460080262000586565b1980831691505092915050565b6000620005c1838362000593565b9150826002028217905092915050565b620005dc8262000386565b67ffffffffffffffff811115620005f857620005f762000123565b5b620006048254620003c0565b6200061182828562000536565b600060209050601f83116001811462000649576000841562000634578287015190505b620006408582620005b3565b865550620006b0565b601f1984166200065986620003f5565b60005b8281101562000683578489015182556001820191506020850194506020810190506200065c565b86831015620006a357848901516200069f601f89168262000593565b8355505b6001600288020188555050505b505050505050565b61337480620006c86000396000f3fe6080604052600436106100f35760003560e01c806370a082311161008a578063b88d4fde11610059578063b88d4fde14610326578063c87b56dd1461034f578063e985e9c51461038c578063efef39a1146103c9576100f3565b806370a082311461027e57806395d89b41146102bb57806399d32fc4146102e6578063a22cb465146102fd576100f3565b8063095ea7b3116100c6578063095ea7b3146101c657806323b872dd146101ef57806342842e0e146102185780636352211e14610241576100f3565b806301cecd14146100f857806301ffc9a71461012157806306fdde031461015e578063081812fc14610189575b600080fd5b34801561010457600080fd5b5061011f600480360381019061011a9190611f86565b6103e5565b005b34801561012d57600080fd5b506101486004803603810190610143919061207d565b61059c565b60405161015591906120c5565b60405180910390f35b34801561016a57600080fd5b506101736105fd565b604051610180919061215f565b60405180910390f35b34801561019557600080fd5b506101b060048036038101906101ab9190612181565b61068f565b6040516101bd91906121ef565b60405180910390f35b3480156101d257600080fd5b506101ed60048036038101906101e89190612236565b6106d5565b005b3480156101fb57600080fd5b5061021660048036038101906102119190612276565b6107ec565b005b34801561022457600080fd5b5061023f600480360381019061023a9190612276565b61084c565b005b34801561024d57600080fd5b5061026860048036038101906102639190612181565b61086c565b60405161027591906121ef565b60405180910390f35b34801561028a57600080fd5b506102a560048036038101906102a091906122c9565b6108f2565b6040516102b29190612305565b60405180910390f35b3480156102c757600080fd5b506102d06109a9565b6040516102dd919061215f565b60405180910390f35b3480156102f257600080fd5b506102fb610a3b565b005b34801561030957600080fd5b50610324600480360381019061031f919061234c565b610acd565b005b34801561033257600080fd5b5061034d6004803603810190610348919061242d565b610ae3565b005b34801561035b57600080fd5b5061037660048036038101906103719190612181565b610b45565b604051610383919061215f565b60405180910390f35b34801561039857600080fd5b506103b360048036038101906103ae91906124b0565b610d4e565b6040516103c091906120c5565b60405180910390f35b6103e360048036038101906103de9190612181565b610de2565b005b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610475576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046c9061253c565b60405180910390fd5b600a60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610505576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104fc9061253c565b60405180910390fd5b604051806080016040528085815260200183815260200184815260200182815250600c6000600954815260200190815260200160002060008201518160000190816105509190612768565b506020820151816001015560408201518160020190816105709190612768565b50606082015181600301559050506009600081548092919061059190612869565b919050555050505050565b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806105f657506105f582611004565b5b9050919050565b60606000805461060c9061258b565b80601f01602080910402602001604051908101604052809291908181526020018280546106389061258b565b80156106855780601f1061065a57610100808354040283529160200191610685565b820191906000526020600020905b81548152906001019060200180831161066857829003601f168201915b5050505050905090565b600061069a826110e6565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006106e08261086c565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610750576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161074790612923565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661076f611131565b73ffffffffffffffffffffffffffffffffffffffff16148061079e575061079d81610798611131565b610d4e565b5b6107dd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107d4906129b5565b60405180910390fd5b6107e78383611139565b505050565b6107fd6107f7611131565b826111f2565b61083c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083390612a47565b60405180910390fd5b610847838383611287565b505050565b61086783838360405180602001604052806000815250610ae3565b505050565b60008061087883611580565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036108e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108e090612ab3565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610962576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095990612b45565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6060600180546109b89061258b565b80601f01602080910402602001604051908101604052809291908181526020018280546109e49061258b565b8015610a315780601f10610a0657610100808354040283529160200191610a31565b820191906000526020600020905b815481529060010190602001808311610a1457829003601f168201915b5050505050905090565b600760009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610acb576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ac29061253c565b60405180910390fd5b565b610adf610ad8611131565b83836115bd565b5050565b610af4610aee611131565b836111f2565b610b33576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2a90612a47565b60405180910390fd5b610b3f84848484611729565b50505050565b6060610b5082611785565b610b86576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600c6000848152602001908152602001600020604051806080016040529081600082018054610bb69061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610be29061258b565b8015610c2f5780601f10610c0457610100808354040283529160200191610c2f565b820191906000526020600020905b815481529060010190602001808311610c1257829003601f168201915b5050505050815260200160018201548152602001600282018054610c529061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610c7e9061258b565b8015610ccb5780601f10610ca057610100808354040283529160200191610ccb565b820191906000526020600020905b815481529060010190602001808311610cae57829003601f168201915b505050505081526020016003820154815250509050610ce86117c6565b610d268260000151836040015184606001518560200151604051602001610d129493929190612d3e565b6040516020818303038152906040526117dd565b604051602001610d37929190612dbb565b604051602081830303815290604052915050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600c6000838152602001908152602001600020604051806080016040529081600082018054610e129061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610e3e9061258b565b8015610e8b5780601f10610e6057610100808354040283529160200191610e8b565b820191906000526020600020905b815481529060010190602001808311610e6e57829003601f168201915b5050505050815260200160018201548152602001600282018054610eae9061258b565b80601f0160208091040260200160405190810160405280929190818152602001828054610eda9061258b565b8015610f275780601f10610efc57610100808354040283529160200191610f27565b820191906000526020600020905b815481529060010190602001808311610f0a57829003601f168201915b5050505050815260200160038201548152505090503481602001511115610f83576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f7a90612e2b565b60405180910390fd5b610f8f33600854611940565b80600d600060085481526020019081526020016000206000820151816000019081610fba9190612768565b50602082015181600101556040820151816002019081610fda9190612768565b506060820151816003015590505060086000815480929190610ffb90612869565b91905055505050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806110cf57507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806110df57506110de8261195e565b5b9050919050565b6110ef81611785565b61112e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112590612ab3565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff166111ac8361086c565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000806111fe8361086c565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff161480611240575061123f8185610d4e565b5b8061127e57508373ffffffffffffffffffffffffffffffffffffffff166112668461068f565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff166112a78261086c565b73ffffffffffffffffffffffffffffffffffffffff16146112fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112f490612ebd565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361136c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161136390612f4f565b60405180910390fd5b61137983838360016119c8565b8273ffffffffffffffffffffffffffffffffffffffff166113998261086c565b73ffffffffffffffffffffffffffffffffffffffff16146113ef576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113e690612ebd565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a461157b83838360016119ce565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361162b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162290612fbb565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c318360405161171c91906120c5565b60405180910390a3505050565b611734848484611287565b611740848484846119d4565b61177f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016117769061304d565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff166117a783611580565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060405180602001604052806000815250905090565b606060008251036117ff5760405180602001604052806000815250905061193b565b60006040518060600160405280604081526020016132ff604091399050600060036002855161182e919061306d565b61183891906130d0565b60046118449190613101565b67ffffffffffffffff81111561185d5761185c611e25565b5b6040519080825280601f01601f19166020018201604052801561188f5781602001600182028036833780820191505090505b509050600182016020820185865187015b808210156118fb576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f81168501518453600184019350506118a0565b5050600386510660018114611917576002811461192a57611932565b603d6001830353603d6002830353611932565b603d60018303535b50505080925050505b919050565b61195a828260405180602001604052806000815250611b5b565b5050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b60006119f58473ffffffffffffffffffffffffffffffffffffffff16611bb6565b15611b4e578373ffffffffffffffffffffffffffffffffffffffff1663150b7a02611a1e611131565b8786866040518563ffffffff1660e01b8152600401611a409493929190613198565b6020604051808303816000875af1925050508015611a7c57506040513d601f19601f82011682018060405250810190611a7991906131f9565b60015b611afe573d8060008114611aac576040519150601f19603f3d011682016040523d82523d6000602084013e611ab1565b606091505b506000815103611af6576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611aed9061304d565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050611b53565b600190505b949350505050565b611b658383611bd9565b611b7260008484846119d4565b611bb1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611ba89061304d565b60405180910390fd5b505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611c48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c3f90613272565b60405180910390fd5b611c5181611785565b15611c91576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611c88906132de565b60405180910390fd5b611c9f6000838360016119c8565b611ca881611785565b15611ce8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cdf906132de565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611df26000838360016119ce565b5050565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b611e5d82611e14565b810181811067ffffffffffffffff82111715611e7c57611e7b611e25565b5b80604052505050565b6000611e8f611df6565b9050611e9b8282611e54565b919050565b600067ffffffffffffffff821115611ebb57611eba611e25565b5b611ec482611e14565b9050602081019050919050565b82818337600083830152505050565b6000611ef3611eee84611ea0565b611e85565b905082815260208101848484011115611f0f57611f0e611e0f565b5b611f1a848285611ed1565b509392505050565b600082601f830112611f3757611f36611e0a565b5b8135611f47848260208601611ee0565b91505092915050565b6000819050919050565b611f6381611f50565b8114611f6e57600080fd5b50565b600081359050611f8081611f5a565b92915050565b60008060008060808587031215611fa057611f9f611e00565b5b600085013567ffffffffffffffff811115611fbe57611fbd611e05565b5b611fca87828801611f22565b945050602085013567ffffffffffffffff811115611feb57611fea611e05565b5b611ff787828801611f22565b935050604061200887828801611f71565b925050606061201987828801611f71565b91505092959194509250565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b61205a81612025565b811461206557600080fd5b50565b60008135905061207781612051565b92915050565b60006020828403121561209357612092611e00565b5b60006120a184828501612068565b91505092915050565b60008115159050919050565b6120bf816120aa565b82525050565b60006020820190506120da60008301846120b6565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561211a5780820151818401526020810190506120ff565b60008484015250505050565b6000612131826120e0565b61213b81856120eb565b935061214b8185602086016120fc565b61215481611e14565b840191505092915050565b600060208201905081810360008301526121798184612126565b905092915050565b60006020828403121561219757612196611e00565b5b60006121a584828501611f71565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006121d9826121ae565b9050919050565b6121e9816121ce565b82525050565b600060208201905061220460008301846121e0565b92915050565b612213816121ce565b811461221e57600080fd5b50565b6000813590506122308161220a565b92915050565b6000806040838503121561224d5761224c611e00565b5b600061225b85828601612221565b925050602061226c85828601611f71565b9150509250929050565b60008060006060848603121561228f5761228e611e00565b5b600061229d86828701612221565b93505060206122ae86828701612221565b92505060406122bf86828701611f71565b9150509250925092565b6000602082840312156122df576122de611e00565b5b60006122ed84828501612221565b91505092915050565b6122ff81611f50565b82525050565b600060208201905061231a60008301846122f6565b92915050565b612329816120aa565b811461233457600080fd5b50565b60008135905061234681612320565b92915050565b6000806040838503121561236357612362611e00565b5b600061237185828601612221565b925050602061238285828601612337565b9150509250929050565b600067ffffffffffffffff8211156123a7576123a6611e25565b5b6123b082611e14565b9050602081019050919050565b60006123d06123cb8461238c565b611e85565b9050828152602081018484840111156123ec576123eb611e0f565b5b6123f7848285611ed1565b509392505050565b600082601f83011261241457612413611e0a565b5b81356124248482602086016123bd565b91505092915050565b6000806000806080858703121561244757612446611e00565b5b600061245587828801612221565b945050602061246687828801612221565b935050604061247787828801611f71565b925050606085013567ffffffffffffffff81111561249857612497611e05565b5b6124a4878288016123ff565b91505092959194509250565b600080604083850312156124c7576124c6611e00565b5b60006124d585828601612221565b92505060206124e685828601612221565b9150509250929050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612526600a836120eb565b9150612531826124f0565b602082019050919050565b6000602082019050818103600083015261255581612519565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806125a357607f821691505b6020821081036125b6576125b561255c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b60006008830261261e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826125e1565b61262886836125e1565b95508019841693508086168417925050509392505050565b6000819050919050565b600061266561266061265b84611f50565b612640565b611f50565b9050919050565b6000819050919050565b61267f8361264a565b61269361268b8261266c565b8484546125ee565b825550505050565b600090565b6126a861269b565b6126b3818484612676565b505050565b5b818110156126d7576126cc6000826126a0565b6001810190506126b9565b5050565b601f82111561271c576126ed816125bc565b6126f6846125d1565b81016020851015612705578190505b612719612711856125d1565b8301826126b8565b50505b505050565b600082821c905092915050565b600061273f60001984600802612721565b1980831691505092915050565b6000612758838361272e565b9150826002028217905092915050565b612771826120e0565b67ffffffffffffffff81111561278a57612789611e25565b5b612794825461258b565b61279f8282856126db565b600060209050601f8311600181146127d257600084156127c0578287015190505b6127ca858261274c565b865550612832565b601f1984166127e0866125bc565b60005b82811015612808578489015182556001820191506020850194506020810190506127e3565b868310156128255784890151612821601f89168261272e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061287482611f50565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036128a6576128a561283a565b5b600182019050919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b600061290d6021836120eb565b9150612918826128b1565b604082019050919050565b6000602082019050818103600083015261293c81612900565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061299f603d836120eb565b91506129aa82612943565b604082019050919050565b600060208201905081810360008301526129ce81612992565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612a31602d836120eb565b9150612a3c826129d5565b604082019050919050565b60006020820190508181036000830152612a6081612a24565b9050919050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612a9d6018836120eb565b9150612aa882612a67565b602082019050919050565b60006020820190508181036000830152612acc81612a90565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612b2f6029836120eb565b9150612b3a82612ad3565b604082019050919050565b60006020820190508181036000830152612b5e81612b22565b9050919050565b600081905092915050565b7f7b22746f6b656e206e616d65223a220000000000000000000000000000000000600082015250565b6000612ba6600f83612b65565b9150612bb182612b70565b600f82019050919050565b6000612bc7826120e0565b612bd18185612b65565b9350612be18185602086016120fc565b80840191505092915050565b7f222c2022696d6167652055524c223a2200000000000000000000000000000000600082015250565b6000612c23601083612b65565b9150612c2e82612bed565b601082019050919050565b7f222c20226d617820737570706c79223a22000000000000000000000000000000600082015250565b6000612c6f601183612b65565b9150612c7a82612c39565b601182019050919050565b6000819050919050565b612ca0612c9b82611f50565b612c85565b82525050565b7f222c20227072696365223a220000000000000000000000000000000000000000600082015250565b6000612cdc600c83612b65565b9150612ce782612ca6565b600c82019050919050565b7f222c226465736372697074696f6e223a20736f6d657468696e67227d00000000600082015250565b6000612d28601c83612b65565b9150612d3382612cf2565b601c82019050919050565b6000612d4982612b99565b9150612d558287612bbc565b9150612d6082612c16565b9150612d6c8286612bbc565b9150612d7782612c62565b9150612d838285612c8f565b602082019150612d9282612ccf565b9150612d9e8284612c8f565b602082019150612dad82612d1b565b915081905095945050505050565b6000612dc78285612bbc565b9150612dd38284612bbc565b91508190509392505050565b7f496e73756666696369656e742076616c75650000000000000000000000000000600082015250565b6000612e156012836120eb565b9150612e2082612ddf565b602082019050919050565b60006020820190508181036000830152612e4481612e08565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000612ea76025836120eb565b9150612eb282612e4b565b604082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000612f396024836120eb565b9150612f4482612edd565b604082019050919050565b60006020820190508181036000830152612f6881612f2c565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b6000612fa56019836120eb565b9150612fb082612f6f565b602082019050919050565b60006020820190508181036000830152612fd481612f98565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006130376032836120eb565b915061304282612fdb565b604082019050919050565b600060208201905081810360008301526130668161302a565b9050919050565b600061307882611f50565b915061308383611f50565b925082820190508082111561309b5761309a61283a565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006130db82611f50565b91506130e683611f50565b9250826130f6576130f56130a1565b5b828204905092915050565b600061310c82611f50565b915061311783611f50565b925082820261312581611f50565b9150828204841483151761313c5761313b61283a565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b600061316a82613143565b613174818561314e565b93506131848185602086016120fc565b61318d81611e14565b840191505092915050565b60006080820190506131ad60008301876121e0565b6131ba60208301866121e0565b6131c760408301856122f6565b81810360608301526131d9818461315f565b905095945050505050565b6000815190506131f381612051565b92915050565b60006020828403121561320f5761320e611e00565b5b600061321d848285016131e4565b91505092915050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061325c6020836120eb565b915061326782613226565b602082019050919050565b6000602082019050818103600083015261328b8161324f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006132c8601c836120eb565b91506132d382613292565b602082019050919050565b600060208201905081810360008301526132f7816132bb565b905091905056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212205f5d065df3019dcc1d113f3fc9a1b83390a98f5e302f847606b3da100bcd7c0664736f6c63430008110033a2646970667358221220c858022ba02f71186335539f768fb980ad9654e0e8674a7c1a1d0f831086cbf364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 5002,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "s_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 5004,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "deployCost",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 5006,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "mintFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 5008,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 5012,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5017,
        "contract": "contracts/ERC721ProductCreator.sol:ERC721ProductCreator",
        "label": "addressToContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}