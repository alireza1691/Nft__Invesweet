{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "ERC721Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxSupply",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "imageURL",
          "type": "string"
        }
      ],
      "name": "createERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6cf3810bd75467e03ab3a15420984f1ceb7618622e07b2100fdbe3d08b373dac",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "4561211",
    "logsBloom": "0x
    "blockHash": "0xe499a9a5650a89f32037f0f1a5d9251335e3616a119a266643f7f02bc9c51179",
    "transactionHash": "0x6cf3810bd75467e03ab3a15420984f1ceb7618622e07b2100fdbe3d08b373dac",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x6cf3810bd75467e03ab3a15420984f1ceb7618622e07b2100fdbe3d08b373dac",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xe499a9a5650a89f32037f0f1a5d9251335e3616a119a266643f7f02bc9c51179"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "4561211",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "c9a6ead500a95169f087ecf251831b5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"ERC721Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"imageURL\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Creator.sol\":\"Creator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/Creator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// import \\\"./ERC721Upgreadable.sol\\\";\\nimport \\\"./ERC721V1.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"./Storage.sol\\\";\\n\\n\\n\\n/*  WHAT REMAINED:\\n\\n    add eth price\\n    use specific price if value less than 1$\\n    move variables into library\\n    add proxy\\n\\n\\n*/\\n\\n\\n\\n// contract Storage is Ownable{\\n\\n//     address private owner;\\n//     bytes32 public constant SLOT = keccak256(\\\"Invesweet\\\");\\n//     constructor() {\\n//         owner = msg.sender;\\n//     }\\n\\n//     function changeOwnership (address newOwner) external onlyOwner {\\n//         owner = newOwner;\\n//     }\\n\\n//     function getMintFee() external view returns(uint256){\\n//         return Fees.fee(SLOT).mintFee;\\n//     }\\n//     function getDeployFee() external view returns(uint256){\\n//         return Fees.fee(SLOT).mintFee;\\n//     }\\n//     function getWithdrawalFee() external view returns(uint256){\\n//         return Fees.fee(SLOT).mintFee;\\n//     }\\n\\n//     function setMintFee(uint256 newAmount) external onlyOwner {\\n//         Fees.fee(SLOT).mintFee = newAmount;\\n//     }\\n//     function setDeployFee(uint256 newAmount) external onlyOwner {\\n//         Fees.fee(SLOT).deployFee = newAmount;\\n//     }\\n//     function setWithdrawalFee(uint256 newAmount) external onlyOwner {\\n//         Fees.fee(SLOT).withdrawalFee = newAmount;\\n//     }\\n// }\\n\\n// library Fees{\\n//     struct FuncFees {\\n//         uint256 mintFee;\\n//         uint256 deployFee;\\n//         uint256 withdrawalFee;\\n//     }\\n\\n//     function fee(bytes32 slot) internal pure returns(FuncFees storage r) {\\n//         assembly {\\n//             r.slot := slot\\n//         }\\n//     }\\n// }\\n\\n\\n\\n\\ncontract Creator is Ownable {\\n    \\n    event ERC721Create(address indexed contractAddress, address indexed owner, string symbol);\\n\\n    address private s_owner;\\n    uint256 private deployCost;\\n    uint256 private mintFee;\\n    uint256 private withdrawalFee;\\n\\n    mapping (address => uint256) private balances;\\n    mapping (address => address[]) private addressToContracts;\\n    // mapping (address => address) private contractToOwner;\\n    constructor() {\\n        s_owner = msg.sender;\\n    }\\n\\n    // this func will remove after moving variables into library\\n    function setFee (uint256 index, uint256 feeAmount) external onlyOwner {\\n        if (index == 0 ) {\\n            deployCost = feeAmount;\\n        }\\n        if (index == 1) {\\n            mintFee = feeAmount;\\n        }\\n        if (index == 2) {\\n            withdrawalFee = feeAmount;\\n        } \\n         \\n    }\\n\\n    function createERC721(string memory name, string memory symbol, uint256 price, uint256 maxSupply, string calldata imageURL) payable external returns(address) {\\n        require(msg.value >= deployCost, \\\"create requires fee\\\");\\n        ERC721V1 newNft = new ERC721V1(name, symbol ,price , maxSupply, msg.sender, imageURL);\\n        emit ERC721Create(address(newNft), msg.sender, symbol);\\n        // contractToOwner[address(newNft)] = msg.sender;\\n        return address(newNft);\\n    }\\n\\n\\n    function withdraw(uint256 amount) external payable onlyOwner{\\n        if (amount <= address(this).balance) {\\n            (bool ok,) = _msgSender().call{value: amount }(\\\"\\\");\\n            require(ok,\\\"Call failed\\\");\\n        }\\n            \\n    }\\n\\n    \\n    // Getter funcs:\\n    function getUserContracts(address user) external view returns(address[] memory){\\n        return addressToContracts[user];\\n    }\\n\\n    function balance() external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getUserBalance (address who) external view returns(uint256) {\\n        return balances[who];\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x3566f0f8ecaa5f77370f22632fcb0b066f876594b1219f278e39f94b581dddf5\",\"license\":\"MIT\"},\"contracts/ERC721V1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\n/// @title A ERC721 standard contract(NFT) but with some changes.\\n/// @author Alireza Haghshenas\\n/// @notice This contract deploys by invesweet creator contract.\\n/// @dev Mint function should call by creator contract, not directly in this contract\\n\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\n\\nerror ERC721Metadata__URI_QueryFor_NonExistentToken();\\n\\ncontract ERC721V1 is ERC721URIStorage{\\n\\n    // Events\\n    event Mint(address user,address nftContract, uint256 tokenId);\\n    event Withdraw(address user, address contractAddress, uint256 value);\\n\\n    // Variables\\n    string private s_url;\\n    address private owner;\\n    uint256 private counterTokenID = 1;\\n    uint256 private fee;\\n    uint256 private immutable maxSupply;\\n    address payable private creatorContract;\\n    uint256 private sumMintFees;\\n\\n    // Mappings\\n    mapping(uint256 => address) private _owners;\\n    mapping(uint256 => address) private _tokenApprovals;\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n    mapping(address => uint256) private _balances;\\n    mapping(address => uint256) private verfiyBurn;\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n\\n    constructor (string memory name,string memory symbol, uint256 mintCost, uint256 maximumSupply,address contractOwner, string memory imgUrl) ERC721(name, symbol){\\n        fee = mintCost;\\n        maxSupply = maximumSupply;\\n        owner = contractOwner;\\n        s_url = imgUrl;\\n        creatorContract = payable(msg.sender);\\n    }\\n\\n    // modifiers\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator {\\n        require(msg.sender == creatorContract, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    // External functions\\n    function mint() external payable {\\n        require(counterTokenID <= maxSupply,\\\"Maximun number was minted\\\");\\n        require(msg.value >= fee,\\\"Insufficient mint fee\\\");\\n         (bool ok) = creatorContract.send((fee)/100);\\n          if (ok) {\\n        _mint(msg.sender, counterTokenID);\\n        _setTokenURI(counterTokenID, s_url);\\n         counterTokenID ++;\\n        \\n     }\\n    }\\n\\n\\n    function changeFee(uint256 newFee) external onlyOwner {\\n        fee = newFee;\\n    }\\n\\n    function withdraw () external payable {\\n        (bool ok, ) = msg.sender.call{value: address(this).balance}(\\\"\\\");\\n        if (ok) {\\n            emit Withdraw(msg.sender, address(this), address(this).balance);\\n        }\\n    }\\n\\n    // should add only owner modifier\\n    function setUri(string memory newUri) external onlyOwner {\\n        s_url = newUri;\\n    }\\n\\n    function transferOwnership(address newOwner) external onlyOwner {\\n        owner = newOwner;\\n    }\\n\\n   \\n    function balance () external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getPrice () external view returns(uint256) {\\n        return fee;\\n    }\\n\\n    function getOwner () external view returns(address) {\\n        return owner;\\n    }\\n\\n    function getCreator () external view returns (address) {\\n        return creatorContract;\\n    }\\n\\n\\n\\n    // View functions\\n    function getSumMintFee() view external returns(uint256) {\\n        return sumMintFees;\\n    }\\n\\n    function getParentContract() external view returns(address) {\\n        return creatorContract;\\n    }\\n    function getUri(uint256 tokenId) view external returns(string memory){\\n        return tokenURI(tokenId);\\n    }\\n    \\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert ERC721Metadata__URI_QueryFor_NonExistentToken();\\n        }\\n        // (, int256 price, , , ) = i_priceFeed.latestRoundData();\\n        // string memory imageURI = s_lowImageURI;\\n        // if (price >= s_tokenIdToHighValues[tokenId]) {\\n        //     imageURI = s_highImageURI;\\n        // }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseURI(),\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"name\\\":\\\"',\\n                                name(), // You can add whatever name here\\n                                '\\\", \\\"description\\\":\\\"An NFT smart contract that generated by INVESWEET smart contract\\\", ',\\n                                '\\\"attributes\\\": [{\\\"trait_type\\\": \\\"coolness\\\", \\\"value\\\": 100}], \\\"image\\\":\\\"',\\n                                s_url,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n\\n    function checkVerifyNum (address who) external view returns(uint256) {\\n        return verfiyBurn[who];\\n    }\\n\\n    function baseURI() external view returns(string memory) {\\n        return s_url;\\n    }\\n     function _baseURI() internal view virtual override returns (string memory) {\\n        return s_url;\\n    }\\n\\n\\n \\n}\",\"keccak256\":\"0x44406744e6328cb1b7e4d4fdd9d080c2cab93630db7c6ac4984b7872de4fa402\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261007360201b60201c565b61007b60201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6151068061014e6000396000f3fe608060405260043610620000975760003560e01c806352f7c988116200006157806352f7c9881462000182578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632e1a7d4d14620000a457806334c925f014620000c45780633649a9bd146200010857806347734892146200013e576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc91906200080d565b62000258565b005b348015620000d157600080fd5b50620000f06004803603810190620000ea9190620008a4565b6200032b565b604051620000ff9190620009a4565b60405180910390f35b62000126600480360381019062000120919062000b93565b620003fa565b60405162000135919062000c8c565b60405180910390f35b3480156200014b57600080fd5b506200016a6004803603810190620001649190620008a4565b62000502565b60405162000179919062000cba565b60405180910390f35b3480156200018f57600080fd5b50620001ae6004803603810190620001a8919062000cd7565b6200054b565b005b348015620001bd57600080fd5b50620001c86200058c565b005b348015620001d757600080fd5b50620001e2620005a4565b604051620001f1919062000c8c565b60405180910390f35b3480156200020757600080fd5b5062000212620005cd565b60405162000221919062000cba565b60405180910390f35b3480156200023757600080fd5b50620002566004803603810190620002509190620008a4565b620005d5565b005b620002626200065f565b4781116200032857600062000276620006e4565b73ffffffffffffffffffffffffffffffffffffffff16826040516200029b9062000d53565b60006040518083038185875af1925050503d8060008114620002da576040519150601f19603f3d011682016040523d82523d6000602084013e620002df565b606091505b505090508062000326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031d9062000dcb565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620003ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003a3575b50505050509050919050565b600060025434101562000444576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200043b9062000e3d565b60405180910390fd5b6000878787873388886040516200045b90620007b0565b6200046d979695949392919062000f0a565b604051809103906000f0801580156200048a573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b4060289604051620004ec919062000f8e565b60405180910390a3809150509695505050505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620005556200065f565b600082036200056657806002819055505b600182036200057757806003819055505b600282036200058857806004819055505b5050565b620005966200065f565b620005a26000620006ec565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005df6200065f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006489062001028565b60405180910390fd5b6200065c81620006ec565b50565b62000669620006e4565b73ffffffffffffffffffffffffffffffffffffffff1662000689620005a4565b73ffffffffffffffffffffffffffffffffffffffff1614620006e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006d9906200109a565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61401480620010bd83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620007e781620007d2565b8114620007f357600080fd5b50565b6000813590506200080781620007dc565b92915050565b600060208284031215620008265762000825620007c8565b5b60006200083684828501620007f6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200086c826200083f565b9050919050565b6200087e816200085f565b81146200088a57600080fd5b50565b6000813590506200089e8162000873565b92915050565b600060208284031215620008bd57620008bc620007c8565b5b6000620008cd848285016200088d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200090d816200085f565b82525050565b600062000921838362000902565b60208301905092915050565b6000602082019050919050565b60006200094782620008d6565b620009538185620008e1565b93506200096083620008f2565b8060005b83811015620009975781516200097b888262000913565b975062000988836200092d565b92505060018101905062000964565b5085935050505092915050565b60006020820190508181036000830152620009c081846200093a565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a1d82620009d2565b810181811067ffffffffffffffff8211171562000a3f5762000a3e620009e3565b5b80604052505050565b600062000a54620007be565b905062000a62828262000a12565b919050565b600067ffffffffffffffff82111562000a855762000a84620009e3565b5b62000a9082620009d2565b9050602081019050919050565b82818337600083830152505050565b600062000ac362000abd8462000a67565b62000a48565b90508281526020810184848401111562000ae25762000ae1620009cd565b5b62000aef84828562000a9d565b509392505050565b600082601f83011262000b0f5762000b0e620009c8565b5b813562000b2184826020860162000aac565b91505092915050565b600080fd5b600080fd5b60008083601f84011262000b4d5762000b4c620009c8565b5b8235905067ffffffffffffffff81111562000b6d5762000b6c62000b2a565b5b60208301915083600182028301111562000b8c5762000b8b62000b2f565b5b9250929050565b60008060008060008060a0878903121562000bb35762000bb2620007c8565b5b600087013567ffffffffffffffff81111562000bd45762000bd3620007cd565b5b62000be289828a0162000af7565b965050602087013567ffffffffffffffff81111562000c065762000c05620007cd565b5b62000c1489828a0162000af7565b955050604062000c2789828a01620007f6565b945050606062000c3a89828a01620007f6565b935050608087013567ffffffffffffffff81111562000c5e5762000c5d620007cd565b5b62000c6c89828a0162000b34565b92509250509295509295509295565b62000c86816200085f565b82525050565b600060208201905062000ca3600083018462000c7b565b92915050565b62000cb481620007d2565b82525050565b600060208201905062000cd1600083018462000ca9565b92915050565b6000806040838503121562000cf15762000cf0620007c8565b5b600062000d0185828601620007f6565b925050602062000d1485828601620007f6565b9150509250929050565b600081905092915050565b50565b600062000d3b60008362000d1e565b915062000d488262000d29565b600082019050919050565b600062000d608262000d2c565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000db3600b8362000d6a565b915062000dc08262000d7b565b602082019050919050565b6000602082019050818103600083015262000de68162000da4565b9050919050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000e2560138362000d6a565b915062000e328262000ded565b602082019050919050565b6000602082019050818103600083015262000e588162000e16565b9050919050565b600081519050919050565b60005b8381101562000e8a57808201518184015260208101905062000e6d565b60008484015250505050565b600062000ea38262000e5f565b62000eaf818562000d6a565b935062000ec181856020860162000e6a565b62000ecc81620009d2565b840191505092915050565b600062000ee5838562000d6a565b935062000ef483858462000a9d565b62000eff83620009d2565b840190509392505050565b600060c082019050818103600083015262000f26818a62000e96565b9050818103602083015262000f3c818962000e96565b905062000f4d604083018862000ca9565b62000f5c606083018762000ca9565b62000f6b608083018662000c7b565b81810360a083015262000f8081848662000ed7565b905098975050505050505050565b6000602082019050818103600083015262000faa818462000e96565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200101060268362000d6a565b91506200101d8262000fb2565b604082019050919050565b60006020820190508181036000830152620010438162001001565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200108260208362000d6a565b91506200108f826200104a565b602082019050919050565b60006020820190508181036000830152620010b58162001073565b905091905056fe60a060405260016009553480156200001657600080fd5b50604051620040143803806200401483398181016040528101906200003c919062000346565b858581600090816200004f919062000680565b50806001908162000061919062000680565b50505083600a81905550826080818152505081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000c5919062000680565b5033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000767565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200017c8262000131565b810181811067ffffffffffffffff821117156200019e576200019d62000142565b5b80604052505050565b6000620001b362000113565b9050620001c1828262000171565b919050565b600067ffffffffffffffff821115620001e457620001e362000142565b5b620001ef8262000131565b9050602081019050919050565b60005b838110156200021c578082015181840152602081019050620001ff565b60008484015250505050565b60006200023f6200023984620001c6565b620001a7565b9050828152602081018484840111156200025e576200025d6200012c565b5b6200026b848285620001fc565b509392505050565b600082601f8301126200028b576200028a62000127565b5b81516200029d84826020860162000228565b91505092915050565b6000819050919050565b620002bb81620002a6565b8114620002c757600080fd5b50565b600081519050620002db81620002b0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030e82620002e1565b9050919050565b620003208162000301565b81146200032c57600080fd5b50565b600081519050620003408162000315565b92915050565b60008060008060008060c087890312156200036657620003656200011d565b5b600087015167ffffffffffffffff81111562000387576200038662000122565b5b6200039589828a0162000273565b965050602087015167ffffffffffffffff811115620003b957620003b862000122565b5b620003c789828a0162000273565b9550506040620003da89828a01620002ca565b9450506060620003ed89828a01620002ca565b93505060806200040089828a016200032f565b92505060a087015167ffffffffffffffff81111562000424576200042362000122565b5b6200043289828a0162000273565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049257607f821691505b602082108103620004a857620004a76200044a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004d3565b6200051e8683620004d3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005616200055b6200055584620002a6565b62000536565b620002a6565b9050919050565b6000819050919050565b6200057d8362000540565b620005956200058c8262000568565b848454620004e0565b825550505050565b600090565b620005ac6200059d565b620005b981848462000572565b505050565b5b81811015620005e157620005d5600082620005a2565b600181019050620005bf565b5050565b601f8211156200063057620005fa81620004ae565b6200060584620004c3565b8101602085101562000615578190505b6200062d6200062485620004c3565b830182620005be565b50505b505050565b600082821c905092915050565b6000620006556000198460080262000635565b1980831691505092915050565b600062000670838362000642565b9150826002028217905092915050565b6200068b826200043f565b67ffffffffffffffff811115620006a757620006a662000142565b5b620006b3825462000479565b620006c0828285620005e5565b600060209050601f831160018114620006f85760008415620006e3578287015190505b620006ef858262000662565b8655506200075f565b601f1984166200070886620004ae565b60005b8281101562000732578489015182556001820191506020850194506020810190506200070b565b868310156200075257848901516200074e601f89168262000642565b8355505b6001600288020188555050505b505050505050565b6080516138916200078360003960006108e401526138916000f3fe60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063da0544aa11610064578063da0544aa1461059a578063e985e9c5146105d7578063f117771214610614578063f2fde38b1461063f5761019c565b8063b88d4fde14610509578063c87b56dd14610532578063c99fe3991461056f5761019c565b806398d5fdca116100c657806398d5fdca146104615780639b642de11461048c578063a22cb465146104b5578063b69ef8a8146104de5761019c565b806370a08231146103ce578063893d20e81461040b57806395d89b41146104365761019c565b806323b872dd1161015957806342842e0e1161013357806342842e0e146103145780636352211e1461033d5780636a1db1bf1461037a5780636c0360eb146103a35761019c565b806323b872dd146102a457806325f9d0e5146102cd5780633ccfd60b1461030a5761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b3146102465780630ee2cb101461026f5780631249c58b1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c391906121d9565b610668565b6040516101d59190612221565b60405180910390f35b3480156101ea57600080fd5b506101f36106c9565b60405161020091906122cc565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190612324565b61075b565b60405161023d9190612392565b60405180910390f35b34801561025257600080fd5b5061026d600480360381019061026891906123d9565b6107a1565b005b34801561027b57600080fd5b506102846108b8565b6040516102919190612392565b60405180910390f35b6102a26108e2565b005b3480156102b057600080fd5b506102cb60048036038101906102c69190612419565b610ab9565b005b3480156102d957600080fd5b506102f460048036038101906102ef919061246c565b610b19565b60405161030191906124a8565b60405180910390f35b610312610b62565b005b34801561032057600080fd5b5061033b60048036038101906103369190612419565b610c13565b005b34801561034957600080fd5b50610364600480360381019061035f9190612324565b610c33565b6040516103719190612392565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c9190612324565b610cb9565b005b3480156103af57600080fd5b506103b8610d53565b6040516103c591906122cc565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f0919061246c565b610de5565b60405161040291906124a8565b60405180910390f35b34801561041757600080fd5b50610420610e9c565b60405161042d9190612392565b60405180910390f35b34801561044257600080fd5b5061044b610ec6565b60405161045891906122cc565b60405180910390f35b34801561046d57600080fd5b50610476610f58565b60405161048391906124a8565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae91906125f8565b610f62565b005b3480156104c157600080fd5b506104dc60048036038101906104d7919061266d565b611005565b005b3480156104ea57600080fd5b506104f361101b565b60405161050091906124a8565b60405180910390f35b34801561051557600080fd5b50610530600480360381019061052b919061274e565b611023565b005b34801561053e57600080fd5b5061055960048036038101906105549190612324565b611085565b60405161056691906122cc565b60405180910390f35b34801561057b57600080fd5b50610584611127565b60405161059191906124a8565b60405180910390f35b3480156105a657600080fd5b506105c160048036038101906105bc9190612324565b611131565b6040516105ce91906122cc565b60405180910390f35b3480156105e357600080fd5b506105fe60048036038101906105f991906127d1565b611143565b60405161060b9190612221565b60405180910390f35b34801561062057600080fd5b506106296111d7565b6040516106369190612392565b60405180910390f35b34801561064b57600080fd5b506106666004803603810190610661919061246c565b611201565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106c257506106c1826112d5565b5b9050919050565b6060600080546106d890612840565b80601f016020809104026020016040519081016040528092919081815260200182805461070490612840565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b5050505050905090565b6000610766826113b7565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107ac82610c33565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610813906128e3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661083b611402565b73ffffffffffffffffffffffffffffffffffffffff16148061086a575061086981610864611402565b611143565b5b6108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090612975565b60405180910390fd5b6108b3838361140a565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f00000000000000000000000000000000000000000000000000000000000000006009541115610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e906129e1565b60405180910390fd5b600a5434101561098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612a4d565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6064600a546109d99190612acb565b9081150290604051600060405180830381858888f1935050505090508015610ab657610a07336009546114c3565b610a9d60095460078054610a1a90612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4690612840565b8015610a935780601f10610a6857610100808354040283529160200191610a93565b820191906000526020600020905b815481529060010190602001808311610a7657829003601f168201915b50505050506116e0565b60096000815480929190610ab090612afc565b91905055505b50565b610aca610ac4611402565b82611784565b610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0090612bb6565b60405180910390fd5b610b14838383611819565b505050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003373ffffffffffffffffffffffffffffffffffffffff1647604051610b8890612c07565b60006040518083038185875af1925050503d8060008114610bc5576040519150601f19603f3d011682016040523d82523d6000602084013e610bca565b606091505b505090508015610c10577f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb333047604051610c0793929190612c1c565b60405180910390a15b50565b610c2e83838360405180602001604052806000815250611023565b505050565b600080610c3f83611b12565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790612c9f565b60405180910390fd5b80915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4090612d0b565b60405180910390fd5b80600a8190555050565b606060078054610d6290612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90612840565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90612d9d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ed590612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0190612840565b8015610f4e5780601f10610f2357610100808354040283529160200191610f4e565b820191906000526020600020905b815481529060010190602001808311610f3157829003601f168201915b5050505050905090565b6000600a54905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612d0b565b60405180910390fd5b80600790816110019190612f69565b5050565b611017611010611402565b8383611b4f565b5050565b600047905090565b61103461102e611402565b83611784565b611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90612bb6565b60405180910390fd5b61107f84848484611cbb565b50505050565b606061109082611d17565b6110c6576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110ce611d58565b6111006110d96106c9565b60076040516020016110ec9291906132c2565b604051602081830303815290604052611dea565b604051602001611111929190613312565b6040516020818303038152906040529050919050565b6000600c54905090565b606061113c82611085565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128890612d0b565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113a057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806113b057506113af82611f4d565b5b9050919050565b6113c081611d17565b6113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690612c9f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661147d83610c33565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990613382565b60405180910390fd5b61153b81611d17565b1561157b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611572906133ee565b60405180910390fd5b611589600083836001611fb7565b61159281611d17565b156115d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c9906133ee565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116dc600083836001611fbd565b5050565b6116e982611d17565b611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90613480565b60405180910390fd5b806006600084815260200190815260200160002090816117489190612f69565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161177891906124a8565b60405180910390a15050565b60008061179083610c33565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117d257506117d18185611143565b5b8061181057508373ffffffffffffffffffffffffffffffffffffffff166117f88461075b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661183982610c33565b73ffffffffffffffffffffffffffffffffffffffff161461188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188690613512565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f5906135a4565b60405180910390fd5b61190b8383836001611fb7565b8273ffffffffffffffffffffffffffffffffffffffff1661192b82610c33565b73ffffffffffffffffffffffffffffffffffffffff1614611981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197890613512565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b0d8383836001611fbd565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb490613610565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611cae9190612221565b60405180910390a3505050565b611cc6848484611819565b611cd284848484611fc3565b611d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d08906136a2565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611d3983611b12565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060078054611d6790612840565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9390612840565b8015611de05780601f10611db557610100808354040283529160200191611de0565b820191906000526020600020905b815481529060010190602001808311611dc357829003601f168201915b5050505050905090565b60606000825103611e0c57604051806020016040528060008152509050611f48565b600060405180606001604052806040815260200161381c6040913990506000600360028551611e3b91906136c2565b611e459190612acb565b6004611e5191906136f6565b67ffffffffffffffff811115611e6a57611e696124cd565b5b6040519080825280601f01601f191660200182016040528015611e9c5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611f08576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611ead565b5050600386510660018114611f245760028114611f3757611f3f565b603d6001830353603d6002830353611f3f565b603d60018303535b50505080925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b6000611fe48473ffffffffffffffffffffffffffffffffffffffff1661214a565b1561213d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261200d611402565b8786866040518563ffffffff1660e01b815260040161202f949392919061378d565b6020604051808303816000875af192505050801561206b57506040513d601f19601f8201168201806040525081019061206891906137ee565b60015b6120ed573d806000811461209b576040519150601f19603f3d011682016040523d82523d6000602084013e6120a0565b606091505b5060008151036120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dc906136a2565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612142565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121b681612181565b81146121c157600080fd5b50565b6000813590506121d3816121ad565b92915050565b6000602082840312156121ef576121ee612177565b5b60006121fd848285016121c4565b91505092915050565b60008115159050919050565b61221b81612206565b82525050565b60006020820190506122366000830184612212565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561227657808201518184015260208101905061225b565b60008484015250505050565b6000601f19601f8301169050919050565b600061229e8261223c565b6122a88185612247565b93506122b8818560208601612258565b6122c181612282565b840191505092915050565b600060208201905081810360008301526122e68184612293565b905092915050565b6000819050919050565b612301816122ee565b811461230c57600080fd5b50565b60008135905061231e816122f8565b92915050565b60006020828403121561233a57612339612177565b5b60006123488482850161230f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061237c82612351565b9050919050565b61238c81612371565b82525050565b60006020820190506123a76000830184612383565b92915050565b6123b681612371565b81146123c157600080fd5b50565b6000813590506123d3816123ad565b92915050565b600080604083850312156123f0576123ef612177565b5b60006123fe858286016123c4565b925050602061240f8582860161230f565b9150509250929050565b60008060006060848603121561243257612431612177565b5b6000612440868287016123c4565b9350506020612451868287016123c4565b92505060406124628682870161230f565b9150509250925092565b60006020828403121561248257612481612177565b5b6000612490848285016123c4565b91505092915050565b6124a2816122ee565b82525050565b60006020820190506124bd6000830184612499565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250582612282565b810181811067ffffffffffffffff82111715612524576125236124cd565b5b80604052505050565b600061253761216d565b905061254382826124fc565b919050565b600067ffffffffffffffff821115612563576125626124cd565b5b61256c82612282565b9050602081019050919050565b82818337600083830152505050565b600061259b61259684612548565b61252d565b9050828152602081018484840111156125b7576125b66124c8565b5b6125c2848285612579565b509392505050565b600082601f8301126125df576125de6124c3565b5b81356125ef848260208601612588565b91505092915050565b60006020828403121561260e5761260d612177565b5b600082013567ffffffffffffffff81111561262c5761262b61217c565b5b612638848285016125ca565b91505092915050565b61264a81612206565b811461265557600080fd5b50565b60008135905061266781612641565b92915050565b6000806040838503121561268457612683612177565b5b6000612692858286016123c4565b92505060206126a385828601612658565b9150509250929050565b600067ffffffffffffffff8211156126c8576126c76124cd565b5b6126d182612282565b9050602081019050919050565b60006126f16126ec846126ad565b61252d565b90508281526020810184848401111561270d5761270c6124c8565b5b612718848285612579565b509392505050565b600082601f830112612735576127346124c3565b5b81356127458482602086016126de565b91505092915050565b6000806000806080858703121561276857612767612177565b5b6000612776878288016123c4565b9450506020612787878288016123c4565b93505060406127988782880161230f565b925050606085013567ffffffffffffffff8111156127b9576127b861217c565b5b6127c587828801612720565b91505092959194509250565b600080604083850312156127e8576127e7612177565b5b60006127f6858286016123c4565b9250506020612807858286016123c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061285857607f821691505b60208210810361286b5761286a612811565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006128cd602183612247565b91506128d882612871565b604082019050919050565b600060208201905081810360008301526128fc816128c0565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061295f603d83612247565b915061296a82612903565b604082019050919050565b6000602082019050818103600083015261298e81612952565b9050919050565b7f4d6178696d756e206e756d62657220776173206d696e74656400000000000000600082015250565b60006129cb601983612247565b91506129d682612995565b602082019050919050565b600060208201905081810360008301526129fa816129be565b9050919050565b7f496e73756666696369656e74206d696e74206665650000000000000000000000600082015250565b6000612a37601583612247565b9150612a4282612a01565b602082019050919050565b60006020820190508181036000830152612a6681612a2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ad6826122ee565b9150612ae1836122ee565b925082612af157612af0612a6d565b5b828204905092915050565b6000612b07826122ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b3957612b38612a9c565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612ba0602d83612247565b9150612bab82612b44565b604082019050919050565b60006020820190508181036000830152612bcf81612b93565b9050919050565b600081905092915050565b50565b6000612bf1600083612bd6565b9150612bfc82612be1565b600082019050919050565b6000612c1282612be4565b9150819050919050565b6000606082019050612c316000830186612383565b612c3e6020830185612383565b612c4b6040830184612499565b949350505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612c89601883612247565b9150612c9482612c53565b602082019050919050565b60006020820190508181036000830152612cb881612c7c565b9050919050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612cf5600a83612247565b9150612d0082612cbf565b602082019050919050565b60006020820190508181036000830152612d2481612ce8565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612d87602983612247565b9150612d9282612d2b565b604082019050919050565b60006020820190508181036000830152612db681612d7a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e1f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612de2565b612e298683612de2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e66612e61612e5c846122ee565b612e41565b6122ee565b9050919050565b6000819050919050565b612e8083612e4b565b612e94612e8c82612e6d565b848454612def565b825550505050565b600090565b612ea9612e9c565b612eb4818484612e77565b505050565b5b81811015612ed857612ecd600082612ea1565b600181019050612eba565b5050565b601f821115612f1d57612eee81612dbd565b612ef784612dd2565b81016020851015612f06578190505b612f1a612f1285612dd2565b830182612eb9565b50505b505050565b600082821c905092915050565b6000612f4060001984600802612f22565b1980831691505092915050565b6000612f598383612f2f565b9150826002028217905092915050565b612f728261223c565b67ffffffffffffffff811115612f8b57612f8a6124cd565b5b612f958254612840565b612fa0828285612edc565b600060209050601f831160018114612fd35760008415612fc1578287015190505b612fcb8582612f4d565b865550613033565b601f198416612fe186612dbd565b60005b8281101561300957848901518255600182019150602085019450602081019050612fe4565b868310156130265784890151613022601f891682612f2f565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b600061307c60098361303b565b915061308782613046565b600982019050919050565b600061309d8261223c565b6130a7818561303b565b93506130b7818560208601612258565b80840191505092915050565b7f222c20226465736372697074696f6e223a22416e204e465420736d617274206360008201527f6f6e747261637420746861742067656e65726174656420627920494e5645535760208201527f45455420736d61727420636f6e7472616374222c200000000000000000000000604082015250565b600061314560558361303b565b9150613150826130c3565b605582019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b60006131dd60438361303b565b91506131e88261315b565b604382019050919050565b6000815461320081612840565b61320a818661303b565b94506001821660008114613225576001811461323a5761326d565b60ff198316865281151582028601935061326d565b61324385612dbd565b60005b8381101561326557815481890152600182019150602081019050613246565b838801955050505b50505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006132ac60028361303b565b91506132b782613276565b600282019050919050565b60006132cd8261306f565b91506132d98285613092565b91506132e482613138565b91506132ef826131d0565b91506132fb82846131f3565b91506133068261329f565b91508190509392505050565b600061331e8285613092565b915061332a8284613092565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061336c602083612247565b915061337782613336565b602082019050919050565b6000602082019050818103600083015261339b8161335f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006133d8601c83612247565b91506133e3826133a2565b602082019050919050565b60006020820190508181036000830152613407816133cb565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061346a602e83612247565b91506134758261340e565b604082019050919050565b600060208201905081810360008301526134998161345d565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006134fc602583612247565b9150613507826134a0565b604082019050919050565b6000602082019050818103600083015261352b816134ef565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061358e602483612247565b915061359982613532565b604082019050919050565b600060208201905081810360008301526135bd81613581565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135fa601983612247565b9150613605826135c4565b602082019050919050565b60006020820190508181036000830152613629816135ed565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061368c603283612247565b915061369782613630565b604082019050919050565b600060208201905081810360008301526136bb8161367f565b9050919050565b60006136cd826122ee565b91506136d8836122ee565b92508282019050808211156136f0576136ef612a9c565b5b92915050565b6000613701826122ee565b915061370c836122ee565b925082820261371a816122ee565b9150828204841483151761373157613730612a9c565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b600061375f82613738565b6137698185613743565b9350613779818560208601612258565b61378281612282565b840191505092915050565b60006080820190506137a26000830187612383565b6137af6020830186612383565b6137bc6040830185612499565b81810360608301526137ce8184613754565b905095945050505050565b6000815190506137e8816121ad565b92915050565b60006020828403121561380457613803612177565b5b6000613812848285016137d9565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212200450640929eefaa8f6f6c78f586945d1f3f6fd3756f4dd658b885bfea93e96bb64736f6c63430008110033a2646970667358221220aad3a1b08b595793ee7114cdaa9d640a5abf57e2140e0d33debee19aca9293d064736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000975760003560e01c806352f7c988116200006157806352f7c9881462000182578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632e1a7d4d14620000a457806334c925f014620000c45780633649a9bd146200010857806347734892146200013e576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc91906200080d565b62000258565b005b348015620000d157600080fd5b50620000f06004803603810190620000ea9190620008a4565b6200032b565b604051620000ff9190620009a4565b60405180910390f35b62000126600480360381019062000120919062000b93565b620003fa565b60405162000135919062000c8c565b60405180910390f35b3480156200014b57600080fd5b506200016a6004803603810190620001649190620008a4565b62000502565b60405162000179919062000cba565b60405180910390f35b3480156200018f57600080fd5b50620001ae6004803603810190620001a8919062000cd7565b6200054b565b005b348015620001bd57600080fd5b50620001c86200058c565b005b348015620001d757600080fd5b50620001e2620005a4565b604051620001f1919062000c8c565b60405180910390f35b3480156200020757600080fd5b5062000212620005cd565b60405162000221919062000cba565b60405180910390f35b3480156200023757600080fd5b50620002566004803603810190620002509190620008a4565b620005d5565b005b620002626200065f565b4781116200032857600062000276620006e4565b73ffffffffffffffffffffffffffffffffffffffff16826040516200029b9062000d53565b60006040518083038185875af1925050503d8060008114620002da576040519150601f19603f3d011682016040523d82523d6000602084013e620002df565b606091505b505090508062000326576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200031d9062000dcb565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620003ee57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620003a3575b50505050509050919050565b600060025434101562000444576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016200043b9062000e3d565b60405180910390fd5b6000878787873388886040516200045b90620007b0565b6200046d979695949392919062000f0a565b604051809103906000f0801580156200048a573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b4060289604051620004ec919062000f8e565b60405180910390a3809150509695505050505050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620005556200065f565b600082036200056657806002819055505b600182036200057757806003819055505b600282036200058857806004819055505b5050565b620005966200065f565b620005a26000620006ec565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005df6200065f565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160362000651576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006489062001028565b60405180910390fd5b6200065c81620006ec565b50565b62000669620006e4565b73ffffffffffffffffffffffffffffffffffffffff1662000689620005a4565b73ffffffffffffffffffffffffffffffffffffffff1614620006e2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006d9906200109a565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b61401480620010bd83390190565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b620007e781620007d2565b8114620007f357600080fd5b50565b6000813590506200080781620007dc565b92915050565b600060208284031215620008265762000825620007c8565b5b60006200083684828501620007f6565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200086c826200083f565b9050919050565b6200087e816200085f565b81146200088a57600080fd5b50565b6000813590506200089e8162000873565b92915050565b600060208284031215620008bd57620008bc620007c8565b5b6000620008cd848285016200088d565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b6200090d816200085f565b82525050565b600062000921838362000902565b60208301905092915050565b6000602082019050919050565b60006200094782620008d6565b620009538185620008e1565b93506200096083620008f2565b8060005b83811015620009975781516200097b888262000913565b975062000988836200092d565b92505060018101905062000964565b5085935050505092915050565b60006020820190508181036000830152620009c081846200093a565b905092915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b62000a1d82620009d2565b810181811067ffffffffffffffff8211171562000a3f5762000a3e620009e3565b5b80604052505050565b600062000a54620007be565b905062000a62828262000a12565b919050565b600067ffffffffffffffff82111562000a855762000a84620009e3565b5b62000a9082620009d2565b9050602081019050919050565b82818337600083830152505050565b600062000ac362000abd8462000a67565b62000a48565b90508281526020810184848401111562000ae25762000ae1620009cd565b5b62000aef84828562000a9d565b509392505050565b600082601f83011262000b0f5762000b0e620009c8565b5b813562000b2184826020860162000aac565b91505092915050565b600080fd5b600080fd5b60008083601f84011262000b4d5762000b4c620009c8565b5b8235905067ffffffffffffffff81111562000b6d5762000b6c62000b2a565b5b60208301915083600182028301111562000b8c5762000b8b62000b2f565b5b9250929050565b60008060008060008060a0878903121562000bb35762000bb2620007c8565b5b600087013567ffffffffffffffff81111562000bd45762000bd3620007cd565b5b62000be289828a0162000af7565b965050602087013567ffffffffffffffff81111562000c065762000c05620007cd565b5b62000c1489828a0162000af7565b955050604062000c2789828a01620007f6565b945050606062000c3a89828a01620007f6565b935050608087013567ffffffffffffffff81111562000c5e5762000c5d620007cd565b5b62000c6c89828a0162000b34565b92509250509295509295509295565b62000c86816200085f565b82525050565b600060208201905062000ca3600083018462000c7b565b92915050565b62000cb481620007d2565b82525050565b600060208201905062000cd1600083018462000ca9565b92915050565b6000806040838503121562000cf15762000cf0620007c8565b5b600062000d0185828601620007f6565b925050602062000d1485828601620007f6565b9150509250929050565b600081905092915050565b50565b600062000d3b60008362000d1e565b915062000d488262000d29565b600082019050919050565b600062000d608262000d2c565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000db3600b8362000d6a565b915062000dc08262000d7b565b602082019050919050565b6000602082019050818103600083015262000de68162000da4565b9050919050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000e2560138362000d6a565b915062000e328262000ded565b602082019050919050565b6000602082019050818103600083015262000e588162000e16565b9050919050565b600081519050919050565b60005b8381101562000e8a57808201518184015260208101905062000e6d565b60008484015250505050565b600062000ea38262000e5f565b62000eaf818562000d6a565b935062000ec181856020860162000e6a565b62000ecc81620009d2565b840191505092915050565b600062000ee5838562000d6a565b935062000ef483858462000a9d565b62000eff83620009d2565b840190509392505050565b600060c082019050818103600083015262000f26818a62000e96565b9050818103602083015262000f3c818962000e96565b905062000f4d604083018862000ca9565b62000f5c606083018762000ca9565b62000f6b608083018662000c7b565b81810360a083015262000f8081848662000ed7565b905098975050505050505050565b6000602082019050818103600083015262000faa818462000e96565b905092915050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b60006200101060268362000d6a565b91506200101d8262000fb2565b604082019050919050565b60006020820190508181036000830152620010438162001001565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200108260208362000d6a565b91506200108f826200104a565b602082019050919050565b60006020820190508181036000830152620010b58162001073565b905091905056fe60a060405260016009553480156200001657600080fd5b50604051620040143803806200401483398181016040528101906200003c919062000346565b858581600090816200004f919062000680565b50806001908162000061919062000680565b50505083600a81905550826080818152505081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000c5919062000680565b5033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050505062000767565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200017c8262000131565b810181811067ffffffffffffffff821117156200019e576200019d62000142565b5b80604052505050565b6000620001b362000113565b9050620001c1828262000171565b919050565b600067ffffffffffffffff821115620001e457620001e362000142565b5b620001ef8262000131565b9050602081019050919050565b60005b838110156200021c578082015181840152602081019050620001ff565b60008484015250505050565b60006200023f6200023984620001c6565b620001a7565b9050828152602081018484840111156200025e576200025d6200012c565b5b6200026b848285620001fc565b509392505050565b600082601f8301126200028b576200028a62000127565b5b81516200029d84826020860162000228565b91505092915050565b6000819050919050565b620002bb81620002a6565b8114620002c757600080fd5b50565b600081519050620002db81620002b0565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030e82620002e1565b9050919050565b620003208162000301565b81146200032c57600080fd5b50565b600081519050620003408162000315565b92915050565b60008060008060008060c087890312156200036657620003656200011d565b5b600087015167ffffffffffffffff81111562000387576200038662000122565b5b6200039589828a0162000273565b965050602087015167ffffffffffffffff811115620003b957620003b862000122565b5b620003c789828a0162000273565b9550506040620003da89828a01620002ca565b9450506060620003ed89828a01620002ca565b93505060806200040089828a016200032f565b92505060a087015167ffffffffffffffff81111562000424576200042362000122565b5b6200043289828a0162000273565b9150509295509295509295565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200049257607f821691505b602082108103620004a857620004a76200044a565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620005127fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004d3565b6200051e8683620004d3565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005616200055b6200055584620002a6565b62000536565b620002a6565b9050919050565b6000819050919050565b6200057d8362000540565b620005956200058c8262000568565b848454620004e0565b825550505050565b600090565b620005ac6200059d565b620005b981848462000572565b505050565b5b81811015620005e157620005d5600082620005a2565b600181019050620005bf565b5050565b601f8211156200063057620005fa81620004ae565b6200060584620004c3565b8101602085101562000615578190505b6200062d6200062485620004c3565b830182620005be565b50505b505050565b600082821c905092915050565b6000620006556000198460080262000635565b1980831691505092915050565b600062000670838362000642565b9150826002028217905092915050565b6200068b826200043f565b67ffffffffffffffff811115620006a757620006a662000142565b5b620006b3825462000479565b620006c0828285620005e5565b600060209050601f831160018114620006f85760008415620006e3578287015190505b620006ef858262000662565b8655506200075f565b601f1984166200070886620004ae565b60005b8281101562000732578489015182556001820191506020850194506020810190506200070b565b868310156200075257848901516200074e601f89168262000642565b8355505b6001600288020188555050505b505050505050565b6080516138916200078360003960006108e401526138916000f3fe60806040526004361061019c5760003560e01c806370a08231116100ec578063b88d4fde1161008a578063da0544aa11610064578063da0544aa1461059a578063e985e9c5146105d7578063f117771214610614578063f2fde38b1461063f5761019c565b8063b88d4fde14610509578063c87b56dd14610532578063c99fe3991461056f5761019c565b806398d5fdca116100c657806398d5fdca146104615780639b642de11461048c578063a22cb465146104b5578063b69ef8a8146104de5761019c565b806370a08231146103ce578063893d20e81461040b57806395d89b41146104365761019c565b806323b872dd1161015957806342842e0e1161013357806342842e0e146103145780636352211e1461033d5780636a1db1bf1461037a5780636c0360eb146103a35761019c565b806323b872dd146102a457806325f9d0e5146102cd5780633ccfd60b1461030a5761019c565b806301ffc9a7146101a157806306fdde03146101de578063081812fc14610209578063095ea7b3146102465780630ee2cb101461026f5780631249c58b1461029a575b600080fd5b3480156101ad57600080fd5b506101c860048036038101906101c391906121d9565b610668565b6040516101d59190612221565b60405180910390f35b3480156101ea57600080fd5b506101f36106c9565b60405161020091906122cc565b60405180910390f35b34801561021557600080fd5b50610230600480360381019061022b9190612324565b61075b565b60405161023d9190612392565b60405180910390f35b34801561025257600080fd5b5061026d600480360381019061026891906123d9565b6107a1565b005b34801561027b57600080fd5b506102846108b8565b6040516102919190612392565b60405180910390f35b6102a26108e2565b005b3480156102b057600080fd5b506102cb60048036038101906102c69190612419565b610ab9565b005b3480156102d957600080fd5b506102f460048036038101906102ef919061246c565b610b19565b60405161030191906124a8565b60405180910390f35b610312610b62565b005b34801561032057600080fd5b5061033b60048036038101906103369190612419565b610c13565b005b34801561034957600080fd5b50610364600480360381019061035f9190612324565b610c33565b6040516103719190612392565b60405180910390f35b34801561038657600080fd5b506103a1600480360381019061039c9190612324565b610cb9565b005b3480156103af57600080fd5b506103b8610d53565b6040516103c591906122cc565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f0919061246c565b610de5565b60405161040291906124a8565b60405180910390f35b34801561041757600080fd5b50610420610e9c565b60405161042d9190612392565b60405180910390f35b34801561044257600080fd5b5061044b610ec6565b60405161045891906122cc565b60405180910390f35b34801561046d57600080fd5b50610476610f58565b60405161048391906124a8565b60405180910390f35b34801561049857600080fd5b506104b360048036038101906104ae91906125f8565b610f62565b005b3480156104c157600080fd5b506104dc60048036038101906104d7919061266d565b611005565b005b3480156104ea57600080fd5b506104f361101b565b60405161050091906124a8565b60405180910390f35b34801561051557600080fd5b50610530600480360381019061052b919061274e565b611023565b005b34801561053e57600080fd5b5061055960048036038101906105549190612324565b611085565b60405161056691906122cc565b60405180910390f35b34801561057b57600080fd5b50610584611127565b60405161059191906124a8565b60405180910390f35b3480156105a657600080fd5b506105c160048036038101906105bc9190612324565b611131565b6040516105ce91906122cc565b60405180910390f35b3480156105e357600080fd5b506105fe60048036038101906105f991906127d1565b611143565b60405161060b9190612221565b60405180910390f35b34801561062057600080fd5b506106296111d7565b6040516106369190612392565b60405180910390f35b34801561064b57600080fd5b506106666004803603810190610661919061246c565b611201565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806106c257506106c1826112d5565b5b9050919050565b6060600080546106d890612840565b80601f016020809104026020016040519081016040528092919081815260200182805461070490612840565b80156107515780601f1061072657610100808354040283529160200191610751565b820191906000526020600020905b81548152906001019060200180831161073457829003601f168201915b5050505050905090565b6000610766826113b7565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b60006107ac82610c33565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361081c576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610813906128e3565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff1661083b611402565b73ffffffffffffffffffffffffffffffffffffffff16148061086a575061086981610864611402565b611143565b5b6108a9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a090612975565b60405180910390fd5b6108b3838361140a565b505050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b7f00000000000000000000000000000000000000000000000000000000000000006009541115610947576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161093e906129e1565b60405180910390fd5b600a5434101561098c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161098390612a4d565b60405180910390fd5b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6064600a546109d99190612acb565b9081150290604051600060405180830381858888f1935050505090508015610ab657610a07336009546114c3565b610a9d60095460078054610a1a90612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610a4690612840565b8015610a935780601f10610a6857610100808354040283529160200191610a93565b820191906000526020600020905b815481529060010190602001808311610a7657829003601f168201915b50505050506116e0565b60096000815480929190610ab090612afc565b91905055505b50565b610aca610ac4611402565b82611784565b610b09576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0090612bb6565b60405180910390fd5b610b14838383611819565b505050565b6000601160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60003373ffffffffffffffffffffffffffffffffffffffff1647604051610b8890612c07565b60006040518083038185875af1925050503d8060008114610bc5576040519150601f19603f3d011682016040523d82523d6000602084013e610bca565b606091505b505090508015610c10577f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb333047604051610c0793929190612c1c565b60405180910390a15b50565b610c2e83838360405180602001604052806000815250611023565b505050565b600080610c3f83611b12565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603610cb0576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ca790612c9f565b60405180910390fd5b80915050919050565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610d49576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d4090612d0b565b60405180910390fd5b80600a8190555050565b606060078054610d6290612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610d8e90612840565b8015610ddb5780601f10610db057610100808354040283529160200191610ddb565b820191906000526020600020905b815481529060010190602001808311610dbe57829003601f168201915b5050505050905090565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610e55576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e4c90612d9d565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b606060018054610ed590612840565b80601f0160208091040260200160405190810160405280929190818152602001828054610f0190612840565b8015610f4e5780601f10610f2357610100808354040283529160200191610f4e565b820191906000526020600020905b815481529060010190602001808311610f3157829003601f168201915b5050505050905090565b6000600a54905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ff2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610fe990612d0b565b60405180910390fd5b80600790816110019190612f69565b5050565b611017611010611402565b8383611b4f565b5050565b600047905090565b61103461102e611402565b83611784565b611073576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161106a90612bb6565b60405180910390fd5b61107f84848484611cbb565b50505050565b606061109082611d17565b6110c6576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6110ce611d58565b6111006110d96106c9565b60076040516020016110ec9291906132c2565b604051602081830303815290604052611dea565b604051602001611111929190613312565b6040516020818303038152906040529050919050565b6000600c54905090565b606061113c82611085565b9050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b6000600b60009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614611291576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161128890612d0b565b60405180910390fd5b80600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806113a057507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b806113b057506113af82611f4d565b5b9050919050565b6113c081611d17565b6113ff576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016113f690612c9f565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff1661147d83610c33565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603611532576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161152990613382565b60405180910390fd5b61153b81611d17565b1561157b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611572906133ee565b60405180910390fd5b611589600083836001611fb7565b61159281611d17565b156115d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016115c9906133ee565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116dc600083836001611fbd565b5050565b6116e982611d17565b611728576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161171f90613480565b60405180910390fd5b806006600084815260200190815260200160002090816117489190612f69565b507ff8e1a15aba9398e019f0b49df1a4fde98ee17ae345cb5f6b5e2c27f5033e8ce78260405161177891906124a8565b60405180910390a15050565b60008061179083610c33565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806117d257506117d18185611143565b5b8061181057508373ffffffffffffffffffffffffffffffffffffffff166117f88461075b565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661183982610c33565b73ffffffffffffffffffffffffffffffffffffffff161461188f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188690613512565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036118fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118f5906135a4565b60405180910390fd5b61190b8383836001611fb7565b8273ffffffffffffffffffffffffffffffffffffffff1661192b82610c33565b73ffffffffffffffffffffffffffffffffffffffff1614611981576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161197890613512565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611b0d8383836001611fbd565b505050565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611bbd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611bb490613610565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611cae9190612221565b60405180910390a3505050565b611cc6848484611819565b611cd284848484611fc3565b611d11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611d08906136a2565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611d3983611b12565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060078054611d6790612840565b80601f0160208091040260200160405190810160405280929190818152602001828054611d9390612840565b8015611de05780601f10611db557610100808354040283529160200191611de0565b820191906000526020600020905b815481529060010190602001808311611dc357829003601f168201915b5050505050905090565b60606000825103611e0c57604051806020016040528060008152509050611f48565b600060405180606001604052806040815260200161381c6040913990506000600360028551611e3b91906136c2565b611e459190612acb565b6004611e5191906136f6565b67ffffffffffffffff811115611e6a57611e696124cd565b5b6040519080825280601f01601f191660200182016040528015611e9c5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611f08576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611ead565b5050600386510660018114611f245760028114611f3757611f3f565b603d6001830353603d6002830353611f3f565b603d60018303535b50505080925050505b919050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b6000611fe48473ffffffffffffffffffffffffffffffffffffffff1661214a565b1561213d578373ffffffffffffffffffffffffffffffffffffffff1663150b7a0261200d611402565b8786866040518563ffffffff1660e01b815260040161202f949392919061378d565b6020604051808303816000875af192505050801561206b57506040513d601f19601f8201168201806040525081019061206891906137ee565b60015b6120ed573d806000811461209b576040519150601f19603f3d011682016040523d82523d6000602084013e6120a0565b606091505b5060008151036120e5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016120dc906136a2565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612142565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6121b681612181565b81146121c157600080fd5b50565b6000813590506121d3816121ad565b92915050565b6000602082840312156121ef576121ee612177565b5b60006121fd848285016121c4565b91505092915050565b60008115159050919050565b61221b81612206565b82525050565b60006020820190506122366000830184612212565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561227657808201518184015260208101905061225b565b60008484015250505050565b6000601f19601f8301169050919050565b600061229e8261223c565b6122a88185612247565b93506122b8818560208601612258565b6122c181612282565b840191505092915050565b600060208201905081810360008301526122e68184612293565b905092915050565b6000819050919050565b612301816122ee565b811461230c57600080fd5b50565b60008135905061231e816122f8565b92915050565b60006020828403121561233a57612339612177565b5b60006123488482850161230f565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061237c82612351565b9050919050565b61238c81612371565b82525050565b60006020820190506123a76000830184612383565b92915050565b6123b681612371565b81146123c157600080fd5b50565b6000813590506123d3816123ad565b92915050565b600080604083850312156123f0576123ef612177565b5b60006123fe858286016123c4565b925050602061240f8582860161230f565b9150509250929050565b60008060006060848603121561243257612431612177565b5b6000612440868287016123c4565b9350506020612451868287016123c4565b92505060406124628682870161230f565b9150509250925092565b60006020828403121561248257612481612177565b5b6000612490848285016123c4565b91505092915050565b6124a2816122ee565b82525050565b60006020820190506124bd6000830184612499565b92915050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61250582612282565b810181811067ffffffffffffffff82111715612524576125236124cd565b5b80604052505050565b600061253761216d565b905061254382826124fc565b919050565b600067ffffffffffffffff821115612563576125626124cd565b5b61256c82612282565b9050602081019050919050565b82818337600083830152505050565b600061259b61259684612548565b61252d565b9050828152602081018484840111156125b7576125b66124c8565b5b6125c2848285612579565b509392505050565b600082601f8301126125df576125de6124c3565b5b81356125ef848260208601612588565b91505092915050565b60006020828403121561260e5761260d612177565b5b600082013567ffffffffffffffff81111561262c5761262b61217c565b5b612638848285016125ca565b91505092915050565b61264a81612206565b811461265557600080fd5b50565b60008135905061266781612641565b92915050565b6000806040838503121561268457612683612177565b5b6000612692858286016123c4565b92505060206126a385828601612658565b9150509250929050565b600067ffffffffffffffff8211156126c8576126c76124cd565b5b6126d182612282565b9050602081019050919050565b60006126f16126ec846126ad565b61252d565b90508281526020810184848401111561270d5761270c6124c8565b5b612718848285612579565b509392505050565b600082601f830112612735576127346124c3565b5b81356127458482602086016126de565b91505092915050565b6000806000806080858703121561276857612767612177565b5b6000612776878288016123c4565b9450506020612787878288016123c4565b93505060406127988782880161230f565b925050606085013567ffffffffffffffff8111156127b9576127b861217c565b5b6127c587828801612720565b91505092959194509250565b600080604083850312156127e8576127e7612177565b5b60006127f6858286016123c4565b9250506020612807858286016123c4565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061285857607f821691505b60208210810361286b5761286a612811565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b60006128cd602183612247565b91506128d882612871565b604082019050919050565b600060208201905081810360008301526128fc816128c0565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b600061295f603d83612247565b915061296a82612903565b604082019050919050565b6000602082019050818103600083015261298e81612952565b9050919050565b7f4d6178696d756e206e756d62657220776173206d696e74656400000000000000600082015250565b60006129cb601983612247565b91506129d682612995565b602082019050919050565b600060208201905081810360008301526129fa816129be565b9050919050565b7f496e73756666696369656e74206d696e74206665650000000000000000000000600082015250565b6000612a37601583612247565b9150612a4282612a01565b602082019050919050565b60006020820190508181036000830152612a6681612a2a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612ad6826122ee565b9150612ae1836122ee565b925082612af157612af0612a6d565b5b828204905092915050565b6000612b07826122ee565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612b3957612b38612a9c565b5b600182019050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612ba0602d83612247565b9150612bab82612b44565b604082019050919050565b60006020820190508181036000830152612bcf81612b93565b9050919050565b600081905092915050565b50565b6000612bf1600083612bd6565b9150612bfc82612be1565b600082019050919050565b6000612c1282612be4565b9150819050919050565b6000606082019050612c316000830186612383565b612c3e6020830185612383565b612c4b6040830184612499565b949350505050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612c89601883612247565b9150612c9482612c53565b602082019050919050565b60006020820190508181036000830152612cb881612c7c565b9050919050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612cf5600a83612247565b9150612d0082612cbf565b602082019050919050565b60006020820190508181036000830152612d2481612ce8565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612d87602983612247565b9150612d9282612d2b565b604082019050919050565b60006020820190508181036000830152612db681612d7a565b9050919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302612e1f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82612de2565b612e298683612de2565b95508019841693508086168417925050509392505050565b6000819050919050565b6000612e66612e61612e5c846122ee565b612e41565b6122ee565b9050919050565b6000819050919050565b612e8083612e4b565b612e94612e8c82612e6d565b848454612def565b825550505050565b600090565b612ea9612e9c565b612eb4818484612e77565b505050565b5b81811015612ed857612ecd600082612ea1565b600181019050612eba565b5050565b601f821115612f1d57612eee81612dbd565b612ef784612dd2565b81016020851015612f06578190505b612f1a612f1285612dd2565b830182612eb9565b50505b505050565b600082821c905092915050565b6000612f4060001984600802612f22565b1980831691505092915050565b6000612f598383612f2f565b9150826002028217905092915050565b612f728261223c565b67ffffffffffffffff811115612f8b57612f8a6124cd565b5b612f958254612840565b612fa0828285612edc565b600060209050601f831160018114612fd35760008415612fc1578287015190505b612fcb8582612f4d565b865550613033565b601f198416612fe186612dbd565b60005b8281101561300957848901518255600182019150602085019450602081019050612fe4565b868310156130265784890151613022601f891682612f2f565b8355505b6001600288020188555050505b505050505050565b600081905092915050565b7f7b226e616d65223a220000000000000000000000000000000000000000000000600082015250565b600061307c60098361303b565b915061308782613046565b600982019050919050565b600061309d8261223c565b6130a7818561303b565b93506130b7818560208601612258565b80840191505092915050565b7f222c20226465736372697074696f6e223a22416e204e465420736d617274206360008201527f6f6e747261637420746861742067656e65726174656420627920494e5645535760208201527f45455420736d61727420636f6e7472616374222c200000000000000000000000604082015250565b600061314560558361303b565b9150613150826130c3565b605582019050919050565b7f2261747472696275746573223a205b7b2274726169745f74797065223a20226360008201527f6f6f6c6e657373222c202276616c7565223a203130307d5d2c2022696d61676560208201527f223a220000000000000000000000000000000000000000000000000000000000604082015250565b60006131dd60438361303b565b91506131e88261315b565b604382019050919050565b6000815461320081612840565b61320a818661303b565b94506001821660008114613225576001811461323a5761326d565b60ff198316865281151582028601935061326d565b61324385612dbd565b60005b8381101561326557815481890152600182019150602081019050613246565b838801955050505b50505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b60006132ac60028361303b565b91506132b782613276565b600282019050919050565b60006132cd8261306f565b91506132d98285613092565b91506132e482613138565b91506132ef826131d0565b91506132fb82846131f3565b91506133068261329f565b91508190509392505050565b600061331e8285613092565b915061332a8284613092565b91508190509392505050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b600061336c602083612247565b915061337782613336565b602082019050919050565b6000602082019050818103600083015261339b8161335f565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006133d8601c83612247565b91506133e3826133a2565b602082019050919050565b60006020820190508181036000830152613407816133cb565b9050919050565b7f45524337323155524953746f726167653a2055524920736574206f66206e6f6e60008201527f6578697374656e7420746f6b656e000000000000000000000000000000000000602082015250565b600061346a602e83612247565b91506134758261340e565b604082019050919050565b600060208201905081810360008301526134998161345d565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b60006134fc602583612247565b9150613507826134a0565b604082019050919050565b6000602082019050818103600083015261352b816134ef565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b600061358e602483612247565b915061359982613532565b604082019050919050565b600060208201905081810360008301526135bd81613581565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b60006135fa601983612247565b9150613605826135c4565b602082019050919050565b60006020820190508181036000830152613629816135ed565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b600061368c603283612247565b915061369782613630565b604082019050919050565b600060208201905081810360008301526136bb8161367f565b9050919050565b60006136cd826122ee565b91506136d8836122ee565b92508282019050808211156136f0576136ef612a9c565b5b92915050565b6000613701826122ee565b915061370c836122ee565b925082820261371a816122ee565b9150828204841483151761373157613730612a9c565b5b5092915050565b600081519050919050565b600082825260208201905092915050565b600061375f82613738565b6137698185613743565b9350613779818560208601612258565b61378281612282565b840191505092915050565b60006080820190506137a26000830187612383565b6137af6020830186612383565b6137bc6040830185612499565b81810360608301526137ce8184613754565b905095945050505050565b6000815190506137e8816121ad565b92915050565b60006020828403121561380457613803612177565b5b6000613812848285016137d9565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212200450640929eefaa8f6f6c78f586945d1f3f6fd3756f4dd658b885bfea93e96bb64736f6c63430008110033a2646970667358221220aad3a1b08b595793ee7114cdaa9d640a5abf57e2140e0d33debee19aca9293d064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/Creator.sol:Creator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3035,
        "contract": "contracts/Creator.sol:Creator",
        "label": "s_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3037,
        "contract": "contracts/Creator.sol:Creator",
        "label": "deployCost",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 3039,
        "contract": "contracts/Creator.sol:Creator",
        "label": "mintFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 3041,
        "contract": "contracts/Creator.sol:Creator",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 3045,
        "contract": "contracts/Creator.sol:Creator",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3050,
        "contract": "contracts/Creator.sol:Creator",
        "label": "addressToContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}