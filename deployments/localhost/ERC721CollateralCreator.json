{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "contractAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "ERC721Create",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "balance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "mintfee",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "url",
          "type": "string"
        }
      ],
      "name": "createERC721",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "who",
          "type": "address"
        }
      ],
      "name": "getUserBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "feeAmount",
          "type": "uint256"
        }
      ],
      "name": "setFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xea0fe6882738acb95fb2e286544f0dfde8e13e0ba5e3c0c16e7e0dc021362bbb",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "4596772",
    "logsBloom": "0x
    "blockHash": "0x1ba3ff57df4cc552459cf8c1865a80695c6bab2765e5d8868ed5fed5182d47e4",
    "transactionHash": "0xea0fe6882738acb95fb2e286544f0dfde8e13e0ba5e3c0c16e7e0dc021362bbb",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 2,
        "transactionHash": "0xea0fe6882738acb95fb2e286544f0dfde8e13e0ba5e3c0c16e7e0dc021362bbb",
        "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x1ba3ff57df4cc552459cf8c1865a80695c6bab2765e5d8868ed5fed5182d47e4"
      }
    ],
    "blockNumber": 2,
    "cumulativeGasUsed": "4596772",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "aebcd8aa1dc15f2af2c21ac7c34a7420",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"contractAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"ERC721Create\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"balance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"mintfee\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"url\",\"type\":\"string\"}],\"name\":\"createERC721\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"who\",\"type\":\"address\"}],\"name\":\"getUserBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"feeAmount\",\"type\":\"uint256\"}],\"name\":\"setFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/ERC721CollateralCreator.sol\":\"ERC721CollateralCreator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xba43b97fba0d32eb4254f6a5a297b39a19a247082a02d6e69349e071e2946218\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0xd04b0f06e0666f29cf7cccc82894de541e19bb30a765b107b1e40bb7fe5f7d7a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC4906.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (interfaces/IERC4906.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\nimport \\\"./IERC721.sol\\\";\\n\\n/// @title EIP-721 Metadata Update Extension\\ninterface IERC4906 is IERC165, IERC721 {\\n    /// @dev This event emits when the metadata of a token is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFT.\\n    event MetadataUpdate(uint256 _tokenId);\\n\\n    /// @dev This event emits when the metadata of a range of tokens is changed.\\n    /// So that the third-party platforms such as NFT market could\\n    /// timely update the images and related attributes of the NFTs.\\n    event BatchMetadataUpdate(uint256 _fromTokenId, uint256 _toTokenId);\\n}\\n\",\"keccak256\":\"0x2a9dadb806be80dd451821f1f1190eb9aa6f6edae85b185db29d60767cc0c5f4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(address from, address to, uint256 firstTokenId, uint256 batchSize) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x2c309e7df9e05e6ce15bedfe74f3c61b467fc37e0fae9eab496acf5ea0bbd7ff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5bce51e11f7d194b79ea59fe00c9e8de9fa2c5530124960f29a24d4c740a3266\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC721/extensions/ERC721URIStorage.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"../../../interfaces/IERC4906.sol\\\";\\n\\n/**\\n * @dev ERC721 token with storage based token URI management.\\n */\\nabstract contract ERC721URIStorage is IERC4906, ERC721 {\\n    using Strings for uint256;\\n\\n    // Optional mapping for token URIs\\n    mapping(uint256 => string) private _tokenURIs;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC721, IERC165) returns (bool) {\\n        return interfaceId == bytes4(0x49064906) || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory _tokenURI = _tokenURIs[tokenId];\\n        string memory base = _baseURI();\\n\\n        // If there is no base URI, return the token URI.\\n        if (bytes(base).length == 0) {\\n            return _tokenURI;\\n        }\\n        // If both are set, concatenate the baseURI and tokenURI (via abi.encodePacked).\\n        if (bytes(_tokenURI).length > 0) {\\n            return string(abi.encodePacked(base, _tokenURI));\\n        }\\n\\n        return super.tokenURI(tokenId);\\n    }\\n\\n    /**\\n     * @dev Sets `_tokenURI` as the tokenURI of `tokenId`.\\n     *\\n     * Emits {MetadataUpdate}.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _setTokenURI(uint256 tokenId, string memory _tokenURI) internal virtual {\\n        require(_exists(tokenId), \\\"ERC721URIStorage: URI set of nonexistent token\\\");\\n        _tokenURIs[tokenId] = _tokenURI;\\n\\n        emit MetadataUpdate(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_burn}. This override additionally checks to see if a\\n     * token-specific URI was set for the token, and if so, it deletes the token URI from\\n     * the storage mapping.\\n     */\\n    function _burn(uint256 tokenId) internal virtual override {\\n        super._burn(tokenId);\\n\\n        if (bytes(_tokenURIs[tokenId]).length != 0) {\\n            delete _tokenURIs[tokenId];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7942989e3525aec1672469e4c65fb33fbd19c785c9cadbcb70fcbe1fe8bfdd37\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Base64.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides a set of functions to operate with Base64 strings.\\n *\\n * _Available since v4.5._\\n */\\nlibrary Base64 {\\n    /**\\n     * @dev Base64 Encoding/Decoding Table\\n     */\\n    string internal constant _TABLE = \\\"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\\\";\\n\\n    /**\\n     * @dev Converts a `bytes` to its Bytes64 `string` representation.\\n     */\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        /**\\n         * Inspired by Brecht Devos (Brechtpd) implementation - MIT licence\\n         * https://github.com/Brechtpd/base64/blob/e78d9fd951e7b0977ddca77d92dc85183770daf4/base64.sol\\n         */\\n        if (data.length == 0) return \\\"\\\";\\n\\n        // Loads the table into memory\\n        string memory table = _TABLE;\\n\\n        // Encoding takes 3 bytes chunks of binary data from `bytes` data parameter\\n        // and split into 4 numbers of 6 bits.\\n        // The final Base64 length should be `bytes` data length multiplied by 4/3 rounded up\\n        // - `data.length + 2`  -> Round up\\n        // - `/ 3`              -> Number of 3-bytes chunks\\n        // - `4 *`              -> 4 characters for each chunk\\n        string memory result = new string(4 * ((data.length + 2) / 3));\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Prepare the lookup table (skip the first \\\"length\\\" byte)\\n            let tablePtr := add(table, 1)\\n\\n            // Prepare result pointer, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // Run over the input, 3 bytes at a time\\n            for {\\n                let dataPtr := data\\n                let endPtr := add(data, mload(data))\\n            } lt(dataPtr, endPtr) {\\n\\n            } {\\n                // Advance 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // To write each character, shift the 3 bytes (18 bits) chunk\\n                // 4 times in blocks of 6 bits for each character (18, 12, 6, 0)\\n                // and apply logical AND with 0x3F which is the number of\\n                // the previous character in the ASCII table prior to the Base64 Table\\n                // The result is then added to the table to get the character to write,\\n                // and finally write it in the result pointer but with a left shift\\n                // of 256 (1 byte) - 8 (1 ASCII char) = 248 bits\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n\\n                mstore8(resultPtr, mload(add(tablePtr, and(input, 0x3F))))\\n                resultPtr := add(resultPtr, 1) // Advance\\n            }\\n\\n            // When data `bytes` is not exactly 3 bytes long\\n            // it is padded with `=` characters at the end\\n            switch mod(mload(data), 3)\\n            case 1 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n                mstore8(sub(resultPtr, 2), 0x3d)\\n            }\\n            case 2 {\\n                mstore8(sub(resultPtr, 1), 0x3d)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x5f3461639fe20794cfb4db4a6d8477388a15b2e70a018043084b7c4bedfa8136\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/ERC721Collateral.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n\\n/// @title This contract is ERC721 based contract which mints NFTs instead of user assets. when NFT burns, assets will be withdrawable for the user who burns.\\n/// @author Alireza Haghshenas\\n/// @notice This contract deploys by invesweet creator contract.\\n/// @dev Mint function should call by creator contract, not directly in this contract\\n\\n// import {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\n\\n// ******************************************************************\\n// ******************************************************************\\n// **************This contract not developed yet*********************\\n// ******************************************************************\\n// ******************************************************************\\npragma solidity ^0.8.17;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Base64.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./TransferHelper.sol\\\";\\n\\nerror ERC721Metadata__URI_QueryFor_NonExistentToken();\\n\\ncontract ERC721Collateral is ERC721URIStorage{\\n\\n    // Events\\n    event Tokenize(address from,address token, uint256 amount, uint256 tokenId);\\n    event Withdraw(address user, address contractAddress, uint256 value);\\n\\n    // Variables\\n    string private s_url;\\n    address private owner;\\n    uint256 private counterTokenID = 1;\\n    uint256 private fee;\\n    address payable private creatorContract;\\n    uint256 private sumMintFees;\\n\\n\\n    constructor (string memory name,string memory symbol, uint256 mintCost, address contractOwner, string memory imgUrl) ERC721(name, symbol){\\n        fee = mintCost;\\n        owner = contractOwner;\\n        s_url = imgUrl;\\n        creatorContract = payable(msg.sender);\\n    }\\n\\n    struct collateral {\\n        address tokenAddress;\\n        uint256 balance;\\n    }\\n\\n    mapping (uint256 => collateral) private collaterals;\\n    mapping (address => mapping(address => uint256)) private balance;\\n\\n    // modifiers\\n    modifier onlyOwner {\\n        require(msg.sender == owner, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyCreator {\\n        require(msg.sender == creatorContract, \\\"Only owner\\\");\\n        _;\\n    }\\n\\n    function deposit (address token, address to, uint256 amount) external {\\n        TransferHelper.safeTransferFrom(token, _msgSender(), to, amount);\\n        balance[_msgSender()][token] += amount;\\n    }\\n\\n\\n    function tokenize (address token, uint256 amount) external payable {\\n        require(msg.value >= fee, \\\"Requires fee\\\");\\n        require(balance[_msgSender()][token] >= amount, \\\"Insufficient fund\\\");\\n        balance[_msgSender()][token] -= amount;\\n        _mint(_msgSender(), counterTokenID);\\n        collaterals[counterTokenID] = collateral(token, amount);\\n        counterTokenID ++;\\n        emit Tokenize(_msgSender(), token, amount, counterTokenID - 1);\\n    }\\n\\n    function Reclaim(uint256 tokenId) external {\\n        require(ownerOf(tokenId) == _msgSender(), \\\"Token belongs someone else\\\");\\n        address tokenAddress = collaterals[tokenId].tokenAddress;\\n        uint256 tokenAmount = collaterals[tokenId].balance;\\n        delete collaterals[tokenId];\\n        _burn(tokenId);\\n        balance[_msgSender()][tokenAddress] += tokenAmount;\\n    }\\n    function withdraw (address token, uint256 amount) external {\\n        require(balance[_msgSender()][token] >= amount, \\\"Insufficient balance\\\");\\n        TransferHelper.safeTransfer(token, _msgSender(), amount);\\n    }\\n\\n    function claimFee() external onlyOwner{\\n        \\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override virtual returns (string memory) {\\n        if (!_exists(tokenId)) {\\n            revert ERC721Metadata__URI_QueryFor_NonExistentToken();\\n        }\\n        // (, int256 price, , , ) = i_priceFeed.latestRoundData();\\n        // string memory imageURI = s_lowImageURI;\\n        // if (price >= s_tokenIdToHighValues[tokenId]) {\\n        //     imageURI = s_highImageURI;\\n        // }\\n        return\\n            string(\\n                abi.encodePacked(\\n                    _baseURI(),\\n                    Base64.encode(\\n                        bytes(\\n                            abi.encodePacked(\\n                                '{\\\"token address\\\":\\\"',\\n                                collaterals[tokenId].tokenAddress,\\n                                '\\\", \\\"amount\\\":\\\"',\\n                                collaterals[tokenId].balance,\\n                                '\\\",\\\"description\\\": something , \\\"image\\\":\\\"',\\n                                s_url,\\n                                '\\\"}'\\n                            )\\n                        )\\n                    )\\n                )\\n            );\\n    }\\n\\n\\n \\n}\",\"keccak256\":\"0xe818745b85017ecace48db9cb53e96efc551af299343750a8ce558f6fc4818ca\",\"license\":\"MIT\"},\"contracts/ERC721CollateralCreator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.17;\\n\\n// import \\\"./ERC721Upgreadable.sol\\\";\\nimport \\\"./ERC721Collateral.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"./Storage.sol\\\";\\n\\n\\n\\n/*  WHAT REMAINED:\\n\\n    add eth price\\n    use specific price if value less than 1$\\n    move variables into library\\n    add proxy\\n*/\\n\\n\\n\\n\\ncontract ERC721CollateralCreator is Ownable {\\n    \\n    event ERC721Create(address indexed contractAddress, address indexed owner, string symbol);\\n\\n    address private s_owner;\\n    uint256 private deployCost;\\n    uint256 private mintFee;\\n    uint256 private withdrawalFee;\\n\\n    mapping (address => uint256) private balances;\\n    mapping (address => address[]) private addressToContracts;\\n    // mapping (address => address) private contractToOwner;\\n    constructor() {\\n        s_owner = msg.sender;\\n    }\\n\\n    // this func will remove after moving variables into library\\n    function setFee (uint256 index, uint256 feeAmount) external onlyOwner {\\n        if (index == 0 ) {\\n            deployCost = feeAmount;\\n        }\\n        if (index == 1) {\\n            mintFee = feeAmount;\\n        }\\n        if (index == 2) {\\n            withdrawalFee = feeAmount;\\n        } \\n         \\n    }\\n\\n    // string memory name,string memory symbol, uint256 mintCost, address contractOwner, string memory imgUrl\\n    function createERC721(string memory name, string memory symbol, uint256 mintfee,string calldata url  ) payable external returns(address) {\\n        require(msg.value >= deployCost, \\\"create requires fee\\\");\\n        ERC721Collateral newNft = new ERC721Collateral(name, symbol, mintfee, msg.sender, url);\\n        emit ERC721Create(address(newNft), msg.sender, symbol);\\n        // contractToOwner[address(newNft)] = msg.sender;\\n        return address(newNft);\\n    }\\n\\n    function withdraw(uint256 amount) external payable onlyOwner{\\n        if (amount <= address(this).balance) {\\n            (bool ok,) = _msgSender().call{value: amount }(\\\"\\\");\\n            require(ok,\\\"Call failed\\\");\\n        }\\n            \\n    }\\n    \\n        // Getter funcs:\\n    function getUserContracts(address user) external view returns(address[] memory){\\n        return addressToContracts[user];\\n    }\\n\\n    function balance() external view returns(uint256) {\\n        return address(this).balance;\\n    }\\n\\n    function getUserBalance (address who) external view returns(uint256) {\\n        return balances[who];\\n    }\\n\\n \\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0x0527edb240ffc1b745db774b032a24ebff4b3e878d95a407aa327d932218733d\",\"license\":\"MIT\"},\"contracts/TransferHelper.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.17;\\n\\n// ****************************************************\\n// ********************** Imports **********************\\n// ****************************************************\\n\\nimport \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nlibrary TransferHelper {\\n    /// @notice Transfers tokens from the targeted address to the given destination\\n    /// @notice Errors with 'STF' if transfer fails\\n    /// @param token The contract address of the token to be transferred\\n    /// @param from The originating address from which the tokens will be transferred\\n    /// @param to The destination address of the transfer\\n    /// @param value The amount to be transferred\\n    function safeTransferFrom(\\n        address token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) =\\n            token.call(abi.encodeWithSelector(IERC20.transferFrom.selector, from, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'STF');\\n    }\\n\\n    /// @notice Transfers tokens from msg.sender to a recipient\\n    /// @dev Errors with ST if transfer fails\\n    /// @param token The contract address of the token which will be transferred\\n    /// @param to The recipient of the transfer\\n    /// @param value The value of the transfer\\n    function safeTransfer(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.transfer.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'ST');\\n    }\\n\\n    /// @notice Approves the stipulated contract to spend the given allowance in the given token\\n    /// @dev Errors with 'SA' if transfer fails\\n    /// @param token The contract address of the token to be approved\\n    /// @param to The target of the approval\\n    /// @param value The amount of the given token the target will be allowed to spend\\n    function safeApprove(\\n        address token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        (bool success, bytes memory data) = token.call(abi.encodeWithSelector(IERC20.approve.selector, to, value));\\n        require(success && (data.length == 0 || abi.decode(data, (bool))), 'SA');\\n    }\\n\\n    /// @notice Transfers ETH to the recipient address\\n    /// @dev Fails with `STE`\\n    /// @param to The destination of the transfer\\n    /// @param value The value to be transferred\\n    function safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, 'STE');\\n    }\\n}\\n\\n\\n\",\"keccak256\":\"0xd45e9e643d1a457e087d86bf275276a094fa2e9828b1da8a27d221ab6433065b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061002d61002261007360201b60201c565b61007b60201b60201c565b33600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555061013f565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6151b08061014e6000396000f3fe608060405260043610620000975760003560e01c806352f7c988116200006157806352f7c9881462000182578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632c9623a914620000a45780632e1a7d4d14620000da57806334c925f014620000fa57806347734892146200013e576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc9190620009d5565b62000258565b604051620000d1919062000aee565b60405180910390f35b620000f86004803603810190620000f2919062000b0b565b6200035d565b005b3480156200010757600080fd5b5062000126600480360381019062000120919062000b6e565b62000430565b60405162000135919062000c6e565b60405180910390f35b3480156200014b57600080fd5b506200016a600480360381019062000164919062000b6e565b620004ff565b60405162000179919062000ca3565b60405180910390f35b3480156200018f57600080fd5b50620001ae6004803603810190620001a8919062000cc0565b62000548565b005b348015620001bd57600080fd5b50620001c862000589565b005b348015620001d757600080fd5b50620001e2620005a1565b604051620001f1919062000aee565b60405180910390f35b3480156200020757600080fd5b5062000212620005ca565b60405162000221919062000ca3565b60405180910390f35b3480156200023757600080fd5b5062000256600480360381019062000250919062000b6e565b620005d2565b005b6000600254341015620002a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002999062000d68565b60405180910390fd5b6000868686338787604051620002b890620007ad565b620002c99695949392919062000e35565b604051809103906000f080158015620002e6573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b406028860405162000348919062000ea9565b60405180910390a38091505095945050505050565b620003676200065c565b4781116200042d5760006200037b620006e1565b73ffffffffffffffffffffffffffffffffffffffff1682604051620003a09062000f02565b60006040518083038185875af1925050503d8060008114620003df576040519150601f19603f3d011682016040523d82523d6000602084013e620003e4565b606091505b50509050806200042b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004229062000f69565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620004f357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620004a8575b50505050509050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620005526200065c565b600082036200056357806002819055505b600182036200057457806003819055505b600282036200058557806004819055505b5050565b620005936200065c565b6200059f6000620006e9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005dc6200065c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200064e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006459062001001565b60405180910390fd5b6200065981620006e9565b50565b62000666620006e1565b73ffffffffffffffffffffffffffffffffffffffff1662000686620005a1565b73ffffffffffffffffffffffffffffffffffffffff1614620006df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006d69062001073565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6140e5806200109683390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200082482620007d9565b810181811067ffffffffffffffff82111715620008465762000845620007ea565b5b80604052505050565b60006200085b620007bb565b905062000869828262000819565b919050565b600067ffffffffffffffff8211156200088c576200088b620007ea565b5b6200089782620007d9565b9050602081019050919050565b82818337600083830152505050565b6000620008ca620008c4846200086e565b6200084f565b905082815260208101848484011115620008e957620008e8620007d4565b5b620008f6848285620008a4565b509392505050565b600082601f830112620009165762000915620007cf565b5b813562000928848260208601620008b3565b91505092915050565b6000819050919050565b620009468162000931565b81146200095257600080fd5b50565b60008135905062000966816200093b565b92915050565b600080fd5b600080fd5b60008083601f8401126200098f576200098e620007cf565b5b8235905067ffffffffffffffff811115620009af57620009ae6200096c565b5b602083019150836001820283011115620009ce57620009cd62000971565b5b9250929050565b600080600080600060808688031215620009f457620009f3620007c5565b5b600086013567ffffffffffffffff81111562000a155762000a14620007ca565b5b62000a2388828901620008fe565b955050602086013567ffffffffffffffff81111562000a475762000a46620007ca565b5b62000a5588828901620008fe565b945050604062000a688882890162000955565b935050606086013567ffffffffffffffff81111562000a8c5762000a8b620007ca565b5b62000a9a8882890162000976565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ad68262000aa9565b9050919050565b62000ae88162000ac9565b82525050565b600060208201905062000b05600083018462000add565b92915050565b60006020828403121562000b245762000b23620007c5565b5b600062000b348482850162000955565b91505092915050565b62000b488162000ac9565b811462000b5457600080fd5b50565b60008135905062000b688162000b3d565b92915050565b60006020828403121562000b875762000b86620007c5565b5b600062000b978482850162000b57565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000bd78162000ac9565b82525050565b600062000beb838362000bcc565b60208301905092915050565b6000602082019050919050565b600062000c118262000ba0565b62000c1d818562000bab565b935062000c2a8362000bbc565b8060005b8381101562000c6157815162000c45888262000bdd565b975062000c528362000bf7565b92505060018101905062000c2e565b5085935050505092915050565b6000602082019050818103600083015262000c8a818462000c04565b905092915050565b62000c9d8162000931565b82525050565b600060208201905062000cba600083018462000c92565b92915050565b6000806040838503121562000cda5762000cd9620007c5565b5b600062000cea8582860162000955565b925050602062000cfd8582860162000955565b9150509250929050565b600082825260208201905092915050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000d5060138362000d07565b915062000d5d8262000d18565b602082019050919050565b6000602082019050818103600083015262000d838162000d41565b9050919050565b600081519050919050565b60005b8381101562000db557808201518184015260208101905062000d98565b60008484015250505050565b600062000dce8262000d8a565b62000dda818562000d07565b935062000dec81856020860162000d95565b62000df781620007d9565b840191505092915050565b600062000e10838562000d07565b935062000e1f838584620008a4565b62000e2a83620007d9565b840190509392505050565b600060a082019050818103600083015262000e51818962000dc1565b9050818103602083015262000e67818862000dc1565b905062000e78604083018762000c92565b62000e87606083018662000add565b818103608083015262000e9c81848662000e02565b9050979650505050505050565b6000602082019050818103600083015262000ec5818462000dc1565b905092915050565b600081905092915050565b50565b600062000eea60008362000ecd565b915062000ef78262000ed8565b600082019050919050565b600062000f0f8262000edb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000f51600b8362000d07565b915062000f5e8262000f19565b602082019050919050565b6000602082019050818103600083015262000f848162000f42565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000fe960268362000d07565b915062000ff68262000f8b565b604082019050919050565b600060208201905081810360008301526200101c8162000fda565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200105b60208362000d07565b9150620010688262001023565b602082019050919050565b600060208201905081810360008301526200108e816200104c565b905091905056fe608060405260016009553480156200001657600080fd5b50604051620040e5380380620040e583398181016040528101906200003c91906200033d565b848481600090816200004f919062000663565b50806001908162000061919062000663565b50505082600a8190555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000bd919062000663565b5033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200074a565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001738262000128565b810181811067ffffffffffffffff8211171562000195576200019462000139565b5b80604052505050565b6000620001aa6200010a565b9050620001b8828262000168565b919050565b600067ffffffffffffffff821115620001db57620001da62000139565b5b620001e68262000128565b9050602081019050919050565b60005b8381101562000213578082015181840152602081019050620001f6565b60008484015250505050565b6000620002366200023084620001bd565b6200019e565b90508281526020810184848401111562000255576200025462000123565b5b62000262848285620001f3565b509392505050565b600082601f8301126200028257620002816200011e565b5b8151620002948482602086016200021f565b91505092915050565b6000819050919050565b620002b2816200029d565b8114620002be57600080fd5b50565b600081519050620002d281620002a7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030582620002d8565b9050919050565b6200031781620002f8565b81146200032357600080fd5b50565b60008151905062000337816200030c565b92915050565b600080600080600060a086880312156200035c576200035b62000114565b5b600086015167ffffffffffffffff8111156200037d576200037c62000119565b5b6200038b888289016200026a565b955050602086015167ffffffffffffffff811115620003af57620003ae62000119565b5b620003bd888289016200026a565b9450506040620003d088828901620002c1565b9350506060620003e38882890162000326565b925050608086015167ffffffffffffffff81111562000407576200040662000119565b5b62000415888289016200026a565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047557607f821691505b6020821081036200048b576200048a6200042d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004f57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004b6565b620005018683620004b6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005446200053e62000538846200029d565b62000519565b6200029d565b9050919050565b6000819050919050565b620005608362000523565b620005786200056f826200054b565b848454620004c3565b825550505050565b600090565b6200058f62000580565b6200059c81848462000555565b505050565b5b81811015620005c457620005b860008262000585565b600181019050620005a2565b5050565b601f8211156200061357620005dd8162000491565b620005e884620004a6565b81016020851015620005f8578190505b620006106200060785620004a6565b830182620005a1565b50505b505050565b600082821c905092915050565b6000620006386000198460080262000618565b1980831691505092915050565b600062000653838362000625565b9150826002028217905092915050565b6200066e8262000422565b67ffffffffffffffff8111156200068a576200068962000139565b5b6200069682546200045c565b620006a3828285620005c8565b600060209050601f831160018114620006db5760008415620006c6578287015190505b620006d2858262000645565b86555062000742565b601f198416620006eb8662000491565b60005b828110156200071557848901518255600182019150602085019450602081019050620006ee565b8683101562000735578489015162000731601f89168262000625565b8355505b6001600288020188555050505b505050505050565b61398b806200075a6000396000f3fe6080604052600436106101095760003560e01c80638340f54911610095578063a22cb46511610064578063a22cb46514610358578063b88d4fde14610381578063c87b56dd146103aa578063e985e9c5146103e7578063f3fef3a31461042457610109565b80638340f549146102d15780638f677db4146102fa57806395d89b411461031657806399d32fc41461034157610109565b806323b872dd116100dc57806323b872dd146101dc57806342842e0e1461020557806359cf31731461022e5780636352211e1461025757806370a082311461029457610109565b806301ffc9a71461010e57806306fdde031461014b578063081812fc14610176578063095ea7b3146101b3575b600080fd5b34801561011a57600080fd5b506101356004803603810190610130919061240b565b61044d565b6040516101429190612453565b60405180910390f35b34801561015757600080fd5b506101606104ae565b60405161016d91906124fe565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190612556565b610540565b6040516101aa91906125c4565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d5919061260b565b610586565b005b3480156101e857600080fd5b5061020360048036038101906101fe919061264b565b61069d565b005b34801561021157600080fd5b5061022c6004803603810190610227919061264b565b6106fd565b005b34801561023a57600080fd5b5061025560048036038101906102509190612556565b61071d565b005b34801561026357600080fd5b5061027e60048036038101906102799190612556565b6108dd565b60405161028b91906125c4565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b6919061269e565b610963565b6040516102c891906126da565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f3919061264b565b610a1a565b005b610314600480360381019061030f919061260b565b610acc565b005b34801561032257600080fd5b5061032b610d86565b60405161033891906124fe565b60405180910390f35b34801561034d57600080fd5b50610356610e18565b005b34801561036457600080fd5b5061037f600480360381019061037a9190612721565b610eaa565b005b34801561038d57600080fd5b506103a860048036038101906103a39190612896565b610ec0565b005b3480156103b657600080fd5b506103d160048036038101906103cc9190612556565b610f22565b6040516103de91906124fe565b60405180910390f35b3480156103f357600080fd5b5061040e60048036038101906104099190612919565b61100b565b60405161041b9190612453565b60405180910390f35b34801561043057600080fd5b5061044b6004803603810190610446919061260b565b61109f565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a757506104a68261117b565b5b9050919050565b6060600080546104bd90612988565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990612988565b80156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b5050505050905090565b600061054b8261125d565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610591826108dd565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f890612a2b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106206112a8565b73ffffffffffffffffffffffffffffffffffffffff16148061064f575061064e816106496112a8565b61100b565b5b61068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068590612abd565b60405180910390fd5b61069883836112b0565b505050565b6106ae6106a86112a8565b82611369565b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612b4f565b60405180910390fd5b6106f88383836113fe565b505050565b61071883838360405180602001604052806000815250610ec0565b505050565b6107256112a8565b73ffffffffffffffffffffffffffffffffffffffff16610744826108dd565b73ffffffffffffffffffffffffffffffffffffffff161461079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190612bbb565b60405180910390fd5b6000600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d6000848152602001908152602001600020600101549050600d6000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055505061083e836116f7565b80600e600061084b6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d19190612c0a565b92505081905550505050565b6000806108e98361174a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190612c8a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90612d1c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a2d83610a266112a8565b8484611787565b80600e6000610a3a6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ac09190612c0a565b92505081905550505050565b600a54341015610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0890612d88565b60405180910390fd5b80600e6000610b1e6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce90612df4565b60405180910390fd5b80600e6000610be46112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c6a9190612e14565b92505081905550610c84610c7c6112a8565b6009546118df565b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600d6000600954815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015590505060096000815480929190610d2b90612e48565b91905055507ff11c3f740b1cd8d659c18edd03787ef5925d7bad08d8dda0cf79b1aec9b53fe4610d596112a8565b83836001600954610d6a9190612e14565b604051610d7a9493929190612e90565b60405180910390a15050565b606060018054610d9590612988565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc190612988565b8015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f90612f21565b60405180910390fd5b565b610ebc610eb56112a8565b8383611afc565b5050565b610ed1610ecb6112a8565b83611369565b610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612b4f565b60405180910390fd5b610f1c84848484611c68565b50505050565b6060610f2d82611cc4565b610f63576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f6b611d05565b610fe4600d600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000868152602001908152602001600020600101546007604051602001610fd0939291906131a3565b604051602081830303815290604052611d1c565b604051602001610ff5929190613239565b6040516020818303038152906040529050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b80600e60006110ac6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c906132a9565b60405180910390fd5b611177826111716112a8565b83611e7f565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061124657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611256575061125582611fd4565b5b9050919050565b61126681611cc4565b6112a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129c90612c8a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611323836108dd565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611375836108dd565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113b757506113b6818561100b565b5b806113f557508373ffffffffffffffffffffffffffffffffffffffff166113dd84610540565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661141e826108dd565b73ffffffffffffffffffffffffffffffffffffffff1614611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b9061333b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da906133cd565b60405180910390fd5b6114f0838383600161203e565b8273ffffffffffffffffffffffffffffffffffffffff16611510826108dd565b73ffffffffffffffffffffffffffffffffffffffff1614611566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155d9061333b565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116f28383836001612044565b505050565b6117008161204a565b600060066000838152602001908152602001600020805461172090612988565b905014611747576006600082815260200190815260200160002060006117469190612342565b5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016117be939291906133ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611828919061346b565b6000604051808303816000865af19150503d8060008114611865576040519150601f19603f3d011682016040523d82523d6000602084013e61186a565b606091505b509150915081801561189857506000815114806118975750808060200190518101906118969190613497565b5b5b6118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90613510565b60405180910390fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361194e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119459061357c565b60405180910390fd5b61195781611cc4565b15611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198e906135e8565b60405180910390fd5b6119a560008383600161203e565b6119ae81611cc4565b156119ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e5906135e8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611af8600083836001612044565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6190613654565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c5b9190612453565b60405180910390a3505050565b611c738484846113fe565b611c7f84848484612198565b611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb5906136e6565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ce68361174a565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060405180602001604052806000815250905090565b60606000825103611d3e57604051806020016040528060008152509050611e7a565b60006040518060600160405280604081526020016139166040913990506000600360028551611d6d9190612c0a565b611d779190613735565b6004611d839190613766565b67ffffffffffffffff811115611d9c57611d9b61276b565b5b6040519080825280601f01601f191660200182016040528015611dce5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611e3a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611ddf565b5050600386510660018114611e565760028114611e6957611e71565b603d6001830353603d6002830353611e71565b603d60018303535b50505080925050505b919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401611eb49291906137a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f1e919061346b565b6000604051808303816000865af19150503d8060008114611f5b576040519150601f19603f3d011682016040523d82523d6000602084013e611f60565b606091505b5091509150818015611f8e5750600081511480611f8d575080806020019051810190611f8c9190613497565b5b5b611fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc49061381d565b60405180910390fd5b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b6000612055826108dd565b905061206581600084600161203e565b61206e826108dd565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612194816000846001612044565b5050565b60006121b98473ffffffffffffffffffffffffffffffffffffffff1661231f565b15612312578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121e26112a8565b8786866040518563ffffffff1660e01b81526004016122049493929190613887565b6020604051808303816000875af192505050801561224057506040513d601f19601f8201168201806040525081019061223d91906138e8565b60015b6122c2573d8060008114612270576040519150601f19603f3d011682016040523d82523d6000602084013e612275565b606091505b5060008151036122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b1906136e6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612317565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50805461234e90612988565b6000825580601f10612360575061237f565b601f01602090049060005260206000209081019061237e9190612382565b5b50565b5b8082111561239b576000816000905550600101612383565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123e8816123b3565b81146123f357600080fd5b50565b600081359050612405816123df565b92915050565b600060208284031215612421576124206123a9565b5b600061242f848285016123f6565b91505092915050565b60008115159050919050565b61244d81612438565b82525050565b60006020820190506124686000830184612444565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124a857808201518184015260208101905061248d565b60008484015250505050565b6000601f19601f8301169050919050565b60006124d08261246e565b6124da8185612479565b93506124ea81856020860161248a565b6124f3816124b4565b840191505092915050565b6000602082019050818103600083015261251881846124c5565b905092915050565b6000819050919050565b61253381612520565b811461253e57600080fd5b50565b6000813590506125508161252a565b92915050565b60006020828403121561256c5761256b6123a9565b5b600061257a84828501612541565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ae82612583565b9050919050565b6125be816125a3565b82525050565b60006020820190506125d960008301846125b5565b92915050565b6125e8816125a3565b81146125f357600080fd5b50565b600081359050612605816125df565b92915050565b60008060408385031215612622576126216123a9565b5b6000612630858286016125f6565b925050602061264185828601612541565b9150509250929050565b600080600060608486031215612664576126636123a9565b5b6000612672868287016125f6565b9350506020612683868287016125f6565b925050604061269486828701612541565b9150509250925092565b6000602082840312156126b4576126b36123a9565b5b60006126c2848285016125f6565b91505092915050565b6126d481612520565b82525050565b60006020820190506126ef60008301846126cb565b92915050565b6126fe81612438565b811461270957600080fd5b50565b60008135905061271b816126f5565b92915050565b60008060408385031215612738576127376123a9565b5b6000612746858286016125f6565b92505060206127578582860161270c565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127a3826124b4565b810181811067ffffffffffffffff821117156127c2576127c161276b565b5b80604052505050565b60006127d561239f565b90506127e1828261279a565b919050565b600067ffffffffffffffff8211156128015761280061276b565b5b61280a826124b4565b9050602081019050919050565b82818337600083830152505050565b6000612839612834846127e6565b6127cb565b90508281526020810184848401111561285557612854612766565b5b612860848285612817565b509392505050565b600082601f83011261287d5761287c612761565b5b813561288d848260208601612826565b91505092915050565b600080600080608085870312156128b0576128af6123a9565b5b60006128be878288016125f6565b94505060206128cf878288016125f6565b93505060406128e087828801612541565b925050606085013567ffffffffffffffff811115612901576129006123ae565b5b61290d87828801612868565b91505092959194509250565b600080604083850312156129305761292f6123a9565b5b600061293e858286016125f6565b925050602061294f858286016125f6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129a057607f821691505b6020821081036129b3576129b2612959565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a15602183612479565b9150612a20826129b9565b604082019050919050565b60006020820190508181036000830152612a4481612a08565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612aa7603d83612479565b9150612ab282612a4b565b604082019050919050565b60006020820190508181036000830152612ad681612a9a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612b39602d83612479565b9150612b4482612add565b604082019050919050565b60006020820190508181036000830152612b6881612b2c565b9050919050565b7f546f6b656e2062656c6f6e677320736f6d656f6e6520656c7365000000000000600082015250565b6000612ba5601a83612479565b9150612bb082612b6f565b602082019050919050565b60006020820190508181036000830152612bd481612b98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c1582612520565b9150612c2083612520565b9250828201905080821115612c3857612c37612bdb565b5b92915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612c74601883612479565b9150612c7f82612c3e565b602082019050919050565b60006020820190508181036000830152612ca381612c67565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612d06602983612479565b9150612d1182612caa565b604082019050919050565b60006020820190508181036000830152612d3581612cf9565b9050919050565b7f5265717569726573206665650000000000000000000000000000000000000000600082015250565b6000612d72600c83612479565b9150612d7d82612d3c565b602082019050919050565b60006020820190508181036000830152612da181612d65565b9050919050565b7f496e73756666696369656e742066756e64000000000000000000000000000000600082015250565b6000612dde601183612479565b9150612de982612da8565b602082019050919050565b60006020820190508181036000830152612e0d81612dd1565b9050919050565b6000612e1f82612520565b9150612e2a83612520565b9250828203905081811115612e4257612e41612bdb565b5b92915050565b6000612e5382612520565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e8557612e84612bdb565b5b600182019050919050565b6000608082019050612ea560008301876125b5565b612eb260208301866125b5565b612ebf60408301856126cb565b612ecc60608301846126cb565b95945050505050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612f0b600a83612479565b9150612f1682612ed5565b602082019050919050565b60006020820190508181036000830152612f3a81612efe565b9050919050565b600081905092915050565b7f7b22746f6b656e2061646472657373223a220000000000000000000000000000600082015250565b6000612f82601283612f41565b9150612f8d82612f4c565b601282019050919050565b60008160601b9050919050565b6000612fb082612f98565b9050919050565b6000612fc282612fa5565b9050919050565b612fda612fd5826125a3565b612fb7565b82525050565b7f222c2022616d6f756e74223a2200000000000000000000000000000000000000600082015250565b6000613016600d83612f41565b915061302182612fe0565b600d82019050919050565b6000819050919050565b61304761304282612520565b61302c565b82525050565b7f222c226465736372697074696f6e223a20736f6d657468696e67202c2022696d60008201527f616765223a220000000000000000000000000000000000000000000000000000602082015250565b60006130a9602683612f41565b91506130b48261304d565b602682019050919050565b60008190508160005260206000209050919050565b600081546130e181612988565b6130eb8186612f41565b94506001821660008114613106576001811461311b5761314e565b60ff198316865281151582028601935061314e565b613124856130bf565b60005b8381101561314657815481890152600182019150602081019050613127565b838801955050505b50505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061318d600283612f41565b915061319882613157565b600282019050919050565b60006131ae82612f75565b91506131ba8286612fc9565b6014820191506131c982613009565b91506131d58285613036565b6020820191506131e48261309c565b91506131f082846130d4565b91506131fb82613180565b9150819050949350505050565b60006132138261246e565b61321d8185612f41565b935061322d81856020860161248a565b80840191505092915050565b60006132458285613208565b91506132518284613208565b91508190509392505050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000613293601483612479565b915061329e8261325d565b602082019050919050565b600060208201905081810360008301526132c281613286565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613325602583612479565b9150613330826132c9565b604082019050919050565b6000602082019050818103600083015261335481613318565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133b7602483612479565b91506133c28261335b565b604082019050919050565b600060208201905081810360008301526133e6816133aa565b9050919050565b600060608201905061340260008301866125b5565b61340f60208301856125b5565b61341c60408301846126cb565b949350505050565b600081519050919050565b600081905092915050565b600061344582613424565b61344f818561342f565b935061345f81856020860161248a565b80840191505092915050565b6000613477828461343a565b915081905092915050565b600081519050613491816126f5565b92915050565b6000602082840312156134ad576134ac6123a9565b5b60006134bb84828501613482565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b60006134fa600383612479565b9150613505826134c4565b602082019050919050565b60006020820190508181036000830152613529816134ed565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613566602083612479565b915061357182613530565b602082019050919050565b6000602082019050818103600083015261359581613559565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006135d2601c83612479565b91506135dd8261359c565b602082019050919050565b60006020820190508181036000830152613601816135c5565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061363e601983612479565b915061364982613608565b602082019050919050565b6000602082019050818103600083015261366d81613631565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136d0603283612479565b91506136db82613674565b604082019050919050565b600060208201905081810360008301526136ff816136c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061374082612520565b915061374b83612520565b92508261375b5761375a613706565b5b828204905092915050565b600061377182612520565b915061377c83612520565b925082820261378a81612520565b915082820484148315176137a1576137a0612bdb565b5b5092915050565b60006040820190506137bd60008301856125b5565b6137ca60208301846126cb565b9392505050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000613807600283612479565b9150613812826137d1565b602082019050919050565b60006020820190508181036000830152613836816137fa565b9050919050565b600082825260208201905092915050565b600061385982613424565b613863818561383d565b935061387381856020860161248a565b61387c816124b4565b840191505092915050565b600060808201905061389c60008301876125b5565b6138a960208301866125b5565b6138b660408301856126cb565b81810360608301526138c8818461384e565b905095945050505050565b6000815190506138e2816123df565b92915050565b6000602082840312156138fe576138fd6123a9565b5b600061390c848285016138d3565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122055c3d42359ad968ec5a2c905d897553a02de73b4d1819ddc9d332bb70a889c1a64736f6c63430008110033a2646970667358221220cf8df4db78d23b1f821c7d56e155b9f4dc7c1b7d407a368af6bbe9b49035830064736f6c63430008110033",
  "deployedBytecode": "0x608060405260043610620000975760003560e01c806352f7c988116200006157806352f7c9881462000182578063715018a614620001b05780638da5cb5b14620001ca578063b69ef8a814620001fa578063f2fde38b146200022a576200009f565b80632c9623a914620000a45780632e1a7d4d14620000da57806334c925f014620000fa57806347734892146200013e576200009f565b366200009f57005b600080fd5b620000c26004803603810190620000bc9190620009d5565b62000258565b604051620000d1919062000aee565b60405180910390f35b620000f86004803603810190620000f2919062000b0b565b6200035d565b005b3480156200010757600080fd5b5062000126600480360381019062000120919062000b6e565b62000430565b60405162000135919062000c6e565b60405180910390f35b3480156200014b57600080fd5b506200016a600480360381019062000164919062000b6e565b620004ff565b60405162000179919062000ca3565b60405180910390f35b3480156200018f57600080fd5b50620001ae6004803603810190620001a8919062000cc0565b62000548565b005b348015620001bd57600080fd5b50620001c862000589565b005b348015620001d757600080fd5b50620001e2620005a1565b604051620001f1919062000aee565b60405180910390f35b3480156200020757600080fd5b5062000212620005ca565b60405162000221919062000ca3565b60405180910390f35b3480156200023757600080fd5b5062000256600480360381019062000250919062000b6e565b620005d2565b005b6000600254341015620002a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620002999062000d68565b60405180910390fd5b6000868686338787604051620002b890620007ad565b620002c99695949392919062000e35565b604051809103906000f080158015620002e6573d6000803e3d6000fd5b5090503373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f885ff2ac72301279f7111fa8a37e1d3752db502e4301372f8b411cff87b406028860405162000348919062000ea9565b60405180910390a38091505095945050505050565b620003676200065c565b4781116200042d5760006200037b620006e1565b73ffffffffffffffffffffffffffffffffffffffff1682604051620003a09062000f02565b60006040518083038185875af1925050503d8060008114620003df576040519150601f19603f3d011682016040523d82523d6000602084013e620003e4565b606091505b50509050806200042b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620004229062000f69565b60405180910390fd5b505b50565b6060600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020805480602002602001604051908101604052809291908181526020018280548015620004f357602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311620004a8575b50505050509050919050565b6000600560008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b620005526200065c565b600082036200056357806002819055505b600182036200057457806003819055505b600282036200058557806004819055505b5050565b620005936200065c565b6200059f6000620006e9565b565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b600047905090565b620005dc6200065c565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036200064e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006459062001001565b60405180910390fd5b6200065981620006e9565b50565b62000666620006e1565b73ffffffffffffffffffffffffffffffffffffffff1662000686620005a1565b73ffffffffffffffffffffffffffffffffffffffff1614620006df576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620006d69062001073565b60405180910390fd5b565b600033905090565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b6140e5806200109683390190565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200082482620007d9565b810181811067ffffffffffffffff82111715620008465762000845620007ea565b5b80604052505050565b60006200085b620007bb565b905062000869828262000819565b919050565b600067ffffffffffffffff8211156200088c576200088b620007ea565b5b6200089782620007d9565b9050602081019050919050565b82818337600083830152505050565b6000620008ca620008c4846200086e565b6200084f565b905082815260208101848484011115620008e957620008e8620007d4565b5b620008f6848285620008a4565b509392505050565b600082601f830112620009165762000915620007cf565b5b813562000928848260208601620008b3565b91505092915050565b6000819050919050565b620009468162000931565b81146200095257600080fd5b50565b60008135905062000966816200093b565b92915050565b600080fd5b600080fd5b60008083601f8401126200098f576200098e620007cf565b5b8235905067ffffffffffffffff811115620009af57620009ae6200096c565b5b602083019150836001820283011115620009ce57620009cd62000971565b5b9250929050565b600080600080600060808688031215620009f457620009f3620007c5565b5b600086013567ffffffffffffffff81111562000a155762000a14620007ca565b5b62000a2388828901620008fe565b955050602086013567ffffffffffffffff81111562000a475762000a46620007ca565b5b62000a5588828901620008fe565b945050604062000a688882890162000955565b935050606086013567ffffffffffffffff81111562000a8c5762000a8b620007ca565b5b62000a9a8882890162000976565b92509250509295509295909350565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600062000ad68262000aa9565b9050919050565b62000ae88162000ac9565b82525050565b600060208201905062000b05600083018462000add565b92915050565b60006020828403121562000b245762000b23620007c5565b5b600062000b348482850162000955565b91505092915050565b62000b488162000ac9565b811462000b5457600080fd5b50565b60008135905062000b688162000b3d565b92915050565b60006020828403121562000b875762000b86620007c5565b5b600062000b978482850162000b57565b91505092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b62000bd78162000ac9565b82525050565b600062000beb838362000bcc565b60208301905092915050565b6000602082019050919050565b600062000c118262000ba0565b62000c1d818562000bab565b935062000c2a8362000bbc565b8060005b8381101562000c6157815162000c45888262000bdd565b975062000c528362000bf7565b92505060018101905062000c2e565b5085935050505092915050565b6000602082019050818103600083015262000c8a818462000c04565b905092915050565b62000c9d8162000931565b82525050565b600060208201905062000cba600083018462000c92565b92915050565b6000806040838503121562000cda5762000cd9620007c5565b5b600062000cea8582860162000955565b925050602062000cfd8582860162000955565b9150509250929050565b600082825260208201905092915050565b7f6372656174652072657175697265732066656500000000000000000000000000600082015250565b600062000d5060138362000d07565b915062000d5d8262000d18565b602082019050919050565b6000602082019050818103600083015262000d838162000d41565b9050919050565b600081519050919050565b60005b8381101562000db557808201518184015260208101905062000d98565b60008484015250505050565b600062000dce8262000d8a565b62000dda818562000d07565b935062000dec81856020860162000d95565b62000df781620007d9565b840191505092915050565b600062000e10838562000d07565b935062000e1f838584620008a4565b62000e2a83620007d9565b840190509392505050565b600060a082019050818103600083015262000e51818962000dc1565b9050818103602083015262000e67818862000dc1565b905062000e78604083018762000c92565b62000e87606083018662000add565b818103608083015262000e9c81848662000e02565b9050979650505050505050565b6000602082019050818103600083015262000ec5818462000dc1565b905092915050565b600081905092915050565b50565b600062000eea60008362000ecd565b915062000ef78262000ed8565b600082019050919050565b600062000f0f8262000edb565b9150819050919050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b600062000f51600b8362000d07565b915062000f5e8262000f19565b602082019050919050565b6000602082019050818103600083015262000f848162000f42565b9050919050565b7f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160008201527f6464726573730000000000000000000000000000000000000000000000000000602082015250565b600062000fe960268362000d07565b915062000ff68262000f8b565b604082019050919050565b600060208201905081810360008301526200101c8162000fda565b9050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b60006200105b60208362000d07565b9150620010688262001023565b602082019050919050565b600060208201905081810360008301526200108e816200104c565b905091905056fe608060405260016009553480156200001657600080fd5b50604051620040e5380380620040e583398181016040528101906200003c91906200033d565b848481600090816200004f919062000663565b50806001908162000061919062000663565b50505082600a8190555081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508060079081620000bd919062000663565b5033600b60006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200074a565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b620001738262000128565b810181811067ffffffffffffffff8211171562000195576200019462000139565b5b80604052505050565b6000620001aa6200010a565b9050620001b8828262000168565b919050565b600067ffffffffffffffff821115620001db57620001da62000139565b5b620001e68262000128565b9050602081019050919050565b60005b8381101562000213578082015181840152602081019050620001f6565b60008484015250505050565b6000620002366200023084620001bd565b6200019e565b90508281526020810184848401111562000255576200025462000123565b5b62000262848285620001f3565b509392505050565b600082601f8301126200028257620002816200011e565b5b8151620002948482602086016200021f565b91505092915050565b6000819050919050565b620002b2816200029d565b8114620002be57600080fd5b50565b600081519050620002d281620002a7565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200030582620002d8565b9050919050565b6200031781620002f8565b81146200032357600080fd5b50565b60008151905062000337816200030c565b92915050565b600080600080600060a086880312156200035c576200035b62000114565b5b600086015167ffffffffffffffff8111156200037d576200037c62000119565b5b6200038b888289016200026a565b955050602086015167ffffffffffffffff811115620003af57620003ae62000119565b5b620003bd888289016200026a565b9450506040620003d088828901620002c1565b9350506060620003e38882890162000326565b925050608086015167ffffffffffffffff81111562000407576200040662000119565b5b62000415888289016200026a565b9150509295509295909350565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806200047557607f821691505b6020821081036200048b576200048a6200042d565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004f57fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82620004b6565b620005018683620004b6565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620005446200053e62000538846200029d565b62000519565b6200029d565b9050919050565b6000819050919050565b620005608362000523565b620005786200056f826200054b565b848454620004c3565b825550505050565b600090565b6200058f62000580565b6200059c81848462000555565b505050565b5b81811015620005c457620005b860008262000585565b600181019050620005a2565b5050565b601f8211156200061357620005dd8162000491565b620005e884620004a6565b81016020851015620005f8578190505b620006106200060785620004a6565b830182620005a1565b50505b505050565b600082821c905092915050565b6000620006386000198460080262000618565b1980831691505092915050565b600062000653838362000625565b9150826002028217905092915050565b6200066e8262000422565b67ffffffffffffffff8111156200068a576200068962000139565b5b6200069682546200045c565b620006a3828285620005c8565b600060209050601f831160018114620006db5760008415620006c6578287015190505b620006d2858262000645565b86555062000742565b601f198416620006eb8662000491565b60005b828110156200071557848901518255600182019150602085019450602081019050620006ee565b8683101562000735578489015162000731601f89168262000625565b8355505b6001600288020188555050505b505050505050565b61398b806200075a6000396000f3fe6080604052600436106101095760003560e01c80638340f54911610095578063a22cb46511610064578063a22cb46514610358578063b88d4fde14610381578063c87b56dd146103aa578063e985e9c5146103e7578063f3fef3a31461042457610109565b80638340f549146102d15780638f677db4146102fa57806395d89b411461031657806399d32fc41461034157610109565b806323b872dd116100dc57806323b872dd146101dc57806342842e0e1461020557806359cf31731461022e5780636352211e1461025757806370a082311461029457610109565b806301ffc9a71461010e57806306fdde031461014b578063081812fc14610176578063095ea7b3146101b3575b600080fd5b34801561011a57600080fd5b506101356004803603810190610130919061240b565b61044d565b6040516101429190612453565b60405180910390f35b34801561015757600080fd5b506101606104ae565b60405161016d91906124fe565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190612556565b610540565b6040516101aa91906125c4565b60405180910390f35b3480156101bf57600080fd5b506101da60048036038101906101d5919061260b565b610586565b005b3480156101e857600080fd5b5061020360048036038101906101fe919061264b565b61069d565b005b34801561021157600080fd5b5061022c6004803603810190610227919061264b565b6106fd565b005b34801561023a57600080fd5b5061025560048036038101906102509190612556565b61071d565b005b34801561026357600080fd5b5061027e60048036038101906102799190612556565b6108dd565b60405161028b91906125c4565b60405180910390f35b3480156102a057600080fd5b506102bb60048036038101906102b6919061269e565b610963565b6040516102c891906126da565b60405180910390f35b3480156102dd57600080fd5b506102f860048036038101906102f3919061264b565b610a1a565b005b610314600480360381019061030f919061260b565b610acc565b005b34801561032257600080fd5b5061032b610d86565b60405161033891906124fe565b60405180910390f35b34801561034d57600080fd5b50610356610e18565b005b34801561036457600080fd5b5061037f600480360381019061037a9190612721565b610eaa565b005b34801561038d57600080fd5b506103a860048036038101906103a39190612896565b610ec0565b005b3480156103b657600080fd5b506103d160048036038101906103cc9190612556565b610f22565b6040516103de91906124fe565b60405180910390f35b3480156103f357600080fd5b5061040e60048036038101906104099190612919565b61100b565b60405161041b9190612453565b60405180910390f35b34801561043057600080fd5b5061044b6004803603810190610446919061260b565b61109f565b005b6000634906490660e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614806104a757506104a68261117b565b5b9050919050565b6060600080546104bd90612988565b80601f01602080910402602001604051908101604052809291908181526020018280546104e990612988565b80156105365780601f1061050b57610100808354040283529160200191610536565b820191906000526020600020905b81548152906001019060200180831161051957829003601f168201915b5050505050905090565b600061054b8261125d565b6004600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000610591826108dd565b90508073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f890612a2b565b60405180910390fd5b8073ffffffffffffffffffffffffffffffffffffffff166106206112a8565b73ffffffffffffffffffffffffffffffffffffffff16148061064f575061064e816106496112a8565b61100b565b5b61068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161068590612abd565b60405180910390fd5b61069883836112b0565b505050565b6106ae6106a86112a8565b82611369565b6106ed576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e490612b4f565b60405180910390fd5b6106f88383836113fe565b505050565b61071883838360405180602001604052806000815250610ec0565b505050565b6107256112a8565b73ffffffffffffffffffffffffffffffffffffffff16610744826108dd565b73ffffffffffffffffffffffffffffffffffffffff161461079a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161079190612bbb565b60405180910390fd5b6000600d600083815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600d6000848152602001908152602001600020600101549050600d6000848152602001908152602001600020600080820160006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001820160009055505061083e836116f7565b80600e600061084b6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546108d19190612c0a565b92505081905550505050565b6000806108e98361174a565b9050600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff160361095a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161095190612c8a565b60405180910390fd5b80915050919050565b60008073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036109d3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109ca90612d1c565b60405180910390fd5b600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b610a2d83610a266112a8565b8484611787565b80600e6000610a3a6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610ac09190612c0a565b92505081905550505050565b600a54341015610b11576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b0890612d88565b60405180910390fd5b80600e6000610b1e6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015610bd7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bce90612df4565b60405180910390fd5b80600e6000610be46112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610c6a9190612e14565b92505081905550610c84610c7c6112a8565b6009546118df565b60405180604001604052808373ffffffffffffffffffffffffffffffffffffffff16815260200182815250600d6000600954815260200190815260200160002060008201518160000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506020820151816001015590505060096000815480929190610d2b90612e48565b91905055507ff11c3f740b1cd8d659c18edd03787ef5925d7bad08d8dda0cf79b1aec9b53fe4610d596112a8565b83836001600954610d6a9190612e14565b604051610d7a9493929190612e90565b60405180910390a15050565b606060018054610d9590612988565b80601f0160208091040260200160405190810160405280929190818152602001828054610dc190612988565b8015610e0e5780601f10610de357610100808354040283529160200191610e0e565b820191906000526020600020905b815481529060010190602001808311610df157829003601f168201915b5050505050905090565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610ea8576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610e9f90612f21565b60405180910390fd5b565b610ebc610eb56112a8565b8383611afc565b5050565b610ed1610ecb6112a8565b83611369565b610f10576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f0790612b4f565b60405180910390fd5b610f1c84848484611c68565b50505050565b6060610f2d82611cc4565b610f63576040517f6df5edae00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f6b611d05565b610fe4600d600085815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16600d6000868152602001908152602001600020600101546007604051602001610fd0939291906131a3565b604051602081830303815290604052611d1c565b604051602001610ff5929190613239565b6040516020818303038152906040529050919050565b6000600560008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16905092915050565b80600e60006110ac6112a8565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161115c906132a9565b60405180910390fd5b611177826111716112a8565b83611e7f565b5050565b60007f80ac58cd000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916148061124657507f5b5e139f000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916145b80611256575061125582611fd4565b5b9050919050565b61126681611cc4565b6112a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161129c90612c8a565b60405180910390fd5b50565b600033905090565b816004600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16611323836108dd565b73ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600080611375836108dd565b90508073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614806113b757506113b6818561100b565b5b806113f557508373ffffffffffffffffffffffffffffffffffffffff166113dd84610540565b73ffffffffffffffffffffffffffffffffffffffff16145b91505092915050565b8273ffffffffffffffffffffffffffffffffffffffff1661141e826108dd565b73ffffffffffffffffffffffffffffffffffffffff1614611474576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161146b9061333b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036114e3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114da906133cd565b60405180910390fd5b6114f0838383600161203e565b8273ffffffffffffffffffffffffffffffffffffffff16611510826108dd565b73ffffffffffffffffffffffffffffffffffffffff1614611566576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161155d9061333b565b60405180910390fd5b6004600082815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a46116f28383836001612044565b505050565b6117008161204a565b600060066000838152602001908152602001600020805461172090612988565b905014611747576006600082815260200190815260200160002060006117469190612342565b5b50565b60006002600083815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000808573ffffffffffffffffffffffffffffffffffffffff166323b872dd60e01b8686866040516024016117be939291906133ed565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611828919061346b565b6000604051808303816000865af19150503d8060008114611865576040519150601f19603f3d011682016040523d82523d6000602084013e61186a565b606091505b509150915081801561189857506000815114806118975750808060200190518101906118969190613497565b5b5b6118d7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118ce90613510565b60405180910390fd5b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361194e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119459061357c565b60405180910390fd5b61195781611cc4565b15611997576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161198e906135e8565b60405180910390fd5b6119a560008383600161203e565b6119ae81611cc4565b156119ee576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016119e5906135e8565b60405180910390fd5b6001600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550816002600083815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808273ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4611af8600083836001612044565b5050565b8173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1603611b6a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611b6190613654565b60405180910390fd5b80600560008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c3183604051611c5b9190612453565b60405180910390a3505050565b611c738484846113fe565b611c7f84848484612198565b611cbe576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611cb5906136e6565b60405180910390fd5b50505050565b60008073ffffffffffffffffffffffffffffffffffffffff16611ce68361174a565b73ffffffffffffffffffffffffffffffffffffffff1614159050919050565b606060405180602001604052806000815250905090565b60606000825103611d3e57604051806020016040528060008152509050611e7a565b60006040518060600160405280604081526020016139166040913990506000600360028551611d6d9190612c0a565b611d779190613735565b6004611d839190613766565b67ffffffffffffffff811115611d9c57611d9b61276b565b5b6040519080825280601f01601f191660200182016040528015611dce5781602001600182028036833780820191505090505b509050600182016020820185865187015b80821015611e3a576003820191508151603f8160121c168501518453600184019350603f81600c1c168501518453600184019350603f8160061c168501518453600184019350603f8116850151845360018401935050611ddf565b5050600386510660018114611e565760028114611e6957611e71565b603d6001830353603d6002830353611e71565b603d60018303535b50505080925050505b919050565b6000808473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b8585604051602401611eb49291906137a8565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff8381831617835250505050604051611f1e919061346b565b6000604051808303816000865af19150503d8060008114611f5b576040519150601f19603f3d011682016040523d82523d6000602084013e611f60565b606091505b5091509150818015611f8e5750600081511480611f8d575080806020019051810190611f8c9190613497565b5b5b611fcd576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611fc49061381d565b60405180910390fd5b5050505050565b60007f01ffc9a7000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916827bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916149050919050565b50505050565b50505050565b6000612055826108dd565b905061206581600084600161203e565b61206e826108dd565b90506004600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff02191690556001600360008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825403925050819055506002600083815260200190815260200160002060006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905581600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4612194816000846001612044565b5050565b60006121b98473ffffffffffffffffffffffffffffffffffffffff1661231f565b15612312578373ffffffffffffffffffffffffffffffffffffffff1663150b7a026121e26112a8565b8786866040518563ffffffff1660e01b81526004016122049493929190613887565b6020604051808303816000875af192505050801561224057506040513d601f19601f8201168201806040525081019061223d91906138e8565b60015b6122c2573d8060008114612270576040519150601f19603f3d011682016040523d82523d6000602084013e612275565b606091505b5060008151036122ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016122b1906136e6565b60405180910390fd5b805181602001fd5b63150b7a0260e01b7bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916817bffffffffffffffffffffffffffffffffffffffffffffffffffffffff191614915050612317565b600190505b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b50805461234e90612988565b6000825580601f10612360575061237f565b601f01602090049060005260206000209081019061237e9190612382565b5b50565b5b8082111561239b576000816000905550600101612383565b5090565b6000604051905090565b600080fd5b600080fd5b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6123e8816123b3565b81146123f357600080fd5b50565b600081359050612405816123df565b92915050565b600060208284031215612421576124206123a9565b5b600061242f848285016123f6565b91505092915050565b60008115159050919050565b61244d81612438565b82525050565b60006020820190506124686000830184612444565b92915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156124a857808201518184015260208101905061248d565b60008484015250505050565b6000601f19601f8301169050919050565b60006124d08261246e565b6124da8185612479565b93506124ea81856020860161248a565b6124f3816124b4565b840191505092915050565b6000602082019050818103600083015261251881846124c5565b905092915050565b6000819050919050565b61253381612520565b811461253e57600080fd5b50565b6000813590506125508161252a565b92915050565b60006020828403121561256c5761256b6123a9565b5b600061257a84828501612541565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006125ae82612583565b9050919050565b6125be816125a3565b82525050565b60006020820190506125d960008301846125b5565b92915050565b6125e8816125a3565b81146125f357600080fd5b50565b600081359050612605816125df565b92915050565b60008060408385031215612622576126216123a9565b5b6000612630858286016125f6565b925050602061264185828601612541565b9150509250929050565b600080600060608486031215612664576126636123a9565b5b6000612672868287016125f6565b9350506020612683868287016125f6565b925050604061269486828701612541565b9150509250925092565b6000602082840312156126b4576126b36123a9565b5b60006126c2848285016125f6565b91505092915050565b6126d481612520565b82525050565b60006020820190506126ef60008301846126cb565b92915050565b6126fe81612438565b811461270957600080fd5b50565b60008135905061271b816126f5565b92915050565b60008060408385031215612738576127376123a9565b5b6000612746858286016125f6565b92505060206127578582860161270c565b9150509250929050565b600080fd5b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6127a3826124b4565b810181811067ffffffffffffffff821117156127c2576127c161276b565b5b80604052505050565b60006127d561239f565b90506127e1828261279a565b919050565b600067ffffffffffffffff8211156128015761280061276b565b5b61280a826124b4565b9050602081019050919050565b82818337600083830152505050565b6000612839612834846127e6565b6127cb565b90508281526020810184848401111561285557612854612766565b5b612860848285612817565b509392505050565b600082601f83011261287d5761287c612761565b5b813561288d848260208601612826565b91505092915050565b600080600080608085870312156128b0576128af6123a9565b5b60006128be878288016125f6565b94505060206128cf878288016125f6565b93505060406128e087828801612541565b925050606085013567ffffffffffffffff811115612901576129006123ae565b5b61290d87828801612868565b91505092959194509250565b600080604083850312156129305761292f6123a9565b5b600061293e858286016125f6565b925050602061294f858286016125f6565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806129a057607f821691505b6020821081036129b3576129b2612959565b5b50919050565b7f4552433732313a20617070726f76616c20746f2063757272656e74206f776e6560008201527f7200000000000000000000000000000000000000000000000000000000000000602082015250565b6000612a15602183612479565b9150612a20826129b9565b604082019050919050565b60006020820190508181036000830152612a4481612a08565b9050919050565b7f4552433732313a20617070726f76652063616c6c6572206973206e6f7420746f60008201527f6b656e206f776e6572206f7220617070726f76656420666f7220616c6c000000602082015250565b6000612aa7603d83612479565b9150612ab282612a4b565b604082019050919050565b60006020820190508181036000830152612ad681612a9a565b9050919050565b7f4552433732313a2063616c6c6572206973206e6f7420746f6b656e206f776e6560008201527f72206f7220617070726f76656400000000000000000000000000000000000000602082015250565b6000612b39602d83612479565b9150612b4482612add565b604082019050919050565b60006020820190508181036000830152612b6881612b2c565b9050919050565b7f546f6b656e2062656c6f6e677320736f6d656f6e6520656c7365000000000000600082015250565b6000612ba5601a83612479565b9150612bb082612b6f565b602082019050919050565b60006020820190508181036000830152612bd481612b98565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000612c1582612520565b9150612c2083612520565b9250828201905080821115612c3857612c37612bdb565b5b92915050565b7f4552433732313a20696e76616c696420746f6b656e2049440000000000000000600082015250565b6000612c74601883612479565b9150612c7f82612c3e565b602082019050919050565b60006020820190508181036000830152612ca381612c67565b9050919050565b7f4552433732313a2061646472657373207a65726f206973206e6f74206120766160008201527f6c6964206f776e65720000000000000000000000000000000000000000000000602082015250565b6000612d06602983612479565b9150612d1182612caa565b604082019050919050565b60006020820190508181036000830152612d3581612cf9565b9050919050565b7f5265717569726573206665650000000000000000000000000000000000000000600082015250565b6000612d72600c83612479565b9150612d7d82612d3c565b602082019050919050565b60006020820190508181036000830152612da181612d65565b9050919050565b7f496e73756666696369656e742066756e64000000000000000000000000000000600082015250565b6000612dde601183612479565b9150612de982612da8565b602082019050919050565b60006020820190508181036000830152612e0d81612dd1565b9050919050565b6000612e1f82612520565b9150612e2a83612520565b9250828203905081811115612e4257612e41612bdb565b5b92915050565b6000612e5382612520565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612e8557612e84612bdb565b5b600182019050919050565b6000608082019050612ea560008301876125b5565b612eb260208301866125b5565b612ebf60408301856126cb565b612ecc60608301846126cb565b95945050505050565b7f4f6e6c79206f776e657200000000000000000000000000000000000000000000600082015250565b6000612f0b600a83612479565b9150612f1682612ed5565b602082019050919050565b60006020820190508181036000830152612f3a81612efe565b9050919050565b600081905092915050565b7f7b22746f6b656e2061646472657373223a220000000000000000000000000000600082015250565b6000612f82601283612f41565b9150612f8d82612f4c565b601282019050919050565b60008160601b9050919050565b6000612fb082612f98565b9050919050565b6000612fc282612fa5565b9050919050565b612fda612fd5826125a3565b612fb7565b82525050565b7f222c2022616d6f756e74223a2200000000000000000000000000000000000000600082015250565b6000613016600d83612f41565b915061302182612fe0565b600d82019050919050565b6000819050919050565b61304761304282612520565b61302c565b82525050565b7f222c226465736372697074696f6e223a20736f6d657468696e67202c2022696d60008201527f616765223a220000000000000000000000000000000000000000000000000000602082015250565b60006130a9602683612f41565b91506130b48261304d565b602682019050919050565b60008190508160005260206000209050919050565b600081546130e181612988565b6130eb8186612f41565b94506001821660008114613106576001811461311b5761314e565b60ff198316865281151582028601935061314e565b613124856130bf565b60005b8381101561314657815481890152600182019150602081019050613127565b838801955050505b50505092915050565b7f227d000000000000000000000000000000000000000000000000000000000000600082015250565b600061318d600283612f41565b915061319882613157565b600282019050919050565b60006131ae82612f75565b91506131ba8286612fc9565b6014820191506131c982613009565b91506131d58285613036565b6020820191506131e48261309c565b91506131f082846130d4565b91506131fb82613180565b9150819050949350505050565b60006132138261246e565b61321d8185612f41565b935061322d81856020860161248a565b80840191505092915050565b60006132458285613208565b91506132518284613208565b91508190509392505050565b7f496e73756666696369656e742062616c616e6365000000000000000000000000600082015250565b6000613293601483612479565b915061329e8261325d565b602082019050919050565b600060208201905081810360008301526132c281613286565b9050919050565b7f4552433732313a207472616e736665722066726f6d20696e636f72726563742060008201527f6f776e6572000000000000000000000000000000000000000000000000000000602082015250565b6000613325602583612479565b9150613330826132c9565b604082019050919050565b6000602082019050818103600083015261335481613318565b9050919050565b7f4552433732313a207472616e7366657220746f20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b60006133b7602483612479565b91506133c28261335b565b604082019050919050565b600060208201905081810360008301526133e6816133aa565b9050919050565b600060608201905061340260008301866125b5565b61340f60208301856125b5565b61341c60408301846126cb565b949350505050565b600081519050919050565b600081905092915050565b600061344582613424565b61344f818561342f565b935061345f81856020860161248a565b80840191505092915050565b6000613477828461343a565b915081905092915050565b600081519050613491816126f5565b92915050565b6000602082840312156134ad576134ac6123a9565b5b60006134bb84828501613482565b91505092915050565b7f5354460000000000000000000000000000000000000000000000000000000000600082015250565b60006134fa600383612479565b9150613505826134c4565b602082019050919050565b60006020820190508181036000830152613529816134ed565b9050919050565b7f4552433732313a206d696e7420746f20746865207a65726f2061646472657373600082015250565b6000613566602083612479565b915061357182613530565b602082019050919050565b6000602082019050818103600083015261359581613559565b9050919050565b7f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000600082015250565b60006135d2601c83612479565b91506135dd8261359c565b602082019050919050565b60006020820190508181036000830152613601816135c5565b9050919050565b7f4552433732313a20617070726f766520746f2063616c6c657200000000000000600082015250565b600061363e601983612479565b915061364982613608565b602082019050919050565b6000602082019050818103600083015261366d81613631565b9050919050565b7f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560008201527f63656976657220696d706c656d656e7465720000000000000000000000000000602082015250565b60006136d0603283612479565b91506136db82613674565b604082019050919050565b600060208201905081810360008301526136ff816136c3565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061374082612520565b915061374b83612520565b92508261375b5761375a613706565b5b828204905092915050565b600061377182612520565b915061377c83612520565b925082820261378a81612520565b915082820484148315176137a1576137a0612bdb565b5b5092915050565b60006040820190506137bd60008301856125b5565b6137ca60208301846126cb565b9392505050565b7f5354000000000000000000000000000000000000000000000000000000000000600082015250565b6000613807600283612479565b9150613812826137d1565b602082019050919050565b60006020820190508181036000830152613836816137fa565b9050919050565b600082825260208201905092915050565b600061385982613424565b613863818561383d565b935061387381856020860161248a565b61387c816124b4565b840191505092915050565b600060808201905061389c60008301876125b5565b6138a960208301866125b5565b6138b660408301856126cb565b81810360608301526138c8818461384e565b905095945050505050565b6000815190506138e2816123df565b92915050565b6000602082840312156138fe576138fd6123a9565b5b600061390c848285016138d3565b9150509291505056fe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa264697066735822122055c3d42359ad968ec5a2c905d897553a02de73b4d1819ddc9d332bb70a889c1a64736f6c63430008110033a2646970667358221220cf8df4db78d23b1f821c7d56e155b9f4dc7c1b7d407a368af6bbe9b49035830064736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 4560,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "s_owner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 4562,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "deployCost",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 4564,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "mintFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 4566,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "withdrawalFee",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 4570,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "balances",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4575,
        "contract": "contracts/ERC721CollateralCreator.sol:ERC721CollateralCreator",
        "label": "addressToContracts",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_array(t_address)dyn_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_array(t_address)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address[])",
        "numberOfBytes": "32",
        "value": "t_array(t_address)dyn_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}